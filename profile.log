Time	Sum	Command
15	7528	> __fish_on_interactive
11	11	-> functions -e __fish_on_interactive
140	7502	-> __fish_config_interactive
357	362	--> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/__fish_config_interactive.fish
5	5	---> function __fish_config_interactive -d "Initializations that should be performed when entering interactive mode"...
4	11	--> if not set -q __fish_initialized...
7	7	---> not set -q __fish_initialized
9	9	--> set -g __fish_active_key_bindings
4	4	--> function __init_uvar -d "Sets a universal variable if it's not already set"...
3	13	--> if test $__fish_initialized -lt 3400...
10	10	---> test $__fish_initialized -lt 3400
10	38	--> if not set -q FISH_UNIT_TESTS_RUNNING...
5	5	---> not set -q FISH_UNIT_TESTS_RUNNING
9	9	---> set -l script $__fish_data_dir/tools/create_manpage_completions.py
3	14	---> if not test -d $__fish_user_data_dir/generated_completions...
11	11	----> not test -d $__fish_user_data_dir/generated_completions
8	2894	--> if status --is-interactive...
4	4	---> status --is-interactive
21	64	---> functions -q fish_greeting
39	43	----> source /home/yoshimi/.config/fish/functions/fish_greeting.fish
4	4	-----> function fish_greeting -d "What's up, fish?"...
22	2818	---> fish_greeting
71	71	----> set_color $fish_color_autosuggestion
683	683	----> uname -nmsr
74	74	----> command -q uptime
1926	1926	----> command uptime
42	42	----> set_color normal
19	110	--> if test -d /etc/init.d...
14	14	---> test -d /etc/init.d
34	34	---> complete -x -p "/etc/init.d/*" -a start --description 'Start service'
12	12	---> complete -x -p "/etc/init.d/*" -a stop --description 'Stop service'
11	11	---> complete -x -p "/etc/init.d/*" -a status --description 'Print service status'
10	10	---> complete -x -p "/etc/init.d/*" -a restart --description 'Stop and then start service'
10	10	---> complete -x -p "/etc/init.d/*" -a reload --description 'Reload service configuration'
14	14	--> complete -c [ --wraps test
8	8	--> complete -c ! --wraps not
159	379	--> complete -c(builtin -n | string match -rv '(\.|:|source|cd|contains|count|echo|exec|printf|random|realpath|set|\\[|test|for)') --no-files
220	220	---> builtin -n | string match -rv '(\.|:|source|cd|contains|count|echo|exec|printf|random|realpath|set|\\[|test|for)'
11	11	--> function __fish_reload_key_bindings -d "Reload key bindings when binding variable change" --on-variable fish_key_bindings...
26	3230	--> __fish_reload_key_bindings
20	37	---> __init_uvar fish_key_bindings fish_default_key_bindings
3	17	----> if not set --query $argv[1]...
14	14	-----> not set --query $argv[1]
4	24	---> if test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"...
20	20	----> test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"
3	395	---> if not functions -q "$fish_key_bindings"...
124	392	----> not functions -q "$fish_key_bindings"
259	268	-----> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/fish_default_key_bindings.fish
9	9	------> function fish_default_key_bindings -d "emacs-like key binds"...
9	9	---> set -g __fish_active_key_bindings "$fish_key_bindings"
6	6	---> set -g fish_bind_mode default
8	2409	---> if test "$fish_key_bindings" = fish_default_key_bindings...
5	5	----> test "$fish_key_bindings" = fish_default_key_bindings
98	2396	----> fish_default_key_bindings 2>/dev/null
5	19	-----> if contains -- -h $argv...
8	8	------> contains -- -h $argv
6	6	------> contains -- --help $argv
9	111	-----> if not set -q argv[1]...
4	4	------> not set -q argv[1]
90	90	------> bind --erase --all --preset
2	8	------> if test "$fish_key_bindings" != fish_default_key_bindings...
6	6	-------> test "$fish_key_bindings" != fish_default_key_bindings
5	16	-----> if not contains -- -s $argv...
6	6	------> not contains -- -s $argv
5	5	------> set argv -s $argv
258	1829	-----> __fish_shared_key_bindings $argv
436	449	------> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/__fish_shared_key_bindings.fish
5	5	-------> function __fish_shared_key_bindings -d "Bindings shared between emacs and vi mode"...
4	4	-------> function __fish_commandline_insert_escaped --description 'Insert the first arg escaped if a second arg is given'...
2	2	-------> function __fish_start_bracketed_paste...
2	2	-------> function __fish_stop_bracketed_paste...
6	19	------> if contains -- -h $argv...
7	7	-------> contains -- -h $argv
6	6	-------> contains -- --help $argv
11	11	------> bind --preset $argv \cy yank
7	7	------> bind --preset $argv \ey yank-pop
11	11	------> bind --preset $argv -k right forward-char
7	7	------> bind --preset $argv -k left backward-char
6	6	------> bind --preset $argv \e\[C forward-char
6	6	------> bind --preset $argv \e\[D backward-char
6	6	------> bind --preset $argv \eOC forward-char
6	6	------> bind --preset $argv \eOD backward-char
6	6	------> bind --preset $argv \e\[1\;5C forward-word
6	6	------> bind --preset $argv \e\[1\;5D backward-word
7	7	------> bind --preset $argv -k ppage beginning-of-history
7	7	------> bind --preset $argv -k npage end-of-history
6	6	------> bind --preset $argv \cx fish_clipboard_copy
6	6	------> bind --preset $argv \cv fish_clipboard_paste
6	6	------> bind --preset $argv \e cancel
6	6	------> bind --preset $argv \t complete
5	5	------> bind --preset $argv \cs pager-toggle-search
7	7	------> bind --preset $argv --key btab complete-and-search
8	8	------> bind --preset $argv -k sdc history-pager-delete or backward-delete-char
7	7	------> bind --preset $argv \e\n "commandline -f expand-abbr; commandline -i \n"
7	7	------> bind --preset $argv \e\r "commandline -f expand-abbr; commandline -i \n"
9	9	------> bind --preset $argv -k down down-or-search
8	8	------> bind --preset $argv -k up up-or-search
7	7	------> bind --preset $argv \e\[A up-or-search
7	7	------> bind --preset $argv \e\[B down-or-search
6	6	------> bind --preset $argv \eOA up-or-search
6	6	------> bind --preset $argv \eOB down-or-search
7	7	------> bind --preset $argv -k sright forward-bigword
7	7	------> bind --preset $argv -k sleft backward-bigword
7	7	------> bind --preset $argv \e\eOC nextd-or-forward-word
7	7	------> bind --preset $argv \e\eOD prevd-or-backward-word
6	6	------> bind --preset $argv \e\e\[C nextd-or-forward-word
6	6	------> bind --preset $argv \e\e\[D prevd-or-backward-word
6	6	------> bind --preset $argv \eO3C nextd-or-forward-word
7	7	------> bind --preset $argv \eO3D prevd-or-backward-word
7	7	------> bind --preset $argv \e\[3C nextd-or-forward-word
14	14	------> bind --preset $argv \e\[3D prevd-or-backward-word
7	7	------> bind --preset $argv \e\[1\;3C nextd-or-forward-word
7	7	------> bind --preset $argv \e\[1\;3D prevd-or-backward-word
7	7	------> bind --preset $argv \e\[1\;9C nextd-or-forward-word
7	7	------> bind --preset $argv \e\[1\;9D prevd-or-backward-word
6	6	------> bind --preset $argv \e\eOA history-token-search-backward
6	6	------> bind --preset $argv \e\eOB history-token-search-forward
7	7	------> bind --preset $argv \e\e\[A history-token-search-backward
7	7	------> bind --preset $argv \e\e\[B history-token-search-forward
9	9	------> bind --preset $argv \eO3A history-token-search-backward
7	7	------> bind --preset $argv \eO3B history-token-search-forward
7	7	------> bind --preset $argv \e\[3A history-token-search-backward
7	7	------> bind --preset $argv \e\[3B history-token-search-forward
7	7	------> bind --preset $argv \e\[1\;3A history-token-search-backward
7	7	------> bind --preset $argv \e\[1\;3B history-token-search-forward
7	7	------> bind --preset $argv \e\[1\;9A history-token-search-backward
7	7	------> bind --preset $argv \e\[1\;9B history-token-search-forward
7	7	------> bind --preset $argv \e. history-token-search-backward
7	7	------> bind --preset $argv \el __fish_list_current_token
7	7	------> bind --preset $argv \eo __fish_preview_current_file
7	7	------> bind --preset $argv \ew __fish_whatis_current_token
7	7	------> bind --preset $argv \cl clear-screen
6	6	------> bind --preset $argv \cc cancel-commandline
7	7	------> bind --preset $argv \cu backward-kill-line
7	7	------> bind --preset $argv \cw backward-kill-path-component
7	7	------> bind --preset $argv \e\[F end-of-line
10	10	------> bind --preset $argv \e\[H beginning-of-line
8	8	------> bind --preset $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
6	6	------> bind --preset $argv \cd delete-or-exit
7	7	------> bind --preset $argv \es 'for cmd in sudo doas please; if command -q $cmd; fish_commandline_prepend $cmd; break; end; end'
6	6	------> bind --preset $argv -k f1 __fish_man_page
6	6	------> bind --preset $argv \eh __fish_man_page
23	23	------> bind --preset $argv \ep __fish_paginate
7	7	------> bind --preset $argv \e\# __fish_toggle_comment_commandline
7	7	------> bind --preset $argv \ee edit_command_buffer
6	6	------> bind --preset $argv \ev edit_command_buffer
58	195	------> for mode in (bind --list-modes | string match -v paste)...
109	109	-------> bind --list-modes | string match -v paste
12	12	-------> bind --preset -M $mode \e\[I 'emit fish_focus_in'
8	8	-------> bind --preset -M $mode \e\[O false
8	8	-------> bind --preset -M $mode \e\[\?1004h false
47	131	------> for mode in (bind --list-modes | string match -v paste)...
73	73	-------> bind --list-modes | string match -v paste
11	11	-------> bind --preset -M $mode -m paste \e\[200~ __fish_start_bracketed_paste
8	8	------> bind --preset -M paste \e\[201~ __fish_stop_bracketed_paste
7	7	------> bind --preset -M paste "" self-insert
7	7	------> bind --preset -M paste \r "commandline -i \n"
7	7	------> bind --preset -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
7	7	------> bind --preset -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
6	6	------> bind --preset -M paste " " self-insert-notfirst
42	214	------> if not set -l index (contains --index -- -M $argv)...
43	50	-------> not set -l index (contains --index -- -M $argv)
7	7	--------> contains --index -- -M $argv
9	9	-------> bind --preset $argv "" self-insert
7	7	-------> bind --preset $argv " " self-insert expand-abbr
7	7	-------> bind --preset $argv ";" self-insert expand-abbr
6	6	-------> bind --preset $argv "|" self-insert expand-abbr
6	6	-------> bind --preset $argv "&" self-insert expand-abbr
7	7	-------> bind --preset $argv ">" self-insert expand-abbr
7	7	-------> bind --preset $argv "<" self-insert expand-abbr
7	7	-------> bind --preset $argv ")" self-insert expand-abbr
9	9	-------> bind --preset $argv -k nul 'test -n "$(commandline)" && commandline -i " "'
8	8	-------> bind --preset $argv \e\[32\;2u 'commandline -i " "; commandline -f expand-abbr'
6	6	-------> bind --preset $argv \n execute
7	7	-------> bind --preset $argv \r execute
7	7	-------> bind --preset $argv \e\[27\;5\;13~ execute
7	7	-------> bind --preset $argv \e\[13\;5u execute
7	7	-------> bind --preset $argv \e\[27\;2\;13~ execute
15	15	-------> bind --preset $argv \e\[13\;2u execute
8	8	-----> bind --preset $argv \ck kill-line
7	7	-----> bind --preset $argv \eOC forward-char
7	7	-----> bind --preset $argv \eOD backward-char
5	5	-----> bind --preset $argv \e\[C forward-char
8	8	-----> bind --preset $argv \e\[D backward-char
11	11	-----> bind --preset $argv -k right forward-char
9	9	-----> bind --preset $argv -k left backward-char
9	9	-----> bind --preset $argv -k dc delete-char
7	7	-----> bind --preset $argv -k backspace backward-delete-char
7	7	-----> bind --preset $argv \x7f backward-delete-char
8	8	-----> bind --preset $argv \e\[1~ beginning-of-line
7	7	-----> bind --preset $argv \e\[3~ delete-char
6	6	-----> bind --preset $argv \e\[4~ end-of-line
7	7	-----> bind --preset $argv -k home beginning-of-line
7	7	-----> bind --preset $argv -k end end-of-line
7	7	-----> bind --preset $argv \ca beginning-of-line
7	7	-----> bind --preset $argv \ce end-of-line
6	6	-----> bind --preset $argv \ch backward-delete-char
7	7	-----> bind --preset $argv \cp up-or-search
7	7	-----> bind --preset $argv \cn down-or-search
6	6	-----> bind --preset $argv \cf forward-char
9	9	-----> bind --preset $argv \cb backward-char
10	10	-----> bind --preset $argv \ct transpose-chars
9	9	-----> bind --preset $argv \cg cancel
9	9	-----> bind --preset $argv \c_ undo
8	8	-----> bind --preset $argv \cz undo
10	10	-----> bind --preset $argv \e/ redo
10	10	-----> bind --preset $argv \et transpose-words
10	10	-----> bind --preset $argv \eu upcase-word
8	8	-----> bind --preset $argv \ec capitalize-word
7	7	-----> bind --preset $argv \e\x7f backward-kill-word
7	7	-----> bind --preset $argv \e\b backward-kill-word
10	29	-----> if not test "$TERM_PROGRAM" = Apple_Terminal...
6	6	------> not test "$TERM_PROGRAM" = Apple_Terminal
7	7	------> bind --preset $argv \eb backward-word
6	6	------> bind --preset $argv \ef forward-word
7	7	-----> bind --preset $argv \e\< beginning-of-buffer
6	6	-----> bind --preset $argv \e\> end-of-buffer
5	5	-----> bind --preset $argv \ed kill-word
6	6	-----> bind --preset $argv \cr history-pager
8	15	-----> switch "$TERM"...
7	7	------> bind --preset $argv \e\x20ep fish_clipboard_paste
5	5	-----> set -e -g fish_cursor_selection_mode
5	324	---> if functions --query fish_user_key_bindings >/dev/null...
13	13	----> functions --query fish_user_key_bindings >/dev/null
31	306	----> fish_user_key_bindings 2>/dev/null
10	10	-----> test -f $OMF_CONFIG/theme
17	17	-----> read -l theme < $OMF_CONFIG/theme
8	8	-----> test -e $OMF_CONFIG/key_bindings.fish
156	156	-----> set -l key_bindings {$OMF_CONFIG,$OMF_PATH}/pkg/*/key_bindings.fish \
                      {$OMF_CONFIG,$OMF_PATH}/themes*/$theme/key_bindings.fish
9	9	-----> for file in $key_bindings...
75	75	-----> functions -q __original_fish_user_key_bindings
13	100	--> if not set -q FISH_UNIT_TESTS_RUNNING...
5	5	---> not set -q FISH_UNIT_TESTS_RUNNING
4	4	---> function __fish_enable_bracketed_paste --on-event fish_prompt...
3	3	---> function __fish_disable_bracketed_paste --on-event fish_preexec --on-event fish_exit...
3	3	---> status is-interactive
7	72	---> __fish_enable_bracketed_paste
65	65	----> printf "\e[?2004h"
10	29	--> if set -q TMUX...
4	4	---> set -q TMUX
5	5	---> not set -q FISH_UNIT_TESTS_RUNNING
5	5	---> function __fish_enable_focus --on-event fish_postexec...
5	5	---> function __fish_disable_focus --on-event fish_preexec...
10	50	--> if not set -q fish_handle_reflow...
5	5	---> not set -q fish_handle_reflow
10	35	---> if set -q VTE_VERSION...
5	5	----> set -q VTE_VERSION
6	6	----> string match -q -- 'alacritty*' $TERM
5	5	----> string match -q -- '*kitty' $TERM
4	4	----> set -q KONSOLE_VERSION
5	5	----> set -g fish_handle_reflow 1
6	6	--> function __fish_winch_handler --on-signal WINCH -d "Repaint screen when window changes size"...
3	78	--> if not set -q FISH_UNIT_TESTS_RUNNING...
4	4	---> not set -q FISH_UNIT_TESTS_RUNNING
18	71	---> begin...
5	5	----> string match -q -- 'foot*' $TERM
31	31	----> string match -q -- 'xterm-kitty*' $TERM
6	6	----> test 0"$VTE_VERSION" -ge 3405
4	4	----> test "$TERM_PROGRAM" = Apple_Terminal
4	4	----> test "$TERM_PROGRAM" = WezTerm
3	3	----> test "$TERM_PROGRAM" = iTerm.app
10	10	--> set __fish_initialized 3400
6	6	--> functions -e __fish_config_interactive
65	70	> source /home/yoshimi/.config/fish/functions/fish_mode_prompt.fish
5	5	-> function fish_mode_prompt -d 'bobthefish-optimized fish mode indicator'...
17	42	> fish_mode_prompt
8	8	-> [ "$theme_display_vi" != 'no' ]
15	15	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
2	2	-> return
13	23187	> fish_prompt
10	10	-> set -l last_status $status
2	7	-> if set -q CONDA_LEFT_PROMPT...
5	5	--> set -q CONDA_LEFT_PROMPT
9	14	-> return_last_status $last_status
5	5	--> return $argv
64	23143	-> __fish_prompt_orig
6	6	--> set -l last_status $status
3	9	--> if [ "$TERM" = 'dumb' ]...
6	6	---> [ "$TERM" = 'dumb' ]
119	652	--> __bobthefish_glyphs
163	167	---> source /home/yoshimi/.config/fish/functions/__bobthefish_glyphs.fish
4	4	----> function __bobthefish_glyphs -S -d 'Define glyphs used by bobthefish'...
7	7	---> set -x branch_glyph            \uE0A0
6	6	---> set -x right_black_arrow_glyph \uE0B0
5	5	---> set -x right_arrow_glyph       \uE0B1
6	6	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
5	5	---> set -x tag_glyph               \u2302
5	5	---> set -x nonzero_exit_glyph      '! '
6	6	---> set -x private_glyph           \uE0A2 ' '
4	4	---> set -x superuser_glyph         '$ '
5	5	---> set -x bg_job_glyph            '% '
3	3	---> set -x hg_glyph                \u263F
7	7	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
4	4	---> set -x virtualenv_glyph        \u25F0
4	4	---> set -x pypy_glyph              \u1D56
4	4	---> set -x ruby_glyph              ''
4	4	---> set -x go_glyph                ''
5	5	---> set -x nix_glyph               ''
4	4	---> set -x desk_glyph              \u25F2
4	4	---> set -x k8s_glyph               \u2388
5	5	---> set -x vagrant_running_glyph   \u2191
5	5	---> set -x vagrant_poweroff_glyph  \u2193
5	5	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
4	4	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
5	5	---> set -x git_dirty_glyph      '*'
5	5	---> set -x git_staged_glyph     '~'
5	5	---> set -x git_stashed_glyph    '$'
5	5	---> set -x git_untracked_glyph  '…'
4	4	---> set -x git_ahead_glyph      \u2191
6	6	---> set -x git_behind_glyph     \u2193
5	5	---> set -x git_plus_glyph       '+'
5	5	---> set -x git_minus_glyph      '-'
5	5	---> set -x git_plus_minus_glyph '±'
4	4	---> set -x fossil_glyph \U1F9B4
5	14	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
9	9	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
48	160	---> if [ "$theme_nerd_fonts" = "yes" ]...
6	6	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
4	4	----> set detached_glyph   \uF417
4	4	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
5	5	----> set virtualenv_glyph \uE73C ' '
4	4	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
5	5	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
4	4	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
5	5	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
3	3	----> set git_minus_glyph      \uF0DD
5	5	----> set git_plus_minus_glyph \uF0DC
5	13	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
56	2653	--> __bobthefish_colors $theme_color_scheme
2247	2256	---> source /home/yoshimi/.config/fish/functions/__bobthefish_colors.fish
7	7	----> function __bobthefish_colors -S -a color_scheme -d 'Define colors used by bobthefish'...
2	2	----> function __bobthefish_user_color_scheme_deprecated...
112	341	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
5	5	----> set -l green    addc10 189303 0c4801
4	4	----> set -l blue     48b4fb 005faf 255e87
4	4	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
5	5	----> set -l black    000000
4	4	----> set -l ruby_red af0000
3	3	----> set -l go_blue  00d7d7
8	8	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
7	7	----> set -x color_initial_segment_su       $white $green[2] --bold
6	6	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
6	6	----> set -x color_path                     $grey[3] $grey[2]
6	6	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
6	6	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
5	5	----> set -x color_repo                     $green[1] $green[3]
6	6	----> set -x color_repo_work_tree           $grey[3] $white --bold
6	6	----> set -x color_repo_dirty               $red[2] $white
7	7	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
6	6	----> set -x color_vagrant                  $blue[1] $white --bold
5	5	----> set -x color_k8s                      $green[2] $white --bold
8	8	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
6	6	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
6	6	----> set -x color_screen                   $green[1] $white --bold
11	11	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
6	6	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
6	6	----> set -x color_virtualgo                $go_blue $black --bold
5	5	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
157	157	--> type -q bobthefish_colors
5	5	--> set -l __bobthefish_current_bg
48	93	--> set -l real_pwd (__bobthefish_pwd)
26	45	---> __bobthefish_pwd
19	19	----> builtin pwd -P 2>/dev/null
23	184	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
4	4	---> set -l superuser
5	5	---> set -l bg_jobs
6	6	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
19	115	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
7	92	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
79	79	-----> jobs -p >/dev/null
3	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
27	98	--> __bobthefish_prompt_user
25	25	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
10	10	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
3	6	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
3	6	---> if set -q display_hostname...
3	3	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
9	20	--> __bobthefish_prompt_screen
8	8	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
6	16	--> __bobthefish_prompt_vagrant
7	7	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
7	17	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
9	16	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
2	2	---> return
11	19	--> __bobthefish_prompt_aws_vault_profile
5	5	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
8	18	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
9	18	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
16	375	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
10	342	---> if command -q rvm-prompt...
69	69	----> command -q rvm-prompt
65	65	----> command -q rbenv
134	134	----> type -q chruby
64	64	----> command -q asdf
5	5	---> [ -z "$ruby_version" ]
2	2	---> return
16	531	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
61	485	---> while not [ -z "$d" ]
...
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
51	103	----> set d (__bobthefish_dirname $d)
26	52	-----> __bobthefish_dirname $d
26	26	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
41	76	----> set d (__bobthefish_dirname $d)
19	35	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	17	----> if [ -e $d/go.mod ]...
14	14	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
43	74	----> set d (__bobthefish_dirname $d)
20	31	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
39	73	----> set d (__bobthefish_dirname $d)
19	34	-----> __bobthefish_dirname $d
15	15	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
7	14	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
2	2	----> return
12	39	--> __bobthefish_prompt_virtualfish
13	13	---> command -q python
11	11	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
8	19	--> __bobthefish_prompt_virtualgo
8	8	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
11	681	--> __bobthefish_prompt_node
6	6	---> set -l should_show
36	656	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
8	8	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
16	606	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
7	7	-----> set -l files $argv[2..-1]
6	15	-----> if test -z "$dir"...
4	4	------> test -z "$dir"
5	5	------> test -z "$files"
58	558	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
13	44	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
42	80	------> set dir (__bobthefish_dirname "$dir")
23	38	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	42	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
40	73	------> set dir (__bobthefish_dirname "$dir")
18	33	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	42	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	67	------> set dir (__bobthefish_dirname "$dir")
17	27	-------> __bobthefish_dirname "$dir"
10	10	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
10	40	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
4	9	-------> if [ -e "$dir/$f" ]...
5	5	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
36	66	------> set dir (__bobthefish_dirname "$dir")
18	30	-------> __bobthefish_dirname "$dir"
12	12	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
3	3	-----> return 1
5	5	---> [ -z "$should_show" ]
3	3	---> return
46	1762	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	1716	---> __bobthefish_git_project_dir $real_pwd
15	15	----> [ "$theme_display_git" = 'no' ]
64	64	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
16	1609	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
52	1499	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1447	1447	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
9	79	-----> switch $real_pwd/...
66	66	------> echo $git_toplevel
4	4	------> return
47	73	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	26	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
42	66	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
13	24	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
49	15435	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
15	258	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
48	243	----> if builtin -q path...
14	14	-----> builtin -q path
47	181	-----> echo (path sort -r $argv)[1]
134	134	------> path sort -r $argv
51	15128	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
48	2746	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
50	1243	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1193	1193	------> command git config --bool bash.showDirtyState 2>/dev/null
6	1448	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
61	1420	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1347	1347	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
12	12	-------> echo -n "$git_dirty_glyph"
4	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
9	9	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
54	1493	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1439	1439	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
51	1460	----> set -l stashed (__bobthefish_git_stashed)
13	1409	-----> __bobthefish_git_stashed
23	1396	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1365	1365	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
75	1384	----> set -l ahead (__bobthefish_git_ahead)
18	1309	-----> __bobthefish_git_ahead
3	14	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
11	11	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
7	7	------> set -l behind 0
71	1234	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1163	1163	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
9	30	------> if [ $ahead -eq 1 ]...
15	15	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
12	3032	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
59	1508	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1449	1449	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1505	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
52	1478	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1426	1426	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	9	------> if [ "$new" ]...
5	5	-------> [ "$new" ]
8	8	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
6	16	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
37	734	----> __bobthefish_path_segment $git_root_dir project
6	6	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
3	12	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
32	114	-----> __bobthefish_start_segment $segment_color
7	7	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
5	5	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
13	13	------> set_color normal
13	13	------> set_color -b $bg $fg $argv
21	28	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
4	4	-----> set -l parent
11	502	-----> switch "$segment_dir"...
45	394	------> set parent (__bobthefish_pretty_parent "$segment_dir")
26	349	-------> __bobthefish_pretty_parent "$segment_dir"
5	5	--------> set -q fish_prompt_pwd_dir_length
8	8	--------> set -l fish_prompt_pwd_dir_length 1
8	8	--------> set -l real_home ~
50	262	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
107	212	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
33	51	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
25	54	----------> __bobthefish_dirname $child_dir
29	29	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	11	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	11	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
7	7	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
18	18	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
48	97	------> set directory (__bobthefish_basename "$segment_dir")
27	49	-------> __bobthefish_basename "$segment_dir"
22	22	--------> string replace -r '^.*/' '' -- $argv
13	13	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
16	16	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
24	124	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
8	8	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
27	52	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
9	9	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
63	3771	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3708	-----> __bobthefish_git_branch
49	1414	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1365	1365	-------> command git describe --tags --exact-match 2>/dev/null
57	1086	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1029	1029	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1193	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
52	1133	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1081	1081	--------> git config init.defaultBranch
13	13	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
12	12	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
12	269	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
42	240	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
19	198	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
48	144	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
53	96	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
28	43	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
7	25	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
14	117	--> __bobthefish_finish_segments
17	48	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
9	9	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
12	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
5	5	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
8	8	----> set_color $fish_color_autosuggestion
5	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
4	4	---> set __bobthefish_current_bg
8	133	> fish_right_prompt
6	27	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
17	98	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
12	30	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
8	8	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
9	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
6	6	--> set_color normal
85	95	> source /home/yoshimi/.config/fish/functions/fish_title.fish
7	7	-> function __bobthefish_title_user -S -d 'Display actual user if different from $default_user'...
3	3	-> function fish_title...
12	726	> fish_title
7	19	-> __bobthefish_title_user
4	12	--> if [ "$theme_title_display_user" = 'yes' ]...
8	8	---> [ "$theme_title_display_user" = 'yes' ]
4	9	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
6	686	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
5	675	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
114	665	---> prompt_pwd
103	108	----> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/prompt_pwd.fish
5	5	-----> function prompt_pwd --description 'short CWD for the prompt'...
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
12	12	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
5	5	----> set argv $PWD
3	3	----> set -ql _flag_d
3	3	----> set -q fish_prompt_pwd_dir_length
4	4	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
13	384	----> for path in $argv...
42	50	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
42	59	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
17	17	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
10	262	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	179	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	153	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	113	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
72	72	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	61	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
18	18	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
133	30517730	> __fzf_reverse_isearch
8549	8558	-> source /home/yoshimi/.config/fish/functions/__fzf_reverse_isearch.fish
9	9	--> function __fzf_reverse_isearch...
345	1532	-> history merge
802	818	--> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/history.fish
8	8	---> function __fish_unexpected_hist_args --no-scope-shadowing...
8	8	---> function history --description "display or manipulate interactive command history"...
13	13	--> set -l cmd history
10	10	--> set -l options --exclusive 'c,e,p' --exclusive 'S,D,M,V,X'
8	8	--> set -a options h/help c/contains e/exact p/prefix
9	9	--> set -a options C/case-sensitive R/reverse z/null 't/show-time=?' 'n#max'
7	7	--> set -a options S-search D-delete M-merge V-save X-clear
40	40	--> argparse -n $cmd $options -- $argv
6	12	--> if set -q _flag_help...
6	6	---> set -q _flag_help
6	6	--> set -l hist_cmd
6	6	--> set -l show_time
6	6	--> set -l max_count
6	6	--> set -l search_mode
4	4	--> set -q _flag_max
7	7	--> set max_count -n$_flag_max
6	6	--> set -q _flag_with_time
7	19	--> if set -q _flag_show_time[1]...
6	6	---> set -q _flag_show_time[1]
6	6	---> set -q _flag_show_time
5	5	--> set -q _flag_prefix
4	4	--> set -q _flag_contains
4	4	--> set -q _flag_exact
15	41	--> if set -q _flag_delete...
4	4	---> set -q _flag_delete
5	5	---> set -q _flag_save
4	4	---> set -q _flag_clear
4	4	---> set -q _flag_search
4	4	---> set -q _flag_merge
5	5	---> set -q _flag_clear-session
13	60	--> if not set -q hist_cmd[1]...
5	5	---> not set -q hist_cmd[1]
4	4	---> set -q argv[1]
12	38	---> if contains $argv[1] search delete merge save clear clear-session...
13	13	----> contains $argv[1] search delete merge save clear clear-session
7	7	----> set hist_cmd $argv[1]
6	6	----> set -e argv[1]
4	8	--> if not set -q hist_cmd[1]...
4	4	---> not set -q hist_cmd[1]
18	88	--> switch $hist_cmd...
24	62	---> __fish_unexpected_hist_args $argv
7	26	----> if test -n "$search_mode"...
14	14	-----> test -n "$search_mode"
5	5	-----> set -q show_time[1]
4	8	----> if set -q argv[1]...
4	4	-----> set -q argv[1]
4	4	----> return 1
8	8	---> builtin history merge -- $argv
789	30507295	-> history -z | eval (__fzfcmd) --read0 --print0 --tiebreak=index --toggle-sort=ctrl-r $FZF_DEFAULT_OPTS $FZF_REVERSE_ISEARCH_OPTS -q '(commandline)' | read -lz result
44	273	--> __fzfcmd
166	174	---> source /home/yoshimi/.config/fish/functions/__fzfcmd.fish
8	8	----> function __fzfcmd...
9	9	---> set -q FZF_TMUX
8	8	---> set FZF_TMUX 0
6	6	---> set -q FZF_TMUX_HEIGHT
9	32	---> if test $FZF_TMUX -eq 1...
12	12	----> test $FZF_TMUX -eq 1
11	11	----> echo "fzf"
9	9	--> set -l cmd history
10	10	--> set -l options --exclusive 'c,e,p' --exclusive 'S,D,M,V,X'
8	8	--> set -a options h/help c/contains e/exact p/prefix
9	9	--> set -a options C/case-sensitive R/reverse z/null 't/show-time=?' 'n#max'
8	8	--> set -a options S-search D-delete M-merge V-save X-clear
42	42	--> argparse -n $cmd $options -- $argv
4	9	--> if set -q _flag_help...
5	5	---> set -q _flag_help
5	5	--> set -l hist_cmd
5	5	--> set -l show_time
5	5	--> set -l max_count
6	6	--> set -l search_mode
4	4	--> set -q _flag_max
7	7	--> set max_count -n$_flag_max
5	5	--> set -q _flag_with_time
7	15	--> if set -q _flag_show_time[1]...
5	5	---> set -q _flag_show_time[1]
3	3	---> set -q _flag_show_time
4	4	--> set -q _flag_prefix
4	4	--> set -q _flag_contains
4	4	--> set -q _flag_exact
16	41	--> if set -q _flag_delete...
4	4	---> set -q _flag_delete
5	5	---> set -q _flag_save
4	4	---> set -q _flag_clear
4	4	---> set -q _flag_search
4	4	---> set -q _flag_merge
4	4	---> set -q _flag_clear-session
7	16	--> if not set -q hist_cmd[1]...
4	4	---> not set -q hist_cmd[1]
5	5	---> set -q argv[1]
13	22	--> if not set -q hist_cmd[1]...
4	4	---> not set -q hist_cmd[1]
5	5	---> set hist_cmd search
22	11377	--> switch $hist_cmd...
7	7	---> test -z "$search_mode"
6	6	---> set search_mode --contains
12	11342	---> if isatty stdout...
138	317	----> isatty stdout
99	106	-----> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/isatty.fish
7	7	------> function isatty -d "Tests if a file descriptor is a tty"...
9	9	-----> set -l options h/help
15	15	-----> argparse -n isatty $options -- $argv
5	10	-----> if set -q _flag_help...
5	5	------> set -q _flag_help
5	9	-----> if set -q argv[2]...
4	4	------> set -q argv[2]
5	5	-----> set -l fd
11	17	-----> switch "$argv"...
6	6	------> set fd 1
8	8	-----> test -t "$fd"
11013	11013	----> builtin history search $search_mode $show_time $max_count $_flag_case_sensitive $_flag_reverse $_flag_null -- $argv
30494535	30494618	--> fzf --read0 --print0 --tiebreak=index --toggle-sort=ctrl-r --height 40% -q (commandline)
83	83	---> commandline
198	198	-> commandline -- $result
14	14	-> commandline -f repaint
33	102	> fish_mode_prompt
27	27	-> [ "$theme_display_vi" != 'no' ]
37	37	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
35	22711	> fish_prompt
21	21	-> set -l last_status $status
5	13	-> if set -q CONDA_LEFT_PROMPT...
8	8	--> set -q CONDA_LEFT_PROMPT
18	27	-> return_last_status $last_status
9	9	--> return $argv
93	22615	-> __fish_prompt_orig
9	9	--> set -l last_status $status
2	18	--> if [ "$TERM" = 'dumb' ]...
16	16	---> [ "$TERM" = 'dumb' ]
236	803	--> __bobthefish_glyphs
14	14	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
10	10	---> set -x right_arrow_glyph       \uE0B1
9	9	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
10	10	---> set -x tag_glyph               \u2302
9	9	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
10	10	---> set -x superuser_glyph         '$ '
8	8	---> set -x bg_job_glyph            '% '
11	11	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
7	7	---> set -x go_glyph                ''
9	9	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
9	9	---> set -x vagrant_running_glyph   \u2191
9	9	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
9	9	---> set -x vagrant_unknown_glyph   '!'
8	8	---> set -x git_dirty_glyph      '*'
10	10	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
8	8	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
8	8	---> set -x git_plus_glyph       '+'
8	8	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
5	22	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
17	17	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
62	223	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
8	8	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
8	8	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
6	6	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
8	8	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
6	6	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
6	6	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
5	12	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
66	648	--> __bobthefish_colors $theme_color_scheme
252	582	---> switch "$color_scheme"...
9	9	----> set -l red      cc9999 ce000f 660000
6	6	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
7	7	----> set -l brown    bf5e00 803f00 4d2600
7	7	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
6	6	----> set -l black    000000
6	6	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
11	11	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
10	10	----> set -x color_path                     $grey[3] $grey[2]
10	10	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
10	10	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
10	10	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
10	10	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
10	10	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
8	8	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
316	316	--> type -q bobthefish_colors
8	8	--> set -l __bobthefish_current_bg
76	136	--> set -l real_pwd (__bobthefish_pwd)
31	60	---> __bobthefish_pwd
29	29	----> builtin pwd -P 2>/dev/null
33	249	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
12	12	---> [ -w / -o -w /private/ ]
25	154	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
7	123	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
107	107	-----> jobs -p >/dev/null
3	24	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
21	21	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
31	133	--> __bobthefish_prompt_user
33	33	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
18	18	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
4	9	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
5	9	---> if set -q display_hostname...
4	4	----> set -q display_hostname
5	5	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
14	27	--> __bobthefish_prompt_screen
10	10	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
9	23	--> __bobthefish_prompt_vagrant
10	10	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
13	27	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
4	4	---> return
9	21	--> __bobthefish_prompt_k8s_context
8	8	---> [ "$theme_display_k8s_context" = 'yes' ]
4	4	---> return
11	23	--> __bobthefish_prompt_aws_vault_profile
9	9	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
10	24	--> __bobthefish_prompt_nix
11	11	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
12	24	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
22	586	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
8	8	---> set -l ruby_version
11	538	---> if command -q rvm-prompt...
113	113	----> command -q rvm-prompt
97	97	----> command -q rbenv
219	219	----> type -q chruby
98	98	----> command -q asdf
8	8	---> [ -z "$ruby_version" ]
3	3	---> return
25	726	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
90	658	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
66	134	----> set d (__bobthefish_dirname $d)
33	68	-----> __bobthefish_dirname $d
35	35	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	15	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
64	112	----> set d (__bobthefish_dirname $d)
29	48	-----> __bobthefish_dirname $d
19	19	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
5	14	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
59	102	----> set d (__bobthefish_dirname $d)
26	43	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
56	98	----> set d (__bobthefish_dirname $d)
27	42	-----> __bobthefish_dirname $d
15	15	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
8	19	---> if [ "$gomod_version" = "0" ]...
8	8	----> [ "$gomod_version" = "0" ]
3	3	----> return
15	53	--> __bobthefish_prompt_virtualfish
19	19	---> command -q python
16	16	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
12	46	--> __bobthefish_prompt_virtualgo
30	30	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
4	4	---> return
17	960	--> __bobthefish_prompt_node
7	7	---> set -l should_show
49	925	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
13	13	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
26	856	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
9	9	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
8	21	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
87	787	-----> while [ "$dir" ]
...
6	6	------> [ "$dir" ]
16	59	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
5	14	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
59	108	------> set dir (__bobthefish_dirname "$dir")
29	49	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	57	------> for f in $files...
5	17	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
56	100	------> set dir (__bobthefish_dirname "$dir")
27	44	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
15	55	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
55	97	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	54	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
58	104	------> set dir (__bobthefish_dirname "$dir")
30	46	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
10	10	------> [ "$dir" ]
3	3	-----> return 1
8	8	---> [ -z "$should_show" ]
3	3	---> return
65	2481	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
25	2416	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
85	85	----> command -q git
7	7	----> set -q theme_vcs_ignore_paths
21	2290	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
83	2118	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2035	2035	------> command git rev-parse --show-toplevel 2>/dev/null
13	13	-----> [ -z "$git_toplevel" ]
16	130	-----> switch $real_pwd/...
110	110	------> echo $git_toplevel
4	4	------> return
65	100	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
21	35	---> __bobthefish_hg_project_dir $real_pwd
10	10	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
57	89	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	32	---> __bobthefish_fossil_project_dir $real_pwd
10	10	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
76	14874	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
20	285	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
66	265	----> if builtin -q path...
20	20	-----> builtin -q path
64	179	-----> echo (path sort -r $argv)[1]
115	115	------> path sort -r $argv
51	14513	---> __bobthefish_prompt_git $git_root_dir $real_pwd
11	11	----> set -l dirty ''
62	2967	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
65	1281	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1216	1216	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1614	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
76	1581	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1491	1491	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
14	14	-------> echo -n "$git_dirty_glyph"
3	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
59	1274	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1215	1215	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
49	1171	----> set -l stashed (__bobthefish_git_stashed)
11	1122	-----> __bobthefish_git_stashed
18	1111	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1085	1085	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
47	1254	----> set -l ahead (__bobthefish_git_ahead)
19	1207	-----> __bobthefish_git_ahead
5	15	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
6	6	------> set -l behind 0
67	1138	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1071	1071	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	23	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
9	2779	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
64	1262	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1198	1198	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1501	-----> if [ "$show_untracked" != 'false' ]...
12	12	------> [ "$show_untracked" != 'false' ]
60	1471	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1411	1411	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	9	------> if [ "$new" ]...
5	5	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
6	6	----> set flags " $flags"
7	7	----> set -l flag_colors $color_repo
9	21	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
42	887	----> __bobthefish_path_segment $git_root_dir project
7	7	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
3	13	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
48	242	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
110	110	------> set_color normal
14	14	------> set_color -b $bg $fg $argv
28	35	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
4	4	-----> set -l parent
19	521	-----> switch "$segment_dir"...
40	414	------> set parent (__bobthefish_pretty_parent "$segment_dir")
25	374	-------> __bobthefish_pretty_parent "$segment_dir"
6	6	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
10	10	--------> set -l real_home ~
50	283	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
107	233	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
43	71	----------> __bobthefish_escape_regex "$real_home"
28	28	-----------> string escape --style=regex "$str" 2>/dev/null
25	55	----------> __bobthefish_dirname $child_dir
30	30	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	12	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	11	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
7	7	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
21	21	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
40	88	------> set directory (__bobthefish_basename "$segment_dir")
32	48	-------> __bobthefish_basename "$segment_dir"
16	16	--------> string replace -r '^.*/' '' -- $argv
13	13	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
23	125	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
32	56	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
48	3634	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3586	-----> __bobthefish_git_branch
56	1287	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1231	1231	-------> command git describe --tags --exact-match 2>/dev/null
63	1040	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
977	977	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
23	1244	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
69	1101	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1032	1032	--------> git config init.defaultBranch
17	17	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
83	83	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
3	3	-------> return
9	9	----> set_color normal
13	299	----> if [ "$theme_git_worktree_support" != 'yes' ]...
9	9	-----> [ "$theme_git_worktree_support" != 'yes' ]
43	267	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
25	224	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
56	164	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
58	108	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
31	50	---------> __bobthefish_escape_regex "$project_root_dir"
19	19	----------> string escape --style=regex "$str" 2>/dev/null
5	23	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
2	7	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
13	118	--> __bobthefish_finish_segments
18	49	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
11	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
8	8	----> set_color $fish_color_autosuggestion
6	15	----> if set -q theme_newline_prompt...
3	3	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
9	137	> fish_right_prompt
8	30	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
17	98	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
2	12	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
14	30	--> __bobthefish_cmd_duration
5	5	---> [ "$theme_display_cmd_duration" = "no" ]
8	8	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
9	17	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
6	6	--> set_color normal
15	628	> fish_title
10	22	-> __bobthefish_title_user
5	12	--> if [ "$theme_title_display_user" = 'yes' ]...
7	7	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	582	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
5	570	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
110	560	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
4	7	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
3	3	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
15	388	----> for path in $argv...
42	51	-----> set -l realhome (string escape --style=regex -- ~)
9	9	------> string escape --style=regex -- ~
41	63	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
22	22	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	259	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	178	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
39	152	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	113	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
72	72	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
42	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
41	170	> __fish_disable_bracketed_paste hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
129	129	-> printf "\e[?2004l"
13	30	> __fish_disable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
17	17	-> echo -n \e\[\?1004l
22	827	> fish_title hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
16	39	-> __bobthefish_title_user
5	23	--> if [ "$theme_title_display_user" = 'yes' ]...
18	18	---> [ "$theme_title_display_user" = 'yes' ]
4	14	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
8	752	-> if [ "$theme_title_display_path" != 'no' ]...
11	11	--> [ "$theme_title_display_path" != 'no' ]
9	733	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
45	717	---> prompt_pwd
16	16	----> set -l options h/help d/dir-length= D/full-length-dirs=
17	17	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
8	8	----> set argv $PWD
4	4	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
5	5	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
26	576	----> for path in $argv...
108	137	-----> set -l realhome (string escape --style=regex -- ~)
29	29	------> string escape --style=regex -- ~
72	111	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
39	39	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
14	302	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
14	14	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
14	179	------> if test $fish_prompt_pwd_full_dirs -gt 0...
8	8	-------> test $fish_prompt_pwd_full_dirs -gt 0
58	141	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
62	83	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
21	21	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
60	87	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
27	27	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
31058677	31058677	> hyperfine -w 5 -r 50 'fish -i -c exit'
39	156	> __fish_enable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
117	117	-> echo -n \e\[\?1004h
19	144	> __fish_enable_bracketed_paste
125	125	-> printf "\e[?2004h"
24	76	> fish_mode_prompt
16	16	-> [ "$theme_display_vi" != 'no' ]
32	32	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
26	23277	> fish_prompt
21	21	-> set -l last_status $status
4	9	-> if set -q CONDA_LEFT_PROMPT...
5	5	--> set -q CONDA_LEFT_PROMPT
12	18	-> return_last_status $last_status
6	6	--> return $argv
77	23203	-> __fish_prompt_orig
21	21	--> set -l last_status $status
3	12	--> if [ "$TERM" = 'dumb' ]...
9	9	---> [ "$TERM" = 'dumb' ]
136	565	--> __bobthefish_glyphs
11	11	---> set -x branch_glyph            \uE0A0
8	8	---> set -x right_black_arrow_glyph \uE0B0
7	7	---> set -x right_arrow_glyph       \uE0B1
4	4	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
6	6	---> set -x tag_glyph               \u2302
7	7	---> set -x nonzero_exit_glyph      '! '
7	7	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
6	6	---> set -x hg_glyph                \u263F
8	8	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
7	7	---> set -x ruby_glyph              ''
5	5	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
6	6	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
6	6	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
6	6	---> set -x git_dirty_glyph      '*'
8	8	---> set -x git_staged_glyph     '~'
8	8	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
5	5	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
5	5	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
6	6	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
3	18	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
15	15	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
50	169	---> if [ "$theme_nerd_fonts" = "yes" ]...
6	6	----> [ "$theme_nerd_fonts" = "yes" ]
5	5	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
5	5	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
5	5	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
5	5	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
5	5	----> set vagrant_poweroff_glyph \uF433
5	5	----> set vagrant_aborted_glyph  \uF468
5	5	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
5	5	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
3	3	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
5	5	----> set git_plus_minus_glyph \uF0DC
4	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
5	5	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
53	477	--> __bobthefish_colors $theme_color_scheme
161	424	---> switch "$color_scheme"...
7	7	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
4	4	----> set -l blue     48b4fb 005faf 255e87
5	5	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
7	7	----> set -l black    000000
4	4	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
9	9	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
9	9	----> set -x color_initial_segment_su       $white $green[2] --bold
8	8	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
7	7	----> set -x color_path                     $grey[3] $grey[2]
9	9	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
7	7	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
7	7	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
7	7	----> set -x color_repo_dirty               $red[2] $white
7	7	----> set -x color_repo_staged              $orange[1] $orange[3]
7	7	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
7	7	----> set -x color_k8s                      $green[2] $white --bold
7	7	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
7	7	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
7	7	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
6	6	----> set -x color_screen                   $green[1] $white --bold
7	7	----> set -x color_rvm                      $ruby_red $grey[1] --bold
15	15	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
6	6	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
239	239	--> type -q bobthefish_colors
5	5	--> set -l __bobthefish_current_bg
49	97	--> set -l real_pwd (__bobthefish_pwd)
26	48	---> __bobthefish_pwd
22	22	----> builtin pwd -P 2>/dev/null
27	183	--> __bobthefish_prompt_status $last_status
6	6	---> set -l nonzero
3	3	---> set -l superuser
4	4	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
20	109	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
6	85	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
73	73	-----> jobs -p >/dev/null
4	18	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
31	110	--> __bobthefish_prompt_user
29	29	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
13	13	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
3	6	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
3	7	---> if set -q display_hostname...
4	4	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
9	21	--> __bobthefish_prompt_screen
9	9	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
13	32	--> __bobthefish_prompt_vagrant
14	14	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
5	5	---> return
13	30	--> __bobthefish_prompt_docker
14	14	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
12	24	--> __bobthefish_prompt_k8s_context
9	9	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
11	24	--> __bobthefish_prompt_aws_vault_profile
9	9	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
4	4	---> return
11	22	--> __bobthefish_prompt_nix
8	8	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
9	19	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
15	410	--> __bobthefish_prompt_rubies
6	6	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
10	375	---> if command -q rvm-prompt...
91	91	----> command -q rvm-prompt
68	68	----> command -q rbenv
140	140	----> type -q chruby
66	66	----> command -q asdf
6	6	---> [ -z "$ruby_version" ]
3	3	---> return
16	543	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
7	7	---> set -l gomod_version "0"
6	6	---> set -l d $real_pwd
60	495	---> while not [ -z "$d" ]
...
4	4	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
48	113	----> set d (__bobthefish_dirname $d)
24	65	-----> __bobthefish_dirname $d
41	41	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	10	----> if [ -e $d/go.mod ]...
6	6	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
44	79	----> set d (__bobthefish_dirname $d)
21	35	-----> __bobthefish_dirname $d
14	14	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
41	74	----> set d (__bobthefish_dirname $d)
19	33	-----> __bobthefish_dirname $d
14	14	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
4	4	----> [ "$d" = "/" ]
49	79	----> set d (__bobthefish_dirname $d)
19	30	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
5	13	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
3	3	----> return
11	38	--> __bobthefish_prompt_virtualfish
13	13	---> command -q python
12	12	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
2	2	---> return
9	19	--> __bobthefish_prompt_virtualgo
7	7	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
10	800	--> __bobthefish_prompt_node
6	6	---> set -l should_show
35	776	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
8	8	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
4	4	----> [ "$theme_display_node" = 'yes' ]
22	729	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
15	15	-----> set -l dir "$argv[1]"
9	9	-----> set -l files $argv[2..-1]
6	15	-----> if test -z "$dir"...
4	4	------> test -z "$dir"
5	5	------> test -z "$files"
64	665	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
11	41	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
4	4	------> [ "$dir" = '/' ]
56	105	------> set dir (__bobthefish_dirname "$dir")
27	49	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	------> [ "$dir" ]
13	54	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
51	88	------> set dir (__bobthefish_dirname "$dir")
24	37	-------> __bobthefish_dirname "$dir"
13	13	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
10	40	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
9	9	------> [ "$dir" = '/' ]
58	97	------> set dir (__bobthefish_dirname "$dir")
22	39	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
12	46	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
45	76	------> set dir (__bobthefish_dirname "$dir")
20	31	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
3	3	-----> return 1
6	6	---> [ -z "$should_show" ]
2	2	---> return
48	2079	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2031	---> __bobthefish_git_project_dir $real_pwd
6	6	----> [ "$theme_display_git" = 'no' ]
60	60	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
14	1937	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
69	1877	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1808	1808	------> command git rev-parse --show-toplevel 2>/dev/null
10	10	-----> [ -z "$git_toplevel" ]
14	30	-----> switch $real_pwd/...
13	13	------> echo $git_toplevel
3	3	------> return
52	80	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
17	28	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
47	74	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
16	27	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
61	17069	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
32	348	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
118	316	----> if builtin -q path...
30	30	-----> builtin -q path
55	168	-----> echo (path sort -r $argv)[1]
113	113	------> path sort -r $argv
50	16660	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
54	3525	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
64	1645	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1581	1581	------> command git config --bool bash.showDirtyState 2>/dev/null
10	1818	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
77	1777	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1678	1678	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
22	22	-------> echo -n "$git_dirty_glyph"
4	21	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
17	17	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
75	1598	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1523	1523	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
74	1491	----> set -l stashed (__bobthefish_git_stashed)
13	1417	-----> __bobthefish_git_stashed
24	1404	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1370	1370	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
53	1557	----> set -l ahead (__bobthefish_git_ahead)
18	1504	-----> __bobthefish_git_ahead
4	15	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
11	11	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
7	7	------> set -l ahead 0
6	6	------> set -l behind 0
69	1432	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1363	1363	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	26	------> if [ $ahead -eq 1 ]...
14	14	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
12	2849	----> if [ "$theme_display_git_untracked" != 'no' ]...
8	8	-----> [ "$theme_display_git_untracked" != 'no' ]
57	1357	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1300	1300	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
8	1472	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
62	1444	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1382	1382	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
10	10	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
6	6	----> set flags " $flags"
10	10	----> set -l flag_colors $color_repo
5	17	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
39	930	----> __bobthefish_path_segment $git_root_dir project
10	10	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
3	13	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
36	212	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
94	94	------> set_color normal
14	14	------> set_color -b $bg $fg $argv
23	32	------> switch "$__bobthefish_current_bg"...
9	9	-------> echo -n ' '
9	9	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
5	5	-----> set -l parent
14	585	-----> switch "$segment_dir"...
54	471	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	417	-------> __bobthefish_pretty_parent "$segment_dir"
7	7	--------> set -q fish_prompt_pwd_dir_length
7	7	--------> set -l fish_prompt_pwd_dir_length 1
11	11	--------> set -l real_home ~
59	312	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
118	253	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
48	69	----------> __bobthefish_escape_regex "$real_home"
21	21	-----------> string escape --style=regex "$str" 2>/dev/null
31	66	----------> __bobthefish_dirname $child_dir
35	35	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	13	--------> if [ -z "$parent_dir" ]...
9	9	---------> [ -z "$parent_dir" ]
4	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
22	22	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
52	100	------> set directory (__bobthefish_basename "$segment_dir")
31	48	-------> __bobthefish_basename "$segment_dir"
17	17	--------> string replace -r '^.*/' '' -- $argv
15	15	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
10	10	-----> echo -n $parent
16	16	-----> set_color -b $segment_basename_color
10	10	-----> echo -ns $directory ' '
25	137	----> __bobthefish_start_segment $flag_colors
8	8	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
7	7	-----> set -l fg $argv[1]
6	6	-----> set -e argv[1]
9	9	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
29	56	-----> switch "$__bobthefish_current_bg"...
9	9	------> set_color $__bobthefish_current_bg
9	9	------> echo -ns $right_black_arrow_glyph ' '
9	9	------> set_color $fg $argv
8	8	-----> set __bobthefish_current_bg $bg
60	4155	----> echo -ns (__bobthefish_git_branch) $flags ' '
17	4095	-----> __bobthefish_git_branch
57	1473	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1416	1416	-------> command git describe --tags --exact-match 2>/dev/null
66	1277	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1211	1211	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
20	1328	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
61	1172	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1111	1111	--------> git config init.defaultBranch
17	17	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
97	97	-------> contains $branch $theme_git_default_branches
9	9	-------> echo $branch_glyph
4	4	-------> return
8	8	----> set_color normal
12	297	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
53	266	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
23	213	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
54	152	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
56	98	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
26	42	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
9	27	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
4	9	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
16	133	--> __bobthefish_finish_segments
22	54	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
9	9	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
12	52	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
6	18	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
5	5	---> set __bobthefish_current_bg
11	344	> fish_right_prompt
8	31	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	17	--> __conda_add_prompt
4	9	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	302	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
11	11	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
23	230	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
11	166	---> if [ "$CMD_DURATION" -lt 5000 ]...
6	6	----> [ "$CMD_DURATION" -lt 5000 ]
5	5	----> [ "$CMD_DURATION" -lt 60000 ]
18	144	----> __bobthefish_pretty_ms $CMD_DURATION s
5	5	-----> set -l interval_ms
4	4	-----> set -l scale 1
8	12	-----> switch $interval...
4	4	------> set interval_ms 1000
13	105	-----> switch $FISH_VERSION...
85	85	------> math -s$scale "$ms/$interval_ms"
7	7	------> echo -ns $interval
11	11	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
6	6	---> [ "$theme_display_date" = "no" ]
9	17	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
16	628	> fish_title
13	28	-> __bobthefish_title_user
4	15	--> if [ "$theme_title_display_user" = 'yes' ]...
11	11	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	575	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
6	562	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
110	551	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
12	12	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
5	5	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
18	371	----> for path in $argv...
45	55	-----> set -l realhome (string escape --style=regex -- ~)
10	10	------> string escape --style=regex -- ~
56	80	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
24	24	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	218	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	129	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
43	100	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
45	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
12	12	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
46	64	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
18	18	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
306	9432	> up-or-search
8738	8755	-> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/up-or-search.fish
17	17	--> function up-or-search -d "Search back or move cursor up 1 line"...
6	147	-> if commandline --search-mode...
141	141	--> commandline --search-mode
5	14	-> if commandline --paging-mode...
9	9	--> commandline --paging-mode
166	185	-> set -l lineno (commandline -L)
19	19	--> commandline -L
12	25	-> switch $lineno...
13	13	--> commandline -f history-search-backward
39	92	> up-or-search
16	53	-> if commandline --search-mode...
22	22	--> commandline --search-mode
12	12	--> commandline -f history-search-backward
3	3	--> return
39	94	> up-or-search
20	55	-> if commandline --search-mode...
21	21	--> commandline --search-mode
11	11	--> commandline -f history-search-backward
3	3	--> return
50	191	> __fish_disable_bracketed_paste 'nvim config.fish'
141	141	-> printf "\e[?2004l"
11	113	> __fish_disable_focus 'nvim config.fish'
102	102	-> echo -n \e\[\?1004l
24	964	> fish_title nvim\ config.fish
15	38	-> __bobthefish_title_user
6	23	--> if [ "$theme_title_display_user" = 'yes' ]...
17	17	---> [ "$theme_title_display_user" = 'yes' ]
4	13	-> if [ "$theme_title_display_process" = 'yes' ]...
9	9	--> [ "$theme_title_display_process" = 'yes' ]
6	889	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
6	874	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
8	8	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
130	860	---> prompt_pwd
14	14	----> set -l options h/help d/dir-length= D/full-length-dirs=
20	20	----> argparse -n prompt_pwd $options -- $argv
4	12	----> if set -q _flag_help...
8	8	-----> set -q _flag_help
6	6	----> set -q argv[1]
8	8	----> set argv $PWD
5	5	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
10	10	----> set -l fish_prompt_pwd_dir_length 1
12	12	----> set -l fulldirs 0
5	5	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
7	7	----> set -l fish_prompt_pwd_full_dirs 1
25	620	----> for path in $argv...
95	113	-----> set -l realhome (string escape --style=regex -- ~)
18	18	------> string escape --style=regex -- ~
71	104	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
33	33	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	378	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
14	14	------> test "$fish_prompt_pwd_dir_length" -eq 0
7	7	------> set -l full
13	259	------> if test $fish_prompt_pwd_full_dirs -gt 0...
8	8	-------> test $fish_prompt_pwd_full_dirs -gt 0
57	223	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
62	166	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
104	104	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
61	87	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
26	26	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
65490561	65490561	> nvim config.fish
45	174	> __fish_enable_focus 'nvim config.fish'
129	129	-> echo -n \e\[\?1004h
16	101	> __fish_enable_bracketed_paste
85	85	-> printf "\e[?2004h"
23	78	> fish_mode_prompt
15	15	-> [ "$theme_display_vi" != 'no' ]
36	36	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
20	21847	> fish_prompt
19	19	-> set -l last_status $status
5	11	-> if set -q CONDA_LEFT_PROMPT...
6	6	--> set -q CONDA_LEFT_PROMPT
14	22	-> return_last_status $last_status
8	8	--> return $argv
71	21775	-> __fish_prompt_orig
10	10	--> set -l last_status $status
3	15	--> if [ "$TERM" = 'dumb' ]...
12	12	---> [ "$TERM" = 'dumb' ]
152	601	--> __bobthefish_glyphs
12	12	---> set -x branch_glyph            \uE0A0
8	8	---> set -x right_black_arrow_glyph \uE0B0
6	6	---> set -x right_arrow_glyph       \uE0B1
7	7	---> set -x left_black_arrow_glyph  \uE0B2
7	7	---> set -x left_arrow_glyph        \uE0B3
14	14	---> set -x detached_glyph          \u27A6
6	6	---> set -x tag_glyph               \u2302
7	7	---> set -x nonzero_exit_glyph      '! '
8	8	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
10	10	---> set -x hg_glyph                \u263F
8	8	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
5	5	---> set -x virtualenv_glyph        \u25F0
6	6	---> set -x pypy_glyph              \u1D56
6	6	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
6	6	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
6	6	---> set -x vagrant_saved_glyph     \u21E1
5	5	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
8	8	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
6	6	---> set -x git_untracked_glyph  '…'
5	5	---> set -x git_ahead_glyph      \u2191
8	8	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
6	6	---> set -x git_minus_glyph      '-'
6	6	---> set -x git_plus_minus_glyph '±'
10	10	---> set -x fossil_glyph \U1F9B4
3	17	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
14	14	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
48	165	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
7	7	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
5	5	----> set tag_glyph        \uF412
4	4	----> set nix_glyph        \uF313 ' '
8	8	----> set virtualenv_glyph \uE73C ' '
4	4	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
6	6	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
4	4	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
6	6	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
49	436	--> __bobthefish_colors $theme_color_scheme
147	387	---> switch "$color_scheme"...
7	7	----> set -l red      cc9999 ce000f 660000
5	5	----> set -l green    addc10 189303 0c4801
5	5	----> set -l blue     48b4fb 005faf 255e87
5	5	----> set -l orange   f6b117 unused 3a2a03
4	4	----> set -l brown    bf5e00 803f00 4d2600
5	5	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
7	7	----> set -l black    000000
6	6	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
8	8	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
9	9	----> set -x color_initial_segment_su       $white $green[2] --bold
7	7	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
6	6	----> set -x color_path                     $grey[3] $grey[2]
6	6	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
6	6	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
7	7	----> set -x color_repo_work_tree           $grey[3] $white --bold
8	8	----> set -x color_repo_dirty               $red[2] $white
7	7	----> set -x color_repo_staged              $orange[1] $orange[3]
7	7	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
7	7	----> set -x color_vagrant                  $blue[1] $white --bold
6	6	----> set -x color_k8s                      $green[2] $white --bold
7	7	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
6	6	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
6	6	----> set -x color_screen                   $green[1] $white --bold
6	6	----> set -x color_rvm                      $ruby_red $grey[1] --bold
6	6	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
5	5	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
259	259	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
45	89	--> set -l real_pwd (__bobthefish_pwd)
23	44	---> __bobthefish_pwd
21	21	----> builtin pwd -P 2>/dev/null
28	176	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
4	4	---> set -l superuser
3	3	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
8	8	---> [ -w / -o -w /private/ ]
18	103	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
6	81	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
69	69	-----> jobs -p >/dev/null
3	18	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
15	15	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
23	103	--> __bobthefish_prompt_user
29	29	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
14	14	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	8	---> if set -q display_user...
4	4	----> set -q display_user
2	6	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	6	---> if set -q display_hostname...
3	3	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
10	21	--> __bobthefish_prompt_screen
8	8	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
9	18	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
9	19	--> __bobthefish_prompt_docker
7	7	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
8	16	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
8	16	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
8	17	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
2	2	---> return
8	17	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
16	378	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
4	4	---> set -l ruby_version
8	345	---> if command -q rvm-prompt...
69	69	----> command -q rvm-prompt
63	63	----> command -q rbenv
134	134	----> type -q chruby
71	71	----> command -q asdf
5	5	---> [ -z "$ruby_version" ]
3	3	---> return
18	512	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
6	6	---> set -l gomod_version "0"
4	4	---> set -l d $real_pwd
64	465	---> while not [ -z "$d" ]
...
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
46	106	----> set d (__bobthefish_dirname $d)
22	60	-----> __bobthefish_dirname $d
38	38	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	74	----> set d (__bobthefish_dirname $d)
20	31	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
4	10	----> if [ -e $d/go.mod ]...
6	6	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
40	68	----> set d (__bobthefish_dirname $d)
17	28	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	9	----> if [ -e $d/go.mod ]...
6	6	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
39	67	----> set d (__bobthefish_dirname $d)
17	28	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
5	13	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
3	3	----> return
13	38	--> __bobthefish_prompt_virtualfish
12	12	---> command -q python
10	10	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
9	18	--> __bobthefish_prompt_virtualgo
7	7	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
2	2	---> return
11	690	--> __bobthefish_prompt_node
5	5	---> set -l should_show
34	667	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
8	8	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
5	5	----> [ "$theme_display_node" = 'yes' ]
20	620	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
7	7	-----> set -l files $argv[2..-1]
5	15	-----> if test -z "$dir"...
6	6	------> test -z "$dir"
4	4	------> test -z "$files"
61	567	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
11	42	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
41	75	------> set dir (__bobthefish_dirname "$dir")
19	34	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	42	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
41	88	------> set dir (__bobthefish_dirname "$dir")
20	47	-------> __bobthefish_dirname "$dir"
27	27	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
10	41	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
39	68	------> set dir (__bobthefish_dirname "$dir")
18	29	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
11	39	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	8	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
39	67	------> set dir (__bobthefish_dirname "$dir")
17	28	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
4	4	-----> return 1
5	5	---> [ -z "$should_show" ]
2	2	---> return
70	1709	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
19	1639	---> __bobthefish_git_project_dir $real_pwd
6	6	----> [ "$theme_display_git" = 'no' ]
55	55	----> command -q git
4	4	----> set -q theme_vcs_ignore_paths
18	1555	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
51	1503	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1452	1452	------> command git rev-parse --show-toplevel 2>/dev/null
7	7	-----> [ -z "$git_toplevel" ]
9	21	-----> switch $real_pwd/...
9	9	------> echo $git_toplevel
3	3	------> return
42	64	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
13	22	---> __bobthefish_hg_project_dir $real_pwd
6	6	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
38	58	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
11	20	---> __bobthefish_fossil_project_dir $real_pwd
6	6	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
48	16297	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
13	209	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
39	196	----> if builtin -q path...
14	14	-----> builtin -q path
54	143	-----> echo (path sort -r $argv)[1]
89	89	------> path sort -r $argv
46	16040	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
45	2583	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
56	1093	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1037	1037	------> command git config --bool bash.showDirtyState 2>/dev/null
8	1437	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
69	1405	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1320	1320	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
16	16	-------> echo -n "$git_dirty_glyph"
4	15	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
65	1661	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1596	1596	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
60	1694	----> set -l stashed (__bobthefish_git_stashed)
15	1634	-----> __bobthefish_git_stashed
48	1619	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
11	11	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1560	1560	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
44	1749	----> set -l ahead (__bobthefish_git_ahead)
21	1705	-----> __bobthefish_git_ahead
3	13	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
8	8	------> set -l ahead 0
6	6	------> set -l behind 0
73	1635	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1562	1562	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	22	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
9	2948	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
52	1498	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1446	1446	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
8	1434	-----> if [ "$show_untracked" != 'false' ]...
7	7	------> [ "$show_untracked" != 'false' ]
54	1409	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1355	1355	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
8	8	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
7	17	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
34	835	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
3	12	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
35	199	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
5	5	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
87	87	------> set_color normal
14	14	------> set_color -b $bg $fg $argv
21	29	------> switch "$__bobthefish_current_bg"...
8	8	-------> echo -n ' '
10	10	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
6	6	-----> set -l parent
16	515	-----> switch "$segment_dir"...
48	411	------> set parent (__bobthefish_pretty_parent "$segment_dir")
30	363	-------> __bobthefish_pretty_parent "$segment_dir"
7	7	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
9	9	--------> set -l real_home ~
53	268	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
98	215	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
40	63	----------> __bobthefish_escape_regex "$real_home"
23	23	-----------> string escape --style=regex "$str" 2>/dev/null
25	54	----------> __bobthefish_dirname $child_dir
29	29	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	12	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
4	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
19	19	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	88	------> set directory (__bobthefish_basename "$segment_dir")
27	42	-------> __bobthefish_basename "$segment_dir"
15	15	--------> string replace -r '^.*/' '' -- $argv
13	13	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
33	134	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
7	7	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
24	51	-----> switch "$__bobthefish_current_bg"...
9	9	------> set_color $__bobthefish_current_bg
9	9	------> echo -ns $right_black_arrow_glyph ' '
9	9	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
56	4021	----> echo -ns (__bobthefish_git_branch) $flags ' '
16	3965	-----> __bobthefish_git_branch
52	1323	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1271	1271	-------> command git describe --tags --exact-match 2>/dev/null
56	1177	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1121	1121	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
20	1449	------> begin...
7	7	-------> [ -n "$theme_git_default_branches" ]
49	1272	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1223	1223	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
124	124	-------> contains $branch $theme_git_default_branches
10	10	-------> echo $branch_glyph
4	4	-------> return
9	9	----> set_color normal
13	301	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
48	269	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
23	221	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
57	160	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
56	103	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
29	47	---------> __bobthefish_escape_regex "$project_root_dir"
18	18	----------> string escape --style=regex "$str" 2>/dev/null
10	26	-------> if [ $theme_project_dir_length -eq 0 ]...
6	6	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
14	121	--> __bobthefish_finish_segments
18	49	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
9	48	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
6	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
4	4	---> set __bobthefish_current_bg
9	332	> fish_right_prompt
7	29	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
9	16	--> __conda_add_prompt
2	7	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
18	294	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
20	225	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
14	167	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
5	5	----> [ "$CMD_DURATION" -lt 60000 ]
5	5	----> [ "$CMD_DURATION" -lt 3600000 ]
9	9	----> set_color $fish_color_error
16	129	----> __bobthefish_pretty_ms $CMD_DURATION m
5	5	-----> set -l interval_ms
4	4	-----> set -l scale 1
8	12	-----> switch $interval...
4	4	------> set interval_ms 60000
11	92	-----> switch $FISH_VERSION...
74	74	------> math -s$scale "$ms/$interval_ms"
7	7	------> echo -ns $interval
9	9	---> set_color $fish_color_normal
7	7	---> set_color $fish_color_autosuggestion
6	6	---> [ "$theme_display_date" = "no" ]
8	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
6	6	--> set_color normal
17	566	> fish_title
12	27	-> __bobthefish_title_user
5	15	--> if [ "$theme_title_display_user" = 'yes' ]...
10	10	---> [ "$theme_title_display_user" = 'yes' ]
3	8	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
6	514	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
7	503	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
4	4	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
99	492	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
2	7	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
16	330	----> for path in $argv...
44	52	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
41	66	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
25	25	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	196	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	115	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
38	89	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
40	51	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
11	11	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
41	57	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
232	704	> up-or-search
14	160	-> if commandline --search-mode...
146	146	--> commandline --search-mode
4	14	-> if commandline --paging-mode...
10	10	--> commandline --paging-mode
236	262	-> set -l lineno (commandline -L)
26	26	--> commandline -L
21	36	-> switch $lineno...
15	15	--> commandline -f history-search-backward
42	115	> up-or-search
25	73	-> if commandline --search-mode...
25	25	--> commandline --search-mode
17	17	--> commandline -f history-search-backward
6	6	--> return
47	82	> __fish_disable_bracketed_paste hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
35	35	-> printf "\e[?2004l"
25	52	> __fish_disable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
27	27	-> echo -n \e\[\?1004l
26	897	> fish_title hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
17	44	-> __bobthefish_title_user
5	27	--> if [ "$theme_title_display_user" = 'yes' ]...
22	22	---> [ "$theme_title_display_user" = 'yes' ]
6	16	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
12	811	-> if [ "$theme_title_display_path" != 'no' ]...
13	13	--> [ "$theme_title_display_path" != 'no' ]
7	786	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
56	772	---> prompt_pwd
15	15	----> set -l options h/help d/dir-length= D/full-length-dirs=
19	19	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
8	8	----> set -l fish_prompt_pwd_full_dirs 1
30	619	----> for path in $argv...
87	106	-----> set -l realhome (string escape --style=regex -- ~)
19	19	------> string escape --style=regex -- ~
87	151	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
64	64	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
16	332	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
16	16	------> test "$fish_prompt_pwd_dir_length" -eq 0
10	10	------> set -l full
14	199	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
67	160	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
66	93	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
27	27	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
63	91	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
28	28	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
2879160	2879160	> hyperfine -w 5 -r 50 'fish -i -c exit'
40	83	> __fish_enable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
43	43	-> echo -n \e\[\?1004h
15	27	> __fish_enable_bracketed_paste
12	12	-> printf "\e[?2004h"
21	76	> fish_mode_prompt
17	17	-> [ "$theme_display_vi" != 'no' ]
35	35	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
3	3	-> return
23	23094	> fish_prompt
15	15	-> set -l last_status $status
4	9	-> if set -q CONDA_LEFT_PROMPT...
5	5	--> set -q CONDA_LEFT_PROMPT
12	18	-> return_last_status $last_status
6	6	--> return $argv
71	23029	-> __fish_prompt_orig
9	9	--> set -l last_status $status
3	14	--> if [ "$TERM" = 'dumb' ]...
11	11	---> [ "$TERM" = 'dumb' ]
130	570	--> __bobthefish_glyphs
9	9	---> set -x branch_glyph            \uE0A0
7	7	---> set -x right_black_arrow_glyph \uE0B0
5	5	---> set -x right_arrow_glyph       \uE0B1
5	5	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
6	6	---> set -x detached_glyph          \u27A6
5	5	---> set -x tag_glyph               \u2302
10	10	---> set -x nonzero_exit_glyph      '! '
9	9	---> set -x private_glyph           \uE0A2 ' '
7	7	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
6	6	---> set -x hg_glyph                \u263F
6	6	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
5	5	---> set -x virtualenv_glyph        \u25F0
5	5	---> set -x pypy_glyph              \u1D56
5	5	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
6	6	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
4	4	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
6	6	---> set -x git_dirty_glyph      '*'
8	8	---> set -x git_staged_glyph     '~'
6	6	---> set -x git_stashed_glyph    '$'
6	6	---> set -x git_untracked_glyph  '…'
5	5	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
8	8	---> set -x git_minus_glyph      '-'
6	6	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
4	20	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
16	16	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
50	183	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
8	8	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
5	5	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
6	6	----> set node_glyph       \uE718 ' '
4	4	----> set vagrant_running_glyph  \uF431
5	5	----> set vagrant_poweroff_glyph \uF433
5	5	----> set vagrant_aborted_glyph  \uF468
12	12	----> set vagrant_unknown_glyph  \uF421
7	7	----> set git_dirty_glyph      \uF448 ''
4	4	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
6	6	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
42	456	--> __bobthefish_colors $theme_color_scheme
149	414	---> switch "$color_scheme"...
7	7	----> set -l red      cc9999 ce000f 660000
6	6	----> set -l green    addc10 189303 0c4801
5	5	----> set -l blue     48b4fb 005faf 255e87
5	5	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
9	9	----> set -l black    000000
7	7	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
9	9	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
10	10	----> set -x color_initial_segment_su       $white $green[2] --bold
7	7	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
10	10	----> set -x color_path_basename            $grey[3] $white --bold
7	7	----> set -x color_path_nowrite             $red[3] $red[1]
8	8	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
7	7	----> set -x color_repo                     $green[1] $green[3]
6	6	----> set -x color_repo_work_tree           $grey[3] $white --bold
8	8	----> set -x color_repo_dirty               $red[2] $white
7	7	----> set -x color_repo_staged              $orange[1] $orange[3]
7	7	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
8	8	----> set -x color_vagrant                  $blue[1] $white --bold
7	7	----> set -x color_k8s                      $green[2] $white --bold
7	7	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
7	7	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
8	8	----> set -x color_hostname                 $grey[1] $blue[3]
10	10	----> set -x color_screen                   $green[1] $white --bold
7	7	----> set -x color_rvm                      $ruby_red $grey[1] --bold
6	6	----> set -x color_node                     $green[1] $white --bold
8	8	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
6	6	----> set -x color_virtualgo                $go_blue $black --bold
7	7	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
113	113	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
48	94	--> set -l real_pwd (__bobthefish_pwd)
25	46	---> __bobthefish_pwd
21	21	----> builtin pwd -P 2>/dev/null
26	128	--> __bobthefish_prompt_status $last_status
6	6	---> set -l nonzero
5	5	---> set -l superuser
3	3	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
20	55	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
6	31	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
12	12	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
13	13	-----> jobs -p >/dev/null
4	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
13	13	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
31	131	--> __bobthefish_prompt_user
30	30	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
16	16	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
3	6	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
6	20	---> if set -q display_hostname...
14	14	----> set -q display_hostname
5	5	---> set -q display_user
5	5	---> set -q display_sudo_user
3	3	---> set -q display_hostname
12	24	--> __bobthefish_prompt_screen
9	9	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
10	19	--> __bobthefish_prompt_vagrant
7	7	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
2	2	---> return
9	19	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
7	16	--> __bobthefish_prompt_k8s_context
6	6	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
9	17	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
9	19	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
9	18	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
17	384	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
12	344	---> if command -q rvm-prompt...
77	77	----> command -q rvm-prompt
70	70	----> command -q rbenv
93	93	----> type -q chruby
92	92	----> command -q asdf
9	9	---> [ -z "$ruby_version" ]
4	4	---> return
23	689	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
7	7	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
88	625	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
5	16	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
55	125	----> set d (__bobthefish_dirname $d)
33	70	-----> __bobthefish_dirname $d
37	37	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
49	91	----> set d (__bobthefish_dirname $d)
26	42	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	12	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
68	111	----> set d (__bobthefish_dirname $d)
26	43	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
2	11	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
51	91	----> set d (__bobthefish_dirname $d)
25	40	-----> __bobthefish_dirname $d
15	15	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
7	18	---> if [ "$gomod_version" = "0" ]...
8	8	----> [ "$gomod_version" = "0" ]
3	3	----> return
16	51	--> __bobthefish_prompt_virtualfish
16	16	---> command -q python
16	16	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
12	26	--> __bobthefish_prompt_virtualgo
12	12	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
2	2	---> return
16	940	--> __bobthefish_prompt_node
7	7	---> set -l should_show
65	909	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
14	14	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
25	823	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
10	10	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
6	20	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
7	7	------> test -z "$files"
95	752	-----> while [ "$dir" ]
...
6	6	------> [ "$dir" ]
16	58	------> for f in $files...
4	17	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
2	12	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
54	108	------> set dir (__bobthefish_dirname "$dir")
31	54	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
13	57	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
9	9	------> [ "$dir" = '/' ]
54	104	------> set dir (__bobthefish_dirname "$dir")
28	50	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
12	42	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	8	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
9	9	------> [ "$dir" = '/' ]
62	104	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	45	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
46	76	------> set dir (__bobthefish_dirname "$dir")
18	30	-------> __bobthefish_dirname "$dir"
12	12	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
5	5	-----> return 1
5	5	---> [ -z "$should_show" ]
3	3	---> return
51	2125	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
26	2074	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
71	71	----> command -q git
8	8	----> set -q theme_vcs_ignore_paths
17	1960	----> if [ "$theme_git_worktree_support" != 'yes' ]...
9	9	-----> [ "$theme_git_worktree_support" != 'yes' ]
71	1900	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1829	1829	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
11	25	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
48	74	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
15	26	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
41	66	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
15	25	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
50	16801	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	161	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
56	147	----> if builtin -q path...
23	23	-----> builtin -q path
46	68	-----> echo (path sort -r $argv)[1]
22	22	------> path sort -r $argv
52	16590	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
43	3529	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
50	1505	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1455	1455	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1974	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
60	1941	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1866	1866	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
3	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
58	1620	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1562	1562	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
55	1435	----> set -l stashed (__bobthefish_git_stashed)
14	1380	-----> __bobthefish_git_stashed
24	1366	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1334	1334	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
52	1508	----> set -l ahead (__bobthefish_git_ahead)
18	1456	-----> __bobthefish_git_ahead
5	17	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
12	12	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
8	8	------> set -l ahead 0
7	7	------> set -l behind 0
71	1382	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1311	1311	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
7	24	------> if [ $ahead -eq 1 ]...
11	11	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
9	2986	----> if [ "$theme_display_git_untracked" != 'no' ]...
6	6	-----> [ "$theme_display_git_untracked" != 'no' ]
58	1380	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1322	1322	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
12	1591	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
56	1559	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1503	1503	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
8	18	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
31	709	----> __bobthefish_path_segment $git_root_dir project
7	7	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
5	14	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
31	127	-----> __bobthefish_start_segment $segment_color
15	15	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
17	17	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
19	26	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
4	4	-----> set -l parent
13	469	-----> switch "$segment_dir"...
46	367	------> set parent (__bobthefish_pretty_parent "$segment_dir")
27	321	-------> __bobthefish_pretty_parent "$segment_dir"
5	5	--------> set -q fish_prompt_pwd_dir_length
7	7	--------> set -l fish_prompt_pwd_dir_length 1
9	9	--------> set -l real_home ~
51	237	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
94	186	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
30	48	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
23	44	----------> __bobthefish_dirname $child_dir
21	21	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	11	--------> if [ -z "$parent_dir" ]...
6	6	---------> [ -z "$parent_dir" ]
4	10	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
15	15	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	89	------> set directory (__bobthefish_basename "$segment_dir")
29	43	-------> __bobthefish_basename "$segment_dir"
14	14	--------> string replace -r '^.*/' '' -- $argv
12	12	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
14	14	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
24	114	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set_color normal
10	10	-----> set_color -b $bg $fg $argv
23	46	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
51	4217	----> echo -ns (__bobthefish_git_branch) $flags ' '
16	4166	-----> __bobthefish_git_branch
61	1379	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1318	1318	-------> command git describe --tags --exact-match 2>/dev/null
70	1370	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1300	1300	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
20	1401	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
68	1329	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1261	1261	--------> git config init.defaultBranch
17	17	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
14	14	-------> contains $branch $theme_git_default_branches
9	9	-------> echo $branch_glyph
3	3	-------> return
10	10	----> set_color normal
11	351	----> if [ "$theme_git_worktree_support" != 'yes' ]...
21	21	-----> [ "$theme_git_worktree_support" != 'yes' ]
53	305	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
25	252	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
61	183	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
65	122	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
37	57	---------> __bobthefish_escape_regex "$project_root_dir"
20	20	----------> string escape --style=regex "$str" 2>/dev/null
9	32	-------> if [ $theme_project_dir_length -eq 0 ]...
9	9	--------> [ $theme_project_dir_length -eq 0 ]
9	9	--------> echo -n $project_dir
5	5	--------> return
4	10	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
4	4	-----> return
17	149	--> __bobthefish_finish_segments
24	62	---> if [ -n "$__bobthefish_current_bg" ]...
8	8	----> [ -n "$__bobthefish_current_bg" ]
10	10	----> set_color normal
10	10	----> set_color $__bobthefish_current_bg
10	10	----> echo -ns $right_black_arrow_glyph ' '
11	57	---> if [ "$theme_newline_cursor" = 'yes' ]...
8	8	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
11	11	----> set_color $fish_color_autosuggestion
7	20	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
8	8	-----> echo -ens "$theme_newline_prompt"
7	7	---> set_color normal
6	6	---> set __bobthefish_current_bg
11	194	> fish_right_prompt
7	31	-> if not set -q CONDA_LEFT_PROMPT...
7	7	--> not set -q CONDA_LEFT_PROMPT
9	17	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
16	152	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	15	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
11	11	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
20	81	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
9	23	---> if [ "$CMD_DURATION" -lt 5000 ]...
6	6	----> [ "$CMD_DURATION" -lt 5000 ]
8	8	----> echo -ns $CMD_DURATION 'ms'
9	9	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
5	5	---> [ "$theme_display_date" = "no" ]
8	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
17	557	> fish_title
11	25	-> __bobthefish_title_user
4	14	--> if [ "$theme_title_display_user" = 'yes' ]...
10	10	---> [ "$theme_title_display_user" = 'yes' ]
5	11	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
6	504	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
7	492	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
40	480	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
4	8	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
7	7	----> set argv $PWD
3	3	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
18	374	----> for path in $argv...
45	68	-----> set -l realhome (string escape --style=regex -- ~)
23	23	------> string escape --style=regex -- ~
45	69	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
24	24	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	219	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	132	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
43	104	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
45	61	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
46	63	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
99	469	> __fish_winch_handler SIGWINCH
53	370	-> if test "$fish_handle_reflow" = 1 2>/dev/null...
96	96	--> test "$fish_handle_reflow" = 1 2>/dev/null
221	221	--> commandline -f repaint >/dev/null 2>/dev/null
31	94	> fish_mode_prompt
18	18	-> [ "$theme_display_vi" != 'no' ]
38	38	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
7	7	-> return
28	24699	> fish_prompt
25	25	-> set -l last_status $status
4	13	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
21	30	-> return_last_status $last_status
9	9	--> return $argv
114	24603	-> __fish_prompt_orig
9	9	--> set -l last_status $status
2	16	--> if [ "$TERM" = 'dumb' ]...
14	14	---> [ "$TERM" = 'dumb' ]
280	893	--> __bobthefish_glyphs
18	18	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
9	9	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
9	9	---> set -x detached_glyph          \u27A6
12	12	---> set -x tag_glyph               \u2302
14	14	---> set -x nonzero_exit_glyph      '! '
16	16	---> set -x private_glyph           \uE0A2 ' '
14	14	---> set -x superuser_glyph         '$ '
9	9	---> set -x bg_job_glyph            '% '
12	12	---> set -x hg_glyph                \u263F
13	13	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
9	9	---> set -x ruby_glyph              ''
9	9	---> set -x go_glyph                ''
9	9	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
9	9	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
8	8	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
9	9	---> set -x vagrant_saved_glyph     \u21E1
10	10	---> set -x vagrant_stopping_glyph  \u21E3
9	9	---> set -x vagrant_unknown_glyph   '!'
10	10	---> set -x git_dirty_glyph      '*'
11	11	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
11	11	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
8	8	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
10	10	---> set -x git_plus_minus_glyph '±'
8	8	---> set -x fossil_glyph \U1F9B4
5	26	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
21	21	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
62	221	---> if [ "$theme_nerd_fonts" = "yes" ]...
9	9	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
8	8	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
7	7	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
8	8	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
73	754	--> __bobthefish_colors $theme_color_scheme
323	681	---> switch "$color_scheme"...
9	9	----> set -l red      cc9999 ce000f 660000
8	8	----> set -l green    addc10 189303 0c4801
7	7	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
7	7	----> set -l brown    bf5e00 803f00 4d2600
6	6	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
6	6	----> set -l black    000000
8	8	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
14	14	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
12	12	----> set -x color_initial_segment_su       $white $green[2] --bold
11	11	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
10	10	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
12	12	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
9	9	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
11	11	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
10	10	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
10	10	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
10	10	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
10	10	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
20	20	----> set -x color_screen                   $green[1] $white --bold
11	11	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
10	10	----> set -x color_nix                      $blue[2] $grey[1] --bold
394	394	--> type -q bobthefish_colors
9	9	--> set -l __bobthefish_current_bg
82	156	--> set -l real_pwd (__bobthefish_pwd)
41	74	---> __bobthefish_pwd
33	33	----> builtin pwd -P 2>/dev/null
41	276	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
6	6	---> set -l bg_jobs
11	11	---> [ $last_status -ne 0 ]
14	14	---> [ -w / -o -w /private/ ]
27	157	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
8	124	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
107	107	-----> jobs -p >/dev/null
6	35	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
29	29	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
43	163	--> __bobthefish_prompt_user
51	51	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
12	12	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
20	20	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
4	9	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
3	3	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
15	29	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
14	25	--> __bobthefish_prompt_vagrant
8	8	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
13	26	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
13	28	--> __bobthefish_prompt_k8s_context
11	11	---> [ "$theme_display_k8s_context" = 'yes' ]
4	4	---> return
14	26	--> __bobthefish_prompt_aws_vault_profile
9	9	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
12	25	--> __bobthefish_prompt_nix
10	10	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
13	25	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
24	570	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
12	522	---> if command -q rvm-prompt...
123	123	----> command -q rvm-prompt
97	97	----> command -q rbenv
197	197	----> type -q chruby
93	93	----> command -q asdf
7	7	---> [ -z "$ruby_version" ]
3	3	---> return
25	789	--> __bobthefish_prompt_golang $real_pwd
9	9	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
100	722	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
70	138	----> set d (__bobthefish_dirname $d)
39	68	-----> __bobthefish_dirname $d
29	29	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	15	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
63	115	----> set d (__bobthefish_dirname $d)
29	52	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
71	114	----> set d (__bobthefish_dirname $d)
26	43	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
12	12	----> not [ -z "$d" ]
5	17	----> if [ -e $d/go.mod ]...
12	12	-----> [ -e $d/go.mod ]
9	9	----> [ "$d" = "/" ]
63	121	----> set d (__bobthefish_dirname $d)
35	58	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
6	18	---> if [ "$gomod_version" = "0" ]...
8	8	----> [ "$gomod_version" = "0" ]
4	4	----> return
15	56	--> __bobthefish_prompt_virtualfish
20	20	---> command -q python
18	18	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
11	26	--> __bobthefish_prompt_virtualgo
12	12	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
18	1005	--> __bobthefish_prompt_node
7	7	---> set -l should_show
62	970	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
25	889	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
10	10	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
6	19	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
105	820	-----> while [ "$dir" ]
...
6	6	------> [ "$dir" ]
15	61	------> for f in $files...
3	19	-------> if [ -e "$dir/$f" ]...
16	16	--------> [ -e "$dir/$f" ]
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
66	122	------> set dir (__bobthefish_dirname "$dir")
30	56	-------> __bobthefish_dirname "$dir"
26	26	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
16	57	------> for f in $files...
3	16	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
57	103	------> set dir (__bobthefish_dirname "$dir")
29	46	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	55	------> for f in $files...
5	16	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
55	103	------> set dir (__bobthefish_dirname "$dir")
27	48	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
16	53	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
2	11	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
9	9	------> [ "$dir" = '/' ]
55	97	------> set dir (__bobthefish_dirname "$dir")
27	42	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
4	4	-----> return 1
7	7	---> [ -z "$should_show" ]
3	3	---> return
62	2392	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2330	---> __bobthefish_git_project_dir $real_pwd
10	10	----> [ "$theme_display_git" = 'no' ]
86	86	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
22	2205	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
87	2048	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1961	1961	------> command git rev-parse --show-toplevel 2>/dev/null
11	11	-----> [ -z "$git_toplevel" ]
14	116	-----> switch $real_pwd/...
98	98	------> echo $git_toplevel
4	4	------> return
62	92	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	30	---> __bobthefish_hg_project_dir $real_pwd
10	10	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
54	82	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
17	28	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
63	16437	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
16	252	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
56	236	----> if builtin -q path...
22	22	-----> builtin -q path
57	158	-----> echo (path sort -r $argv)[1]
101	101	------> path sort -r $argv
53	16122	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
51	3131	----> if [ "$theme_display_git_dirty" != 'no' ]...
9	9	-----> [ "$theme_display_git_dirty" != 'no' ]
73	1484	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1411	1411	------> command git config --bool bash.showDirtyState 2>/dev/null
10	1587	-----> if [ "$show_dirty" != 'false' ]...
11	11	------> [ "$show_dirty" != 'false' ]
65	1552	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1473	1473	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
14	14	-------> echo -n "$git_dirty_glyph"
3	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
63	1479	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1416	1416	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
58	1247	----> set -l stashed (__bobthefish_git_stashed)
11	1189	-----> __bobthefish_git_stashed
22	1178	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1147	1147	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
49	1285	----> set -l ahead (__bobthefish_git_ahead)
19	1236	-----> __bobthefish_git_ahead
3	13	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
6	6	------> set -l behind 0
62	1171	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1109	1109	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	21	------> if [ $ahead -eq 1 ]...
10	10	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
8	2505	----> if [ "$theme_display_git_untracked" != 'no' ]...
6	6	-----> [ "$theme_display_git_untracked" != 'no' ]
61	1201	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1140	1140	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1290	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
67	1261	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1194	1194	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
2	9	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
4	4	----> set flags " $flags"
9	9	----> set -l flag_colors $color_repo
8	18	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
32	787	----> __bobthefish_path_segment $git_root_dir project
9	9	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
3	12	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
39	187	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
5	5	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
83	83	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
16	23	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
3	3	-----> set -l parent
12	492	-----> switch "$segment_dir"...
41	404	------> set parent (__bobthefish_pretty_parent "$segment_dir")
25	363	-------> __bobthefish_pretty_parent "$segment_dir"
6	6	--------> set -q fish_prompt_pwd_dir_length
5	5	--------> set -l fish_prompt_pwd_dir_length 1
10	10	--------> set -l real_home ~
53	281	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
97	228	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
49	75	----------> __bobthefish_escape_regex "$real_home"
26	26	-----------> string escape --style=regex "$str" 2>/dev/null
25	56	----------> __bobthefish_dirname $child_dir
31	31	-----------> string replace -r '/[^/]+/?$' '' -- $argv
2	10	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
3	9	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
17	17	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
39	76	------> set directory (__bobthefish_basename "$segment_dir")
25	37	-------> __bobthefish_basename "$segment_dir"
12	12	--------> string replace -r '^.*/' '' -- $argv
11	11	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
7	7	-----> echo -ns $directory ' '
24	111	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
4	4	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
7	7	-----> set_color normal
10	10	-----> set_color -b $bg $fg $argv
27	46	-----> switch "$__bobthefish_current_bg"...
6	6	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
6	6	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
52	5041	----> echo -ns (__bobthefish_git_branch) $flags ' '
18	4989	-----> __bobthefish_git_branch
64	1572	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1508	1508	-------> command git describe --tags --exact-match 2>/dev/null
80	1332	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1252	1252	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
28	2067	------> begin...
12	12	-------> [ -n "$theme_git_default_branches" ]
64	1878	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1814	1814	--------> git config init.defaultBranch
15	15	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
120	120	-------> contains $branch $theme_git_default_branches
10	10	-------> echo $branch_glyph
4	4	-------> return
12	12	----> set_color normal
16	412	----> if [ "$theme_git_worktree_support" != 'yes' ]...
10	10	-----> [ "$theme_git_worktree_support" != 'yes' ]
58	374	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
33	316	------> __bobthefish_project_pwd $git_root_dir $real_pwd
8	8	-------> set -q theme_project_dir_length
7	7	-------> set -l theme_project_dir_length 0
78	233	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
81	155	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
48	74	---------> __bobthefish_escape_regex "$project_root_dir"
26	26	----------> string escape --style=regex "$str" 2>/dev/null
10	35	-------> if [ $theme_project_dir_length -eq 0 ]...
11	11	--------> [ $theme_project_dir_length -eq 0 ]
10	10	--------> echo -n $project_dir
4	4	--------> return
3	9	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
3	3	-----> return
28	186	--> __bobthefish_finish_segments
40	81	---> if [ -n "$__bobthefish_current_bg" ]...
10	10	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
11	11	----> set_color $__bobthefish_current_bg
11	11	----> echo -ns $right_black_arrow_glyph ' '
13	62	---> if [ "$theme_newline_cursor" = 'yes' ]...
9	9	----> [ "$theme_newline_cursor" = 'yes' ]
8	8	----> echo -ens "\n"
11	11	----> set_color $fish_color_autosuggestion
6	21	----> if set -q theme_newline_prompt...
6	6	-----> set -q theme_newline_prompt
9	9	-----> echo -ens "$theme_newline_prompt"
7	7	---> set_color normal
8	8	---> set __bobthefish_current_bg
11	257	> fish_right_prompt
13	45	-> if not set -q CONDA_LEFT_PROMPT...
9	9	--> not set -q CONDA_LEFT_PROMPT
13	23	--> __conda_add_prompt
4	10	---> if set -q CONDA_PROMPT_MODIFIER...
6	6	----> set -q CONDA_PROMPT_MODIFIER
19	201	-> __fish_right_prompt_orig
10	10	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	22	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
18	18	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
12	12	--> set_color $fish_color_autosuggestion
28	101	--> __bobthefish_cmd_duration
8	8	---> [ "$theme_display_cmd_duration" = "no" ]
13	13	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
11	27	---> if [ "$CMD_DURATION" -lt 5000 ]...
7	7	----> [ "$CMD_DURATION" -lt 5000 ]
9	9	----> echo -ns $CMD_DURATION 'ms'
9	9	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
8	8	---> [ "$theme_display_date" = "no" ]
10	30	--> __bobthefish_timestamp
17	17	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
25	690	> fish_title
16	28	-> __bobthefish_title_user
3	12	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
2	9	-> if [ "$theme_title_display_process" = 'yes' ]...
7	7	--> [ "$theme_title_display_process" = 'yes' ]
6	628	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
4	613	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
105	602	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
4	8	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
4	4	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
17	432	----> for path in $argv...
44	53	-----> set -l realhome (string escape --style=regex -- ~)
9	9	------> string escape --style=regex -- ~
44	73	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
29	29	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	289	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	204	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
50	177	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
43	127	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
84	84	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
45	61	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	122	> __fish_winch_handler SIGWINCH
26	97	-> if test "$fish_handle_reflow" = 1 2>/dev/null...
39	39	--> test "$fish_handle_reflow" = 1 2>/dev/null
32	32	--> commandline -f repaint >/dev/null 2>/dev/null
28	76	> fish_mode_prompt
16	16	-> [ "$theme_display_vi" != 'no' ]
28	28	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
22	24762	> fish_prompt
18	18	-> set -l last_status $status
4	11	-> if set -q CONDA_LEFT_PROMPT...
7	7	--> set -q CONDA_LEFT_PROMPT
15	22	-> return_last_status $last_status
7	7	--> return $argv
88	24689	-> __fish_prompt_orig
24	24	--> set -l last_status $status
3	15	--> if [ "$TERM" = 'dumb' ]...
12	12	---> [ "$TERM" = 'dumb' ]
155	701	--> __bobthefish_glyphs
11	11	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
9	9	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
7	7	---> set -x nonzero_exit_glyph      '! '
9	9	---> set -x private_glyph           \uE0A2 ' '
9	9	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
7	7	---> set -x go_glyph                ''
8	8	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
7	7	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
9	9	---> set -x vagrant_saved_glyph     \u21E1
6	6	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
10	10	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
6	6	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
8	8	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
7	7	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
12	30	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
18	18	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
59	221	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
9	9	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
7	7	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
9	9	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
8	8	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
9	9	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
6	6	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
56	645	--> __bobthefish_colors $theme_color_scheme
245	589	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
6	6	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
6	6	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
8	8	----> set -l black    000000
6	6	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
26	26	----> set -x color_initial_segment_exit     $white $red[2] --bold
11	11	----> set -x color_initial_segment_private  $white $grey[3]
11	11	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
11	11	----> set -x color_path_basename            $grey[3] $white --bold
8	8	----> set -x color_path_nowrite             $red[3] $red[1]
12	12	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
9	9	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
10	10	----> set -x color_k8s                      $green[2] $white --bold
10	10	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
10	10	----> set -x color_node                     $green[1] $white --bold
8	8	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
8	8	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
11	11	----> set -x color_nix                      $blue[2] $grey[1] --bold
198	198	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
68	135	--> set -l real_pwd (__bobthefish_pwd)
33	67	---> __bobthefish_pwd
34	34	----> builtin pwd -P 2>/dev/null
35	177	--> __bobthefish_prompt_status $last_status
6	6	---> set -l nonzero
6	6	---> set -l superuser
6	6	---> set -l bg_jobs
12	12	---> [ $last_status -ne 0 ]
14	14	---> [ -w / -o -w /private/ ]
31	72	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
7	36	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
20	20	-----> jobs -p >/dev/null
4	26	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
22	22	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
45	148	--> __bobthefish_prompt_user
35	35	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
20	20	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	8	---> if set -q display_user...
5	5	----> set -q display_user
4	9	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
4	9	---> if set -q display_hostname...
5	5	----> set -q display_hostname
5	5	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
13	27	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
10	22	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
12	25	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
12	23	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
4	4	---> return
12	23	--> __bobthefish_prompt_aws_vault_profile
8	8	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
10	24	--> __bobthefish_prompt_nix
10	10	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
11	26	--> __bobthefish_prompt_desk
11	11	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
4	4	---> return
22	476	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
6	6	---> set -l ruby_version
12	431	---> if command -q rvm-prompt...
113	113	----> command -q rvm-prompt
97	97	----> command -q rbenv
114	114	----> type -q chruby
95	95	----> command -q asdf
7	7	---> [ -z "$ruby_version" ]
3	3	---> return
23	834	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
84	770	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
78	201	----> set d (__bobthefish_dirname $d)
48	123	-----> __bobthefish_dirname $d
75	75	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	32	----> if [ -e $d/go.mod ]...
28	28	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
63	121	----> set d (__bobthefish_dirname $d)
36	58	-----> __bobthefish_dirname $d
22	22	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
5	15	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
59	102	----> set d (__bobthefish_dirname $d)
26	43	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	12	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
65	121	----> set d (__bobthefish_dirname $d)
34	56	-----> __bobthefish_dirname $d
22	22	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
21	70	--> __bobthefish_prompt_virtualfish
27	27	---> command -q python
18	18	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
4	4	---> return
12	26	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
17	964	--> __bobthefish_prompt_node
7	7	---> set -l should_show
49	931	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
26	864	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
8	8	-----> set -l dir "$argv[1]"
9	9	-----> set -l files $argv[2..-1]
6	19	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
85	798	-----> while [ "$dir" ]
...
6	6	------> [ "$dir" ]
16	57	------> for f in $files...
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
66	119	------> set dir (__bobthefish_dirname "$dir")
28	53	-------> __bobthefish_dirname "$dir"
25	25	--------> string replace -r '/[^/]+/?$' '' -- $argv
13	13	------> [ "$dir" ]
14	55	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
69	116	------> set dir (__bobthefish_dirname "$dir")
28	47	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	54	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
54	101	------> set dir (__bobthefish_dirname "$dir")
26	47	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
12	51	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
53	92	------> set dir (__bobthefish_dirname "$dir")
24	39	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
63	2459	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2396	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
85	85	----> command -q git
7	7	----> set -q theme_vcs_ignore_paths
22	2272	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
81	2191	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2110	2110	------> command git rev-parse --show-toplevel 2>/dev/null
20	20	-----> [ -z "$git_toplevel" ]
14	31	-----> switch $real_pwd/...
13	13	------> echo $git_toplevel
4	4	------> return
59	88	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	29	---> __bobthefish_hg_project_dir $real_pwd
9	9	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
53	81	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
16	28	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
59	17247	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
19	174	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
58	155	----> if builtin -q path...
19	19	-----> builtin -q path
59	78	-----> echo (path sort -r $argv)[1]
19	19	------> path sort -r $argv
48	17014	---> __bobthefish_prompt_git $git_root_dir $real_pwd
10	10	----> set -l dirty ''
55	3895	----> if [ "$theme_display_git_dirty" != 'no' ]...
9	9	-----> [ "$theme_display_git_dirty" != 'no' ]
68	1710	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1642	1642	------> command git config --bool bash.showDirtyState 2>/dev/null
14	2121	-----> if [ "$show_dirty" != 'false' ]...
14	14	------> [ "$show_dirty" != 'false' ]
83	2074	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1970	1970	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
21	21	-------> echo -n "$git_dirty_glyph"
3	19	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
16	16	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
71	1672	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1601	1601	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
50	1425	----> set -l stashed (__bobthefish_git_stashed)
10	1375	-----> __bobthefish_git_stashed
22	1365	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1334	1334	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
52	1508	----> set -l ahead (__bobthefish_git_ahead)
15	1456	-----> __bobthefish_git_ahead
5	12	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
5	5	------> set -l behind 0
53	1398	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1345	1345	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	20	------> if [ $ahead -eq 1 ]...
10	10	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
8	2807	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
65	1206	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1141	1141	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
8	1586	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
60	1559	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1499	1499	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
10	10	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
7	7	----> set flags " $flags"
9	9	----> set -l flag_colors $color_repo
8	21	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
9	9	-----> set flag_colors $color_repo_dirty
36	853	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
4	14	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
43	167	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
20	20	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
29	29	------> set_color normal
15	15	------> set_color -b $bg $fg $argv
27	34	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
5	5	-----> set -l parent
14	563	-----> switch "$segment_dir"...
47	459	------> set parent (__bobthefish_pretty_parent "$segment_dir")
29	412	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
10	10	--------> set -l real_home ~
56	313	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
105	257	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
53	80	----------> __bobthefish_escape_regex "$real_home"
27	27	-----------> string escape --style=regex "$str" 2>/dev/null
26	72	----------> __bobthefish_dirname $child_dir
46	46	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	11	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
23	23	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
44	90	------> set directory (__bobthefish_basename "$segment_dir")
30	46	-------> __bobthefish_basename "$segment_dir"
16	16	--------> string replace -r '^.*/' '' -- $argv
15	15	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
16	16	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
20	123	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
31	55	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
54	4291	----> echo -ns (__bobthefish_git_branch) $flags ' '
13	4237	-----> __bobthefish_git_branch
57	1411	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1354	1354	-------> command git describe --tags --exact-match 2>/dev/null
71	1472	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1401	1401	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
16	1341	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
95	1284	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1189	1189	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
11	11	-------> contains $branch $theme_git_default_branches
6	6	-------> echo $branch_glyph
4	4	-------> return
8	8	----> set_color normal
12	317	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
50	286	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	236	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
7	7	-------> set -l theme_project_dir_length 0
64	174	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
69	110	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
26	41	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
9	30	-------> if [ $theme_project_dir_length -eq 0 ]...
9	9	--------> [ $theme_project_dir_length -eq 0 ]
9	9	--------> echo -n $project_dir
3	3	--------> return
5	10	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
17	136	--> __bobthefish_finish_segments
23	56	---> if [ -n "$__bobthefish_current_bg" ]...
7	7	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
9	9	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
12	52	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
6	18	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
6	6	---> set __bobthefish_current_bg
9	195	> fish_right_prompt
8	29	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
6	15	--> __conda_add_prompt
3	9	---> if set -q CONDA_PROMPT_MODIFIER...
6	6	----> set -q CONDA_PROMPT_MODIFIER
19	157	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
5	17	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
18	81	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
11	11	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
7	22	---> if [ "$CMD_DURATION" -lt 5000 ]...
7	7	----> [ "$CMD_DURATION" -lt 5000 ]
8	8	----> echo -ns $CMD_DURATION 'ms'
8	8	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
7	7	---> [ "$theme_display_date" = "no" ]
10	17	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
6	6	--> set_color normal
15	556	> fish_title
12	34	-> __bobthefish_title_user
5	22	--> if [ "$theme_title_display_user" = 'yes' ]...
17	17	---> [ "$theme_title_display_user" = 'yes' ]
4	11	-> if [ "$theme_title_display_process" = 'yes' ]...
7	7	--> [ "$theme_title_display_process" = 'yes' ]
7	496	-> if [ "$theme_title_display_path" != 'no' ]...
7	7	--> [ "$theme_title_display_path" != 'no' ]
5	482	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
39	471	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
13	13	----> argparse -n prompt_pwd $options -- $argv
3	8	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
5	5	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
19	357	----> for path in $argv...
46	56	-----> set -l realhome (string escape --style=regex -- ~)
10	10	------> string escape --style=regex -- ~
46	75	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
29	29	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	207	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	124	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	97	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
42	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
53	205	> __fish_winch_handler SIGWINCH
50	152	-> if test "$fish_handle_reflow" = 1 2>/dev/null...
57	57	--> test "$fish_handle_reflow" = 1 2>/dev/null
45	45	--> commandline -f repaint >/dev/null 2>/dev/null
37	122	> fish_mode_prompt
24	24	-> [ "$theme_display_vi" != 'no' ]
53	53	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
8	8	-> return
30	24034	> fish_prompt
32	32	-> set -l last_status $status
6	17	-> if set -q CONDA_LEFT_PROMPT...
11	11	--> set -q CONDA_LEFT_PROMPT
30	43	-> return_last_status $last_status
13	13	--> return $argv
88	23912	-> __fish_prompt_orig
16	16	--> set -l last_status $status
5	22	--> if [ "$TERM" = 'dumb' ]...
17	17	---> [ "$TERM" = 'dumb' ]
224	837	--> __bobthefish_glyphs
32	32	---> set -x branch_glyph            \uE0A0
13	13	---> set -x right_black_arrow_glyph \uE0B0
13	13	---> set -x right_arrow_glyph       \uE0B1
11	11	---> set -x left_black_arrow_glyph  \uE0B2
15	15	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
11	11	---> set -x tag_glyph               \u2302
10	10	---> set -x nonzero_exit_glyph      '! '
11	11	---> set -x private_glyph           \uE0A2 ' '
12	12	---> set -x superuser_glyph         '$ '
8	8	---> set -x bg_job_glyph            '% '
11	11	---> set -x hg_glyph                \u263F
13	13	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
9	9	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
7	7	---> set -x desk_glyph              \u25F2
9	9	---> set -x k8s_glyph               \u2388
10	10	---> set -x vagrant_running_glyph   \u2191
8	8	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
8	8	---> set -x vagrant_saved_glyph     \u21E1
9	9	---> set -x vagrant_stopping_glyph  \u21E3
8	8	---> set -x vagrant_unknown_glyph   '!'
11	11	---> set -x git_dirty_glyph      '*'
10	10	---> set -x git_staged_glyph     '~'
6	6	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
6	6	---> set -x git_ahead_glyph      \u2191
8	8	---> set -x git_behind_glyph     \u2193
8	8	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
4	27	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
23	23	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
58	223	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
9	9	----> set private_glyph    \uF023 ' '
8	8	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
7	7	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
8	8	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
8	8	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
4	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
65	860	--> __bobthefish_colors $theme_color_scheme
427	795	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
8	8	----> set -l green    addc10 189303 0c4801
7	7	----> set -l blue     48b4fb 005faf 255e87
6	6	----> set -l orange   f6b117 unused 3a2a03
7	7	----> set -l brown    bf5e00 803f00 4d2600
6	6	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
8	8	----> set -l black    000000
6	6	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
14	14	----> set -x color_initial_segment_exit     $white $red[2] --bold
11	11	----> set -x color_initial_segment_private  $white $grey[3]
12	12	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
10	10	----> set -x color_path                     $grey[3] $grey[2]
9	9	----> set -x color_path_basename            $grey[3] $white --bold
8	8	----> set -x color_path_nowrite             $red[3] $red[1]
11	11	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
11	11	----> set -x color_repo_work_tree           $grey[3] $white --bold
15	15	----> set -x color_repo_dirty               $red[2] $white
19	19	----> set -x color_repo_staged              $orange[1] $orange[3]
11	11	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
23	23	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
8	8	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
10	10	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
12	12	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
201	201	--> type -q bobthefish_colors
8	8	--> set -l __bobthefish_current_bg
78	164	--> set -l real_pwd (__bobthefish_pwd)
51	86	---> __bobthefish_pwd
35	35	----> builtin pwd -P 2>/dev/null
41	183	--> __bobthefish_prompt_status $last_status
6	6	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
12	12	---> [ $last_status -ne 0 ]
14	14	---> [ -w / -o -w /private/ ]
29	70	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
8	36	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
20	20	-----> jobs -p >/dev/null
4	30	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
26	26	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
39	146	--> __bobthefish_prompt_user
38	38	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
20	20	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	9	---> if set -q display_user...
6	6	----> set -q display_user
4	9	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
4	4	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
12	27	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
10	22	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
13	24	--> __bobthefish_prompt_docker
9	9	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
13	23	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
12	25	--> __bobthefish_prompt_aws_vault_profile
10	10	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
12	27	--> __bobthefish_prompt_nix
13	13	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
2	2	---> return
11	25	--> __bobthefish_prompt_desk
10	10	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
4	4	---> return
32	613	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
6	6	---> set -l ruby_version
17	551	---> if command -q rvm-prompt...
111	111	----> command -q rvm-prompt
115	115	----> command -q rbenv
179	179	----> type -q chruby
129	129	----> command -q asdf
12	12	---> [ -z "$ruby_version" ]
5	5	---> return
34	974	--> __bobthefish_prompt_golang $real_pwd
12	12	---> [ "$theme_display_go" = 'no' ]
13	13	---> set -l gomod_version "0"
13	13	---> set -l d $real_pwd
121	882	---> while not [ -z "$d" ]
...
10	10	----> not [ -z "$d" ]
5	20	----> if [ -e $d/go.mod ]...
15	15	-----> [ -e $d/go.mod ]
10	10	----> [ "$d" = "/" ]
81	185	----> set d (__bobthefish_dirname $d)
52	104	-----> __bobthefish_dirname $d
52	52	------> string replace -r '/[^/]+/?$' '' -- $argv
11	11	----> not [ -z "$d" ]
5	19	----> if [ -e $d/go.mod ]...
14	14	-----> [ -e $d/go.mod ]
10	10	----> [ "$d" = "/" ]
72	132	----> set d (__bobthefish_dirname $d)
37	60	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	17	----> if [ -e $d/go.mod ]...
13	13	-----> [ -e $d/go.mod ]
11	11	----> [ "$d" = "/" ]
70	130	----> set d (__bobthefish_dirname $d)
36	60	-----> __bobthefish_dirname $d
24	24	------> string replace -r '/[^/]+/?$' '' -- $argv
12	12	----> not [ -z "$d" ]
5	17	----> if [ -e $d/go.mod ]...
12	12	-----> [ -e $d/go.mod ]
10	10	----> [ "$d" = "/" ]
87	147	----> set d (__bobthefish_dirname $d)
38	60	-----> __bobthefish_dirname $d
22	22	------> string replace -r '/[^/]+/?$' '' -- $argv
11	11	----> not [ -z "$d" ]
5	20	---> if [ "$gomod_version" = "0" ]...
11	11	----> [ "$gomod_version" = "0" ]
4	4	----> return
16	53	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
15	15	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
4	4	---> return
13	26	--> __bobthefish_prompt_virtualgo
10	10	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
18	1073	--> __bobthefish_prompt_node
8	8	---> set -l should_show
92	1038	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
20	20	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
10	10	----> [ "$theme_display_node" = 'yes' ]
30	916	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
11	11	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
6	21	-----> if test -z "$dir"...
8	8	------> test -z "$dir"
7	7	------> test -z "$files"
90	839	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
17	68	------> for f in $files...
4	17	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	19	-------> if [ -e "$dir/$f" ]...
15	15	--------> [ -e "$dir/$f" ]
10	10	------> [ "$dir" = '/' ]
65	121	------> set dir (__bobthefish_dirname "$dir")
33	56	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
17	65	------> for f in $files...
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	18	-------> if [ -e "$dir/$f" ]...
15	15	--------> [ -e "$dir/$f" ]
12	12	------> [ "$dir" = '/' ]
63	114	------> set dir (__bobthefish_dirname "$dir")
30	51	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	52	------> for f in $files...
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
2	11	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
67	116	------> set dir (__bobthefish_dirname "$dir")
29	49	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	50	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
53	96	------> set dir (__bobthefish_dirname "$dir")
24	43	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
68	2467	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
24	2399	---> __bobthefish_git_project_dir $real_pwd
10	10	----> [ "$theme_display_git" = 'no' ]
90	90	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
23	2270	----> if [ "$theme_git_worktree_support" != 'yes' ]...
9	9	-----> [ "$theme_git_worktree_support" != 'yes' ]
95	2186	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2091	2091	------> command git rev-parse --show-toplevel 2>/dev/null
14	14	-----> [ -z "$git_toplevel" ]
17	38	-----> switch $real_pwd/...
16	16	------> echo $git_toplevel
5	5	------> return
72	110	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
22	38	---> __bobthefish_hg_project_dir $real_pwd
12	12	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
73	106	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	33	---> __bobthefish_fossil_project_dir $real_pwd
10	10	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
65	15670	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
21	195	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
66	174	----> if builtin -q path...
23	23	-----> builtin -q path
64	85	-----> echo (path sort -r $argv)[1]
21	21	------> path sort -r $argv
56	15410	---> __bobthefish_prompt_git $git_root_dir $real_pwd
11	11	----> set -l dirty ''
62	3192	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
74	1456	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1382	1382	------> command git config --bool bash.showDirtyState 2>/dev/null
12	1664	-----> if [ "$show_dirty" != 'false' ]...
14	14	------> [ "$show_dirty" != 'false' ]
67	1625	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1544	1544	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
14	14	-------> echo -n "$git_dirty_glyph"
3	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
63	1540	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1477	1477	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
51	1115	----> set -l stashed (__bobthefish_git_stashed)
11	1064	-----> __bobthefish_git_stashed
20	1053	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1023	1023	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
43	1312	----> set -l ahead (__bobthefish_git_ahead)
15	1269	-----> __bobthefish_git_ahead
3	11	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
6	6	------> set -l behind 0
55	1211	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1156	1156	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	21	------> if [ $ahead -eq 1 ]...
11	11	-------> [ $ahead -eq 1 ]
4	4	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
10	2590	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
58	1241	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1183	1183	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
11	1332	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
64	1302	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1238	1238	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
2	9	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
11	11	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
7	7	----> set flags " $flags"
11	11	----> set -l flag_colors $color_repo
19	35	----> if [ "$dirty" ]...
6	6	-----> [ "$dirty" ]
10	10	-----> set flag_colors $color_repo_dirty
52	978	----> __bobthefish_path_segment $git_root_dir project
12	12	-----> set -l segment_color $color_path
11	11	-----> set -l segment_basename_color $color_path_basename
4	14	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
54	172	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
29	29	------> set_color normal
17	17	------> set_color -b $bg $fg $argv
28	35	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
9	9	------> set __bobthefish_current_bg $bg
10	10	-----> set -l directory
7	7	-----> set -l parent
20	657	-----> switch "$segment_dir"...
52	533	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	481	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
15	15	--------> set -l real_home ~
57	371	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
116	314	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
63	97	----------> __bobthefish_escape_regex "$real_home"
34	34	-----------> string escape --style=regex "$str" 2>/dev/null
30	101	----------> __bobthefish_dirname $child_dir
71	71	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	11	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
25	25	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
47	104	------> set directory (__bobthefish_basename "$segment_dir")
39	57	-------> __bobthefish_basename "$segment_dir"
18	18	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
14	14	-----> set_color -b $segment_basename_color
7	7	-----> echo -ns $directory ' '
20	110	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
10	10	-----> set_color -b $bg $fg $argv
27	48	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
47	4150	----> echo -ns (__bobthefish_git_branch) $flags ' '
16	4103	-----> __bobthefish_git_branch
54	1601	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1547	1547	-------> command git describe --tags --exact-match 2>/dev/null
65	1341	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1276	1276	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1145	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
54	1087	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1033	1033	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
11	274	----> if [ "$theme_git_worktree_support" != 'yes' ]...
5	5	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	247	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
21	206	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
52	150	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
56	98	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
27	42	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
8	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
4	8	-----> if [ "$project_pwd" ]...
4	4	------> [ "$project_pwd" ]
3	3	-----> return
14	122	--> __bobthefish_finish_segments
21	51	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
11	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
8	8	----> set_color $fish_color_autosuggestion
6	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
5	5	---> set __bobthefish_current_bg
10	204	> fish_right_prompt
8	31	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
9	17	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	163	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	15	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
20	81	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
7	25	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
13	13	----> echo -ns $CMD_DURATION 'ms'
8	8	---> set_color $fish_color_normal
7	7	---> set_color $fish_color_autosuggestion
6	6	---> [ "$theme_display_date" = "no" ]
8	28	--> __bobthefish_timestamp
17	17	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
16	524	> fish_title
11	22	-> __bobthefish_title_user
3	11	--> if [ "$theme_title_display_user" = 'yes' ]...
8	8	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
6	477	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	465	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
36	454	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
17	354	----> for path in $argv...
46	54	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
43	71	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
28	28	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	212	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	124	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	98	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	58	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
17	17	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
4	4	-------> set full $all[2..]
42	60	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
18	18	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	119	> __fish_winch_handler SIGWINCH
26	94	-> if test "$fish_handle_reflow" = 1 2>/dev/null...
37	37	--> test "$fish_handle_reflow" = 1 2>/dev/null
31	31	--> commandline -f repaint >/dev/null 2>/dev/null
24	78	> fish_mode_prompt
19	19	-> [ "$theme_display_vi" != 'no' ]
30	30	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
21	24841	> fish_prompt
16	16	-> set -l last_status $status
4	10	-> if set -q CONDA_LEFT_PROMPT...
6	6	--> set -q CONDA_LEFT_PROMPT
15	21	-> return_last_status $last_status
6	6	--> return $argv
86	24773	-> __fish_prompt_orig
9	9	--> set -l last_status $status
3	13	--> if [ "$TERM" = 'dumb' ]...
10	10	---> [ "$TERM" = 'dumb' ]
199	732	--> __bobthefish_glyphs
23	23	---> set -x branch_glyph            \uE0A0
11	11	---> set -x right_black_arrow_glyph \uE0B0
9	9	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
8	8	---> set -x left_arrow_glyph        \uE0B3
6	6	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
8	8	---> set -x nonzero_exit_glyph      '! '
8	8	---> set -x private_glyph           \uE0A2 ' '
9	9	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
10	10	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
6	6	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
7	7	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
7	7	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
9	9	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
8	8	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
8	8	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
5	22	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
17	17	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
56	208	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
7	7	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
6	6	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
5	5	----> set vagrant_unknown_glyph  \uF421
7	7	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
6	6	----> set git_minus_glyph      \uF0DD
5	5	----> set git_plus_minus_glyph \uF0DC
4	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
58	607	--> __bobthefish_colors $theme_color_scheme
209	549	---> switch "$color_scheme"...
10	10	----> set -l red      cc9999 ce000f 660000
8	8	----> set -l green    addc10 189303 0c4801
7	7	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
5	5	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
7	7	----> set -l black    000000
5	5	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
13	13	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
12	12	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
10	10	----> set -x color_path                     $grey[3] $grey[2]
9	9	----> set -x color_path_basename            $grey[3] $white --bold
20	20	----> set -x color_path_nowrite             $red[3] $red[1]
11	11	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
8	8	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
8	8	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
10	10	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
161	161	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
66	131	--> set -l real_pwd (__bobthefish_pwd)
36	65	---> __bobthefish_pwd
29	29	----> builtin pwd -P 2>/dev/null
33	167	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
14	14	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
27	67	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
9	35	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
18	18	-----> jobs -p >/dev/null
3	23	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
20	20	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
29	131	--> __bobthefish_prompt_user
32	32	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
17	17	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
3	8	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
4	13	---> if set -q display_hostname...
9	9	----> set -q display_hostname
4	4	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
11	26	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
10	23	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
22	37	--> __bobthefish_prompt_docker
11	11	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
4	4	---> return
110	136	--> __bobthefish_prompt_k8s_context
21	21	---> [ "$theme_display_k8s_context" = 'yes' ]
5	5	---> return
15	30	--> __bobthefish_prompt_aws_vault_profile
11	11	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
4	4	---> return
15	32	--> __bobthefish_prompt_nix
14	14	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
11	28	--> __bobthefish_prompt_desk
13	13	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
4	4	---> return
25	600	--> __bobthefish_prompt_rubies
9	9	---> [ "$theme_display_ruby" = 'no' ]
10	10	---> set -l ruby_version
12	543	---> if command -q rvm-prompt...
140	140	----> command -q rvm-prompt
123	123	----> command -q rbenv
150	150	----> type -q chruby
118	118	----> command -q asdf
9	9	---> [ -z "$ruby_version" ]
4	4	---> return
26	769	--> __bobthefish_prompt_golang $real_pwd
9	9	---> [ "$theme_display_go" = 'no' ]
10	10	---> set -l gomod_version "0"
9	9	---> set -l d $real_pwd
91	697	---> while not [ -z "$d" ]
...
8	8	----> not [ -z "$d" ]
3	16	----> if [ -e $d/go.mod ]...
13	13	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
80	162	----> set d (__bobthefish_dirname $d)
45	82	-----> __bobthefish_dirname $d
37	37	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
62	115	----> set d (__bobthefish_dirname $d)
34	53	-----> __bobthefish_dirname $d
19	19	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
59	103	----> set d (__bobthefish_dirname $d)
28	44	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
5	14	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
57	98	----> set d (__bobthefish_dirname $d)
25	41	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
19	57	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
17	17	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
10	24	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
13	953	--> __bobthefish_prompt_node
8	8	---> set -l should_show
49	921	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
25	853	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
9	9	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
6	19	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
85	785	-----> while [ "$dir" ]
...
6	6	------> [ "$dir" ]
15	59	------> for f in $files...
4	18	-------> if [ -e "$dir/$f" ]...
14	14	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
60	123	------> set dir (__bobthefish_dirname "$dir")
40	63	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	------> [ "$dir" ]
15	56	------> for f in $files...
3	16	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
57	101	------> set dir (__bobthefish_dirname "$dir")
27	44	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	53	------> for f in $files...
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
54	97	------> set dir (__bobthefish_dirname "$dir")
27	43	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	52	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
53	95	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
5	5	-----> return 1
7	7	---> [ -z "$should_show" ]
4	4	---> return
61	2432	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2371	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
84	84	----> command -q git
7	7	----> set -q theme_vcs_ignore_paths
24	2248	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
68	2159	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2091	2091	------> command git rev-parse --show-toplevel 2>/dev/null
23	23	-----> [ -z "$git_toplevel" ]
14	35	-----> switch $real_pwd/...
16	16	------> echo $git_toplevel
5	5	------> return
75	112	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
21	37	---> __bobthefish_hg_project_dir $real_pwd
11	11	----> [ "$theme_display_hg" = 'yes' ]
5	5	----> return
71	105	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	34	---> __bobthefish_fossil_project_dir $real_pwd
10	10	----> [ "$theme_display_fossil" = 'yes' ]
5	5	----> return
75	17227	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
21	211	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
71	190	----> if builtin -q path...
23	23	-----> builtin -q path
75	96	-----> echo (path sort -r $argv)[1]
21	21	------> path sort -r $argv
50	16941	---> __bobthefish_prompt_git $git_root_dir $real_pwd
12	12	----> set -l dirty ''
68	3770	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
75	1610	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1535	1535	------> command git config --bool bash.showDirtyState 2>/dev/null
12	2082	-----> if [ "$show_dirty" != 'false' ]...
13	13	------> [ "$show_dirty" != 'false' ]
87	2037	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1926	1926	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
24	24	-------> echo -n "$git_dirty_glyph"
5	20	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
15	15	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
75	2068	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1993	1993	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
71	1587	----> set -l stashed (__bobthefish_git_stashed)
15	1516	-----> __bobthefish_git_stashed
44	1501	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
14	14	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1443	1443	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
52	1651	----> set -l ahead (__bobthefish_git_ahead)
22	1599	-----> __bobthefish_git_ahead
4	16	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
12	12	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
7	7	------> set -l ahead 0
17	17	------> set -l behind 0
75	1513	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1438	1438	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
7	24	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
10	2723	----> if [ "$theme_display_git_untracked" != 'no' ]...
8	8	-----> [ "$theme_display_git_untracked" != 'no' ]
53	1336	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1283	1283	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1369	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
54	1343	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1289	1289	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	9	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
7	7	----> set -l flag_colors $color_repo
6	17	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
29	663	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
4	13	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
34	109	-----> __bobthefish_start_segment $segment_color
7	7	------> set -l bg $argv[1]
5	5	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
14	14	------> set_color normal
11	11	------> set_color -b $bg $fg $argv
17	23	------> switch "$__bobthefish_current_bg"...
6	6	-------> echo -n ' '
5	5	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
5	5	-----> set -l parent
11	448	-----> switch "$segment_dir"...
41	359	------> set parent (__bobthefish_pretty_parent "$segment_dir")
25	318	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
7	7	--------> set -l real_home ~
48	230	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
88	182	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
33	49	----------> __bobthefish_escape_regex "$real_home"
16	16	-----------> string escape --style=regex "$str" 2>/dev/null
21	45	----------> __bobthefish_dirname $child_dir
24	24	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	10	--------> if [ -z "$parent_dir" ]...
6	6	---------> [ -z "$parent_dir" ]
3	9	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
23	23	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
40	78	------> set directory (__bobthefish_basename "$segment_dir")
25	38	-------> __bobthefish_basename "$segment_dir"
13	13	--------> string replace -r '^.*/' '' -- $argv
11	11	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
7	7	-----> echo -ns $directory ' '
22	105	----> __bobthefish_start_segment $flag_colors
5	5	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
7	7	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
20	42	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
46	3941	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3895	-----> __bobthefish_git_branch
55	1376	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1321	1321	-------> command git describe --tags --exact-match 2>/dev/null
58	1400	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1342	1342	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
18	1104	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
58	1037	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
979	979	--------> git config init.defaultBranch
16	16	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
13	13	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
4	4	-------> return
10	10	----> set_color normal
12	313	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
46	281	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
22	235	------> __bobthefish_project_pwd $git_root_dir $real_pwd
7	7	-------> set -q theme_project_dir_length
7	7	-------> set -l theme_project_dir_length 0
56	169	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
59	113	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
34	54	---------> __bobthefish_escape_regex "$project_root_dir"
20	20	----------> string escape --style=regex "$str" 2>/dev/null
10	30	-------> if [ $theme_project_dir_length -eq 0 ]...
9	9	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
4	10	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
3	3	-----> return
14	138	--> __bobthefish_finish_segments
25	59	---> if [ -n "$__bobthefish_current_bg" ]...
8	8	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
9	9	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
11	53	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
7	19	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
6	6	---> set __bobthefish_current_bg
12	215	> fish_right_prompt
8	33	-> if not set -q CONDA_LEFT_PROMPT...
7	7	--> not set -q CONDA_LEFT_PROMPT
9	18	--> __conda_add_prompt
3	9	---> if set -q CONDA_PROMPT_MODIFIER...
6	6	----> set -q CONDA_PROMPT_MODIFIER
20	170	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	16	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
20	90	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
12	12	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
12	26	---> if [ "$CMD_DURATION" -lt 5000 ]...
6	6	----> [ "$CMD_DURATION" -lt 5000 ]
8	8	----> echo -ns $CMD_DURATION 'ms'
9	9	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
8	8	---> [ "$theme_display_date" = "no" ]
10	19	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
16	510	> fish_title
12	24	-> __bobthefish_title_user
4	12	--> if [ "$theme_title_display_user" = 'yes' ]...
8	8	---> [ "$theme_title_display_user" = 'yes' ]
5	10	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
9	460	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
6	445	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
36	434	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
4	4	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
19	334	----> for path in $argv...
40	48	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
40	66	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
26	26	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	201	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	121	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
39	95	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	56	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
15	15	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
42	57	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
15	15	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
46	181	> __fish_disable_bracketed_paste 'eza --icons --color'
135	135	-> printf "\e[?2004l"
24	42	> __fish_disable_focus 'eza --icons --color'
18	18	-> echo -n \e\[\?1004l
42	917	> fish_title eza\ --icons\ --color
17	43	-> __bobthefish_title_user
6	26	--> if [ "$theme_title_display_user" = 'yes' ]...
20	20	---> [ "$theme_title_display_user" = 'yes' ]
5	24	-> if [ "$theme_title_display_process" = 'yes' ]...
19	19	--> [ "$theme_title_display_process" = 'yes' ]
10	808	-> if [ "$theme_title_display_path" != 'no' ]...
10	10	--> [ "$theme_title_display_path" != 'no' ]
7	788	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
48	774	---> prompt_pwd
15	15	----> set -l options h/help d/dir-length= D/full-length-dirs=
20	20	----> argparse -n prompt_pwd $options -- $argv
4	11	----> if set -q _flag_help...
7	7	-----> set -q _flag_help
7	7	----> set -q argv[1]
10	10	----> set argv $PWD
5	5	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
8	8	----> set -l fulldirs 0
5	5	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
7	7	----> set -l fish_prompt_pwd_full_dirs 1
24	617	----> for path in $argv...
98	119	-----> set -l realhome (string escape --style=regex -- ~)
21	21	------> string escape --style=regex -- ~
76	114	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
38	38	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
16	360	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
15	15	------> test "$fish_prompt_pwd_dir_length" -eq 0
9	9	------> set -l full
16	209	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
67	166	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
76	99	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
23	23	---------> math $fish_prompt_pwd_full_dirs - 1
10	10	-------> set tmp $all[1]
8	8	-------> set full $all[2..]
77	111	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
34	34	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
5898	5898	> eza --icons --color
43	110	> __fish_enable_focus 'eza --icons --color'
67	67	-> echo -n \e\[\?1004h
24	44	> __fish_enable_bracketed_paste
20	20	-> printf "\e[?2004h"
31	126	> fish_mode_prompt
38	38	-> [ "$theme_display_vi" != 'no' ]
53	53	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
25	22866	> fish_prompt
22	22	-> set -l last_status $status
4	12	-> if set -q CONDA_LEFT_PROMPT...
8	8	--> set -q CONDA_LEFT_PROMPT
17	25	-> return_last_status $last_status
8	8	--> return $argv
85	22782	-> __fish_prompt_orig
15	15	--> set -l last_status $status
3	21	--> if [ "$TERM" = 'dumb' ]...
18	18	---> [ "$TERM" = 'dumb' ]
172	746	--> __bobthefish_glyphs
11	11	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
8	8	---> set -x right_arrow_glyph       \uE0B1
7	7	---> set -x left_black_arrow_glyph  \uE0B2
8	8	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
7	7	---> set -x tag_glyph               \u2302
13	13	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
7	7	---> set -x superuser_glyph         '$ '
8	8	---> set -x bg_job_glyph            '% '
7	7	---> set -x hg_glyph                \u263F
12	12	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
12	12	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
7	7	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
9	9	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
12	12	---> set -x git_dirty_glyph      '*'
10	10	---> set -x git_staged_glyph     '~'
8	8	---> set -x git_stashed_glyph    '$'
9	9	---> set -x git_untracked_glyph  '…'
9	9	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
10	10	---> set -x git_minus_glyph      '-'
7	7	---> set -x git_plus_minus_glyph '±'
9	9	---> set -x fossil_glyph \U1F9B4
5	24	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
19	19	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
54	231	---> if [ "$theme_nerd_fonts" = "yes" ]...
8	8	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
9	9	----> set detached_glyph   \uF417
10	10	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
9	9	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
10	10	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
6	6	----> set git_minus_glyph      \uF0DD
10	10	----> set git_plus_minus_glyph \uF0DC
5	14	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
9	9	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
98	793	--> __bobthefish_colors $theme_color_scheme
276	695	---> switch "$color_scheme"...
16	16	----> set -l red      cc9999 ce000f 660000
9	9	----> set -l green    addc10 189303 0c4801
10	10	----> set -l blue     48b4fb 005faf 255e87
17	17	----> set -l orange   f6b117 unused 3a2a03
18	18	----> set -l brown    bf5e00 803f00 4d2600
11	11	----> set -l grey     cccccc 999999 333333
9	9	----> set -l white    ffffff
12	12	----> set -l black    000000
10	10	----> set -l ruby_red af0000
8	8	----> set -l go_blue  00d7d7
25	25	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
15	15	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
10	10	----> set -x color_path_basename            $grey[3] $white --bold
10	10	----> set -x color_path_nowrite             $red[3] $red[1]
12	12	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
15	15	----> set -x color_repo_work_tree           $grey[3] $white --bold
12	12	----> set -x color_repo_dirty               $red[2] $white
13	13	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
11	11	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
8	8	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
10	10	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
11	11	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
189	189	--> type -q bobthefish_colors
10	10	--> set -l __bobthefish_current_bg
86	162	--> set -l real_pwd (__bobthefish_pwd)
41	76	---> __bobthefish_pwd
35	35	----> builtin pwd -P 2>/dev/null
38	175	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
7	7	---> set -l superuser
6	6	---> set -l bg_jobs
11	11	---> [ $last_status -ne 0 ]
12	12	---> [ -w / -o -w /private/ ]
25	68	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
8	37	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
20	20	-----> jobs -p >/dev/null
5	26	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
21	21	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
34	158	--> __bobthefish_prompt_user
57	57	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
20	20	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
3	7	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
4	4	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
13	27	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
11	24	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
12	25	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
10	22	--> __bobthefish_prompt_k8s_context
9	9	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
11	22	--> __bobthefish_prompt_aws_vault_profile
8	8	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
10	24	--> __bobthefish_prompt_nix
10	10	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
10	22	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
27	482	--> __bobthefish_prompt_rubies
6	6	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
11	431	---> if command -q rvm-prompt...
108	108	----> command -q rvm-prompt
96	96	----> command -q rbenv
120	120	----> type -q chruby
96	96	----> command -q asdf
8	8	---> [ -z "$ruby_version" ]
3	3	---> return
22	739	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
83	676	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
65	139	----> set d (__bobthefish_dirname $d)
37	74	-----> __bobthefish_dirname $d
37	37	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
60	111	----> set d (__bobthefish_dirname $d)
29	51	-----> __bobthefish_dirname $d
22	22	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	14	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
71	116	----> set d (__bobthefish_dirname $d)
28	45	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
57	101	----> set d (__bobthefish_dirname $d)
27	44	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
7	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
4	4	----> return
16	57	--> __bobthefish_prompt_virtualfish
19	19	---> command -q python
19	19	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
10	25	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
4	4	---> return
15	935	--> __bobthefish_prompt_node
8	8	---> set -l should_show
48	902	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
23	835	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
9	9	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
7	20	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
86	768	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
14	60	------> for f in $files...
4	19	-------> if [ -e "$dir/$f" ]...
15	15	--------> [ -e "$dir/$f" ]
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
55	106	------> set dir (__bobthefish_dirname "$dir")
28	51	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	55	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
54	96	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	53	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
61	104	------> set dir (__bobthefish_dirname "$dir")
25	43	-------> __bobthefish_dirname "$dir"
18	18	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	53	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
5	13	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
54	94	------> set dir (__bobthefish_dirname "$dir")
25	40	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
4	4	-----> return 1
7	7	---> [ -z "$should_show" ]
3	3	---> return
52	2147	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
25	2095	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
81	81	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
18	1974	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
62	1914	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1852	1852	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
12	25	-----> switch $real_pwd/...
10	10	------> echo $git_toplevel
3	3	------> return
49	73	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
13	24	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
43	67	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
15	24	---> __bobthefish_fossil_project_dir $real_pwd
6	6	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
50	15616	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	154	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
52	140	----> if builtin -q path...
19	19	-----> builtin -q path
50	69	-----> echo (path sort -r $argv)[1]
19	19	------> path sort -r $argv
49	15412	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
47	2853	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
56	1218	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1162	1162	------> command git config --bool bash.showDirtyState 2>/dev/null
10	1580	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
60	1547	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1473	1473	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
14	14	-------> echo -n "$git_dirty_glyph"
3	15	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
12	12	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
65	1690	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1625	1625	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
64	1334	----> set -l stashed (__bobthefish_git_stashed)
13	1270	-----> __bobthefish_git_stashed
31	1257	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1217	1217	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
53	1738	----> set -l ahead (__bobthefish_git_ahead)
17	1685	-----> __bobthefish_git_ahead
4	14	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
6	6	------> set -l behind 0
71	1620	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1549	1549	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	22	------> if [ $ahead -eq 1 ]...
11	11	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
7	2711	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
54	1402	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1348	1348	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1295	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
75	1267	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1192	1192	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
5	15	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
34	681	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
7	7	-----> set -l segment_basename_color $color_path_basename
3	13	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
32	115	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
16	16	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
19	25	------> switch "$__bobthefish_current_bg"...
6	6	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
4	4	-----> set -l parent
10	457	-----> switch "$segment_dir"...
45	369	------> set parent (__bobthefish_pretty_parent "$segment_dir")
26	324	-------> __bobthefish_pretty_parent "$segment_dir"
6	6	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
8	8	--------> set -l real_home ~
47	241	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
93	194	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
34	52	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
21	49	----------> __bobthefish_dirname $child_dir
28	28	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	10	--------> if [ -z "$parent_dir" ]...
6	6	---------> [ -z "$parent_dir" ]
4	11	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
7	7	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
16	16	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
42	78	------> set directory (__bobthefish_basename "$segment_dir")
23	36	-------> __bobthefish_basename "$segment_dir"
13	13	--------> string replace -r '^.*/' '' -- $argv
10	10	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
22	107	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
21	43	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
45	3909	----> echo -ns (__bobthefish_git_branch) $flags ' '
13	3864	-----> __bobthefish_git_branch
46	1403	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1357	1357	-------> command git describe --tags --exact-match 2>/dev/null
60	1239	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1179	1179	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
16	1209	------> begin...
7	7	-------> [ -n "$theme_git_default_branches" ]
52	1153	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1101	1101	--------> git config init.defaultBranch
13	13	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
7	7	----> set_color normal
12	277	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
40	249	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	209	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
50	154	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
63	104	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
26	41	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
8	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
2	2	-----> return
14	121	--> __bobthefish_finish_segments
20	49	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	48	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
5	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
10	138	> fish_right_prompt
7	30	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	17	--> __conda_add_prompt
5	9	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
16	98	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
14	31	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
8	8	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
7	16	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
6	6	--> set_color normal
23	508	> fish_title
11	24	-> __bobthefish_title_user
4	13	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
4	9	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
9	452	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
4	438	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
38	428	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
5	5	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
4	4	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
17	329	----> for path in $argv...
40	48	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
40	63	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
23	23	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	201	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
9	120	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	95	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
40	55	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
15	15	---------> math $fish_prompt_pwd_full_dirs - 1
5	5	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
43	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
15	15	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
70	253	> __fish_disable_bracketed_paste 'nvim config.fish'
183	183	-> printf "\e[?2004l"
57	179	> __fish_disable_focus 'nvim config.fish'
122	122	-> echo -n \e\[\?1004l
26	1018	> fish_title nvim\ config.fish
20	44	-> __bobthefish_title_user
6	24	--> if [ "$theme_title_display_user" = 'yes' ]...
18	18	---> [ "$theme_title_display_user" = 'yes' ]
4	14	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
9	934	-> if [ "$theme_title_display_path" != 'no' ]...
8	8	--> [ "$theme_title_display_path" != 'no' ]
7	917	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
141	903	---> prompt_pwd
15	15	----> set -l options h/help d/dir-length= D/full-length-dirs=
19	19	----> argparse -n prompt_pwd $options -- $argv
4	11	----> if set -q _flag_help...
7	7	-----> set -q _flag_help
7	7	----> set -q argv[1]
8	8	----> set argv $PWD
4	4	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
6	6	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
25	661	----> for path in $argv...
87	107	-----> set -l realhome (string escape --style=regex -- ~)
20	20	------> string escape --style=regex -- ~
64	100	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
36	36	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
15	429	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
22	22	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
13	285	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
63	250	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
69	187	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
118	118	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
63	99	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
36	36	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
481212702	481212702	> nvim config.fish
56	213	> __fish_enable_focus 'nvim config.fish'
157	157	-> echo -n \e\[\?1004h
20	137	> __fish_enable_bracketed_paste
117	117	-> printf "\e[?2004h"
24	94	> fish_mode_prompt
22	22	-> [ "$theme_display_vi" != 'no' ]
44	44	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
18	20924	> fish_prompt
15	15	-> set -l last_status $status
3	8	-> if set -q CONDA_LEFT_PROMPT...
5	5	--> set -q CONDA_LEFT_PROMPT
12	22	-> return_last_status $last_status
10	10	--> return $argv
68	20861	-> __fish_prompt_orig
9	9	--> set -l last_status $status
4	14	--> if [ "$TERM" = 'dumb' ]...
10	10	---> [ "$TERM" = 'dumb' ]
136	536	--> __bobthefish_glyphs
10	10	---> set -x branch_glyph            \uE0A0
5	5	---> set -x right_black_arrow_glyph \uE0B0
5	5	---> set -x right_arrow_glyph       \uE0B1
5	5	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
5	5	---> set -x detached_glyph          \u27A6
5	5	---> set -x tag_glyph               \u2302
9	9	---> set -x nonzero_exit_glyph      '! '
7	7	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
6	6	---> set -x hg_glyph                \u263F
8	8	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
4	4	---> set -x virtualenv_glyph        \u25F0
5	5	---> set -x pypy_glyph              \u1D56
5	5	---> set -x ruby_glyph              ''
5	5	---> set -x go_glyph                ''
5	5	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
5	5	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
5	5	---> set -x vagrant_aborted_glyph   \u2715
4	4	---> set -x vagrant_saved_glyph     \u21E1
5	5	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
9	9	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
5	5	---> set -x git_stashed_glyph    '$'
5	5	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
8	8	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
5	5	---> set -x git_minus_glyph      '-'
9	9	---> set -x git_plus_minus_glyph '±'
4	4	---> set -x fossil_glyph \U1F9B4
2	21	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
19	19	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
42	153	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
4	4	----> set branch_glyph     \uF418
3	3	----> set detached_glyph   \uF417
7	7	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
6	6	----> set node_glyph       \uE718 ' '
3	3	----> set vagrant_running_glyph  \uF431
4	4	----> set vagrant_poweroff_glyph \uF433
3	3	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
4	4	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
3	3	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	8	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
5	5	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
48	489	--> __bobthefish_colors $theme_color_scheme
151	441	---> switch "$color_scheme"...
7	7	----> set -l red      cc9999 ce000f 660000
9	9	----> set -l green    addc10 189303 0c4801
4	4	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
9	9	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
7	7	----> set -l black    000000
9	9	----> set -l ruby_red af0000
7	7	----> set -l go_blue  00d7d7
9	9	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
10	10	----> set -x color_initial_segment_su       $white $green[2] --bold
6	6	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
6	6	----> set -x color_path                     $grey[3] $grey[2]
12	12	----> set -x color_path_basename            $grey[3] $white --bold
5	5	----> set -x color_path_nowrite             $red[3] $red[1]
7	7	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
9	9	----> set -x color_repo_work_tree           $grey[3] $white --bold
8	8	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
7	7	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
6	6	----> set -x color_vagrant                  $blue[1] $white --bold
13	13	----> set -x color_k8s                      $green[2] $white --bold
12	12	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
11	11	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
7	7	----> set -x color_screen                   $green[1] $white --bold
13	13	----> set -x color_rvm                      $ruby_red $grey[1] --bold
6	6	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
6	6	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
267	267	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
45	96	--> set -l real_pwd (__bobthefish_pwd)
29	51	---> __bobthefish_pwd
22	22	----> builtin pwd -P 2>/dev/null
28	175	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
3	3	---> set -l superuser
5	5	---> set -l bg_jobs
6	6	---> [ $last_status -ne 0 ]
8	8	---> [ -w / -o -w /private/ ]
19	103	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
5	80	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
5	5	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
70	70	-----> jobs -p >/dev/null
3	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
28	111	--> __bobthefish_prompt_user
30	30	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
14	14	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	7	---> if set -q display_user...
3	3	----> set -q display_user
3	7	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	7	---> if set -q display_hostname...
4	4	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
4	4	---> set -q display_hostname
11	22	--> __bobthefish_prompt_screen
8	8	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
11	20	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	19	--> __bobthefish_prompt_docker
7	7	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
8	14	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
1	1	---> return
9	18	--> __bobthefish_prompt_aws_vault_profile
7	7	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
9	19	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
8	16	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
1	1	---> return
16	409	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
10	375	---> if command -q rvm-prompt...
86	86	----> command -q rvm-prompt
64	64	----> command -q rbenv
152	152	----> type -q chruby
63	63	----> command -q asdf
6	6	---> [ -z "$ruby_version" ]
2	2	---> return
17	561	--> __bobthefish_prompt_golang $real_pwd
5	5	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
56	514	---> while not [ -z "$d" ]
...
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
46	118	----> set d (__bobthefish_dirname $d)
31	72	-----> __bobthefish_dirname $d
41	41	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	74	----> set d (__bobthefish_dirname $d)
18	31	-----> __bobthefish_dirname $d
13	13	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
51	79	----> set d (__bobthefish_dirname $d)
17	28	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
4	9	----> if [ -e $d/go.mod ]...
5	5	-----> [ -e $d/go.mod ]
9	9	----> [ "$d" = "/" ]
49	93	----> set d (__bobthefish_dirname $d)
24	44	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	15	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
4	4	----> return
11	42	--> __bobthefish_prompt_virtualfish
16	16	---> command -q python
12	12	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
8	18	--> __bobthefish_prompt_virtualgo
7	7	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
11	768	--> __bobthefish_prompt_node
5	5	---> set -l should_show
33	745	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
9	9	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
4	4	----> [ "$theme_display_node" = 'yes' ]
18	699	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
6	6	-----> set -l files $argv[2..-1]
6	28	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
17	17	------> test -z "$files"
61	637	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
11	41	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
45	95	------> set dir (__bobthefish_dirname "$dir")
30	50	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	51	------> for f in $files...
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
2	12	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
47	93	------> set dir (__bobthefish_dirname "$dir")
27	46	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
12	48	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
44	89	------> set dir (__bobthefish_dirname "$dir")
26	45	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
9	38	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
4	9	-------> if [ -e "$dir/$f" ]...
5	5	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
43	73	------> set dir (__bobthefish_dirname "$dir")
19	30	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
3	3	-----> return 1
5	5	---> [ -z "$should_show" ]
2	2	---> return
45	2540	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
20	2495	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
61	61	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
19	2402	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
67	2332	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2265	2265	------> command git rev-parse --show-toplevel 2>/dev/null
11	11	-----> [ -z "$git_toplevel" ]
20	34	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
51	81	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
18	30	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
45	73	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
17	28	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
53	14355	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
16	281	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
79	265	----> if builtin -q path...
25	25	-----> builtin -q path
49	161	-----> echo (path sort -r $argv)[1]
112	112	------> path sort -r $argv
53	14021	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
68	2836	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
68	1373	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1305	1305	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1387	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
57	1356	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1284	1284	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
4	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
57	1287	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1230	1230	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
45	1235	----> set -l stashed (__bobthefish_git_stashed)
10	1190	-----> __bobthefish_git_stashed
17	1180	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1155	1155	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
42	1219	----> set -l ahead (__bobthefish_git_ahead)
19	1177	-----> __bobthefish_git_ahead
4	11	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
4	4	------> set -l behind 0
63	1118	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1055	1055	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	20	------> if [ $ahead -eq 1 ]...
10	10	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
11	2589	----> if [ "$theme_display_git_untracked" != 'no' ]...
12	12	-----> [ "$theme_display_git_untracked" != 'no' ]
65	1308	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1243	1243	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1258	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
55	1229	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1174	1174	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
6	6	----> set -l flag_colors $color_repo
9	18	----> if [ "$dirty" ]...
3	3	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
32	752	----> __bobthefish_path_segment $git_root_dir project
7	7	-----> set -l segment_color $color_path
7	7	-----> set -l segment_basename_color $color_path_basename
3	12	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
41	196	-----> __bobthefish_start_segment $segment_color
6	6	------> set -l bg $argv[1]
5	5	------> set -e argv[1]
5	5	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
77	77	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
30	39	------> switch "$__bobthefish_current_bg"...
9	9	-------> echo -n ' '
7	7	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
3	3	-----> set -l parent
12	452	-----> switch "$segment_dir"...
44	364	------> set parent (__bobthefish_pretty_parent "$segment_dir")
25	320	-------> __bobthefish_pretty_parent "$segment_dir"
13	13	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
8	8	--------> set -l real_home ~
49	234	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
88	185	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
33	50	----------> __bobthefish_escape_regex "$real_home"
17	17	-----------> string escape --style=regex "$str" 2>/dev/null
25	47	----------> __bobthefish_dirname $child_dir
22	22	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	11	--------> if [ -z "$parent_dir" ]...
6	6	---------> [ -z "$parent_dir" ]
3	9	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
14	14	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
41	76	------> set directory (__bobthefish_basename "$segment_dir")
22	35	-------> __bobthefish_basename "$segment_dir"
13	13	--------> string replace -r '^.*/' '' -- $argv
11	11	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
7	7	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
21	105	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
21	43	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
44	3616	----> echo -ns (__bobthefish_git_branch) $flags ' '
14	3572	-----> __bobthefish_git_branch
55	1241	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1186	1186	-------> command git describe --tags --exact-match 2>/dev/null
62	1067	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1005	1005	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
15	1250	------> begin...
7	7	-------> [ -n "$theme_git_default_branches" ]
50	1137	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1087	1087	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
69	69	-------> contains $branch $theme_git_default_branches
6	6	-------> echo $branch_glyph
4	4	-------> return
7	7	----> set_color normal
12	267	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	239	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
19	198	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
49	144	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
55	95	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
26	40	---------> __bobthefish_escape_regex "$project_root_dir"
14	14	----------> string escape --style=regex "$str" 2>/dev/null
6	25	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
2	7	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
14	115	--> __bobthefish_finish_segments
18	45	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
7	7	----> set_color normal
7	7	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
5	5	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
5	15	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
10	387	> fish_right_prompt
7	25	-> if not set -q CONDA_LEFT_PROMPT...
4	4	--> not set -q CONDA_LEFT_PROMPT
6	14	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
15	352	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	12	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
9	9	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
7	7	--> set_color $fish_color_autosuggestion
28	284	--> __bobthefish_cmd_duration
5	5	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
12	190	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
5	5	----> [ "$CMD_DURATION" -lt 60000 ]
6	6	----> [ "$CMD_DURATION" -lt 3600000 ]
9	9	----> set_color $fish_color_error
17	153	----> __bobthefish_pretty_ms $CMD_DURATION m
4	4	-----> set -l interval_ms
4	4	-----> set -l scale 1
7	11	-----> switch $interval...
4	4	------> set interval_ms 60000
35	117	-----> switch $FISH_VERSION...
72	72	------> math -s$scale "$ms/$interval_ms"
10	10	------> echo -ns $interval
29	29	---> set_color $fish_color_normal
15	15	---> set_color $fish_color_autosuggestion
8	8	---> [ "$theme_display_date" = "no" ]
10	20	--> __bobthefish_timestamp
7	7	---> [ "$theme_display_date" = "no" ]
3	3	---> return
8	8	--> set_color normal
15	634	> fish_title
13	31	-> __bobthefish_title_user
5	18	--> if [ "$theme_title_display_user" = 'yes' ]...
13	13	---> [ "$theme_title_display_user" = 'yes' ]
4	11	-> if [ "$theme_title_display_process" = 'yes' ]...
7	7	--> [ "$theme_title_display_process" = 'yes' ]
7	577	-> if [ "$theme_title_display_path" != 'no' ]...
7	7	--> [ "$theme_title_display_path" != 'no' ]
7	563	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
110	550	---> prompt_pwd
9	9	----> set -l options h/help d/dir-length= D/full-length-dirs=
13	13	----> argparse -n prompt_pwd $options -- $argv
2	7	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
4	4	----> set -q argv[1]
7	7	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
19	369	----> for path in $argv...
50	61	-----> set -l realhome (string escape --style=regex -- ~)
11	11	------> string escape --style=regex -- ~
48	81	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
33	33	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
10	208	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
6	6	------> set -l full
10	125	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
43	100	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
43	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
14	14	---------> math $fish_prompt_pwd_full_dirs - 1
5	5	-------> set tmp $all[1]
4	4	-------> set full $all[2..]
43	59	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
41	66	> __fish_disable_bracketed_paste 'eza --icons --color'
25	25	-> printf "\e[?2004l"
14	33	> __fish_disable_focus 'eza --icons --color'
19	19	-> echo -n \e\[\?1004l
23	832	> fish_title eza\ --icons\ --color
18	43	-> __bobthefish_title_user
7	25	--> if [ "$theme_title_display_user" = 'yes' ]...
18	18	---> [ "$theme_title_display_user" = 'yes' ]
4	13	-> if [ "$theme_title_display_process" = 'yes' ]...
9	9	--> [ "$theme_title_display_process" = 'yes' ]
6	753	-> if [ "$theme_title_display_path" != 'no' ]...
10	10	--> [ "$theme_title_display_path" != 'no' ]
8	737	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
8	8	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
48	721	---> prompt_pwd
24	24	----> set -l options h/help d/dir-length= D/full-length-dirs=
19	19	----> argparse -n prompt_pwd $options -- $argv
5	11	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
7	7	----> set -q argv[1]
8	8	----> set argv $PWD
5	5	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
22	564	----> for path in $argv...
80	99	-----> set -l realhome (string escape --style=regex -- ~)
19	19	------> string escape --style=regex -- ~
61	95	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
34	34	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
25	348	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
12	189	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
58	152	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
72	94	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
22	22	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
8	8	-------> set full $all[2..]
86	114	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
28	28	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
5505	5505	> eza --icons --color
44	99	> __fish_enable_focus 'eza --icons --color'
55	55	-> echo -n \e\[\?1004h
20	37	> __fish_enable_bracketed_paste
17	17	-> printf "\e[?2004h"
38	141	> fish_mode_prompt
22	22	-> [ "$theme_display_vi" != 'no' ]
74	74	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
7	7	-> return
34	23342	> fish_prompt
28	28	-> set -l last_status $status
6	15	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
22	33	-> return_last_status $last_status
11	11	--> return $argv
96	23232	-> __fish_prompt_orig
20	20	--> set -l last_status $status
5	34	--> if [ "$TERM" = 'dumb' ]...
29	29	---> [ "$TERM" = 'dumb' ]
202	813	--> __bobthefish_glyphs
13	13	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
10	10	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
15	15	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
9	9	---> set -x superuser_glyph         '$ '
10	10	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
8	8	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
13	13	---> set -x ruby_glyph              ''
9	9	---> set -x go_glyph                ''
9	9	---> set -x nix_glyph               ''
28	28	---> set -x desk_glyph              \u25F2
10	10	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
6	6	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
9	9	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
13	13	---> set -x git_dirty_glyph      '*'
11	11	---> set -x git_staged_glyph     '~'
9	9	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
9	9	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
11	11	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
9	9	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
4	24	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
20	20	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
57	223	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
7	7	----> set detached_glyph   \uF417
9	9	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
9	9	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
9	9	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
58	614	--> __bobthefish_colors $theme_color_scheme
188	556	---> switch "$color_scheme"...
14	14	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
10	10	----> set -l blue     48b4fb 005faf 255e87
9	9	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
7	7	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
7	7	----> set -l black    000000
12	12	----> set -l ruby_red af0000
7	7	----> set -l go_blue  00d7d7
14	14	----> set -x color_initial_segment_exit     $white $red[2] --bold
9	9	----> set -x color_initial_segment_private  $white $grey[3]
16	16	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
16	16	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
10	10	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
8	8	----> set -x color_repo                     $green[1] $green[3]
13	13	----> set -x color_repo_work_tree           $grey[3] $white --bold
12	12	----> set -x color_repo_dirty               $red[2] $white
11	11	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
11	11	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
11	11	----> set -x color_k8s                      $green[2] $white --bold
8	8	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
10	10	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
11	11	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
8	8	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
8	8	----> set -x color_nix                      $blue[2] $grey[1] --bold
165	165	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
67	136	--> set -l real_pwd (__bobthefish_pwd)
34	69	---> __bobthefish_pwd
35	35	----> builtin pwd -P 2>/dev/null
35	161	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
25	65	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
9	34	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
17	17	-----> jobs -p >/dev/null
3	22	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
19	19	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
36	146	--> __bobthefish_prompt_user
41	41	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
10	10	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
22	22	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
3	8	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
4	4	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
13	27	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
12	25	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
11	24	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
11	22	--> __bobthefish_prompt_k8s_context
8	8	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
11	21	--> __bobthefish_prompt_aws_vault_profile
7	7	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
14	27	--> __bobthefish_prompt_nix
9	9	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
12	23	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
21	495	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
6	6	---> set -l ruby_version
12	451	---> if command -q rvm-prompt...
122	122	----> command -q rvm-prompt
96	96	----> command -q rbenv
127	127	----> type -q chruby
94	94	----> command -q asdf
7	7	---> [ -z "$ruby_version" ]
3	3	---> return
20	744	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
9	9	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
84	681	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
4	15	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
64	134	----> set d (__bobthefish_dirname $d)
34	70	-----> __bobthefish_dirname $d
36	36	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	15	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
59	106	----> set d (__bobthefish_dirname $d)
29	47	-----> __bobthefish_dirname $d
18	18	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
60	111	----> set d (__bobthefish_dirname $d)
26	51	-----> __bobthefish_dirname $d
25	25	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
73	120	----> set d (__bobthefish_dirname $d)
27	47	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
16	52	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
15	15	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
10	24	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
18	989	--> __bobthefish_prompt_node
7	7	---> set -l should_show
53	955	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
23	883	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
10	10	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
6	19	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
91	816	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
15	56	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
2	12	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
62	119	------> set dir (__bobthefish_dirname "$dir")
33	57	-------> __bobthefish_dirname "$dir"
24	24	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
15	57	------> for f in $files...
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
5	14	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
56	112	------> set dir (__bobthefish_dirname "$dir")
29	56	-------> __bobthefish_dirname "$dir"
27	27	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	53	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
5	13	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
56	103	------> set dir (__bobthefish_dirname "$dir")
27	47	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
28	68	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
54	97	------> set dir (__bobthefish_dirname "$dir")
28	43	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
5	5	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
54	2106	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2052	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
82	82	----> command -q git
7	7	----> set -q theme_vcs_ignore_paths
19	1931	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
67	1869	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1802	1802	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
10	26	-----> switch $real_pwd/...
12	12	------> echo $git_toplevel
4	4	------> return
54	81	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
15	27	---> __bobthefish_hg_project_dir $real_pwd
9	9	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
46	69	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
13	23	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
51	16203	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	148	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
47	134	----> if builtin -q path...
18	18	-----> builtin -q path
50	69	-----> echo (path sort -r $argv)[1]
19	19	------> path sort -r $argv
49	16004	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
43	2823	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
54	1428	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1374	1374	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1344	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
56	1314	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1245	1245	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
2	12	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
62	1618	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1556	1556	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
48	1078	----> set -l stashed (__bobthefish_git_stashed)
10	1030	-----> __bobthefish_git_stashed
21	1020	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
991	991	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
41	1260	----> set -l ahead (__bobthefish_git_ahead)
18	1219	-----> __bobthefish_git_ahead
4	11	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
5	5	------> set -l behind 0
53	1157	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1104	1104	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	23	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
10	2642	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
51	961	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
910	910	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1664	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
64	1636	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1572	1572	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
13	13	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
7	7	----> set flags " $flags"
12	12	----> set -l flag_colors $color_repo
9	23	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
9	9	-----> set flag_colors $color_repo_dirty
41	1061	----> __bobthefish_path_segment $git_root_dir project
14	14	-----> set -l segment_color $color_path
14	14	-----> set -l segment_basename_color $color_path_basename
4	23	-----> if not [ -w "$segment_dir" ]...
19	19	------> not [ -w "$segment_dir" ]
67	214	-----> __bobthefish_start_segment $segment_color
11	11	------> set -l bg $argv[1]
8	8	------> set -e argv[1]
10	10	------> set -l fg $argv[1]
6	6	------> set -e argv[1]
36	36	------> set_color normal
19	19	------> set_color -b $bg $fg $argv
38	48	------> switch "$__bobthefish_current_bg"...
10	10	-------> echo -n ' '
9	9	------> set __bobthefish_current_bg $bg
7	7	-----> set -l directory
6	6	-----> set -l parent
19	694	-----> switch "$segment_dir"...
50	587	------> set parent (__bobthefish_pretty_parent "$segment_dir")
43	537	-------> __bobthefish_pretty_parent "$segment_dir"
12	12	--------> set -q fish_prompt_pwd_dir_length
9	9	--------> set -l fish_prompt_pwd_dir_length 1
14	14	--------> set -l real_home ~
71	404	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
127	333	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
71	98	----------> __bobthefish_escape_regex "$real_home"
27	27	-----------> string escape --style=regex "$str" 2>/dev/null
35	108	----------> __bobthefish_dirname $child_dir
73	73	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	17	--------> if [ -z "$parent_dir" ]...
14	14	---------> [ -z "$parent_dir" ]
4	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
26	26	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
47	88	------> set directory (__bobthefish_basename "$segment_dir")
24	41	-------> __bobthefish_basename "$segment_dir"
17	17	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
16	16	-----> set_color -b $segment_basename_color
10	10	-----> echo -ns $directory ' '
24	111	----> __bobthefish_start_segment $flag_colors
8	8	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
7	7	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
7	7	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
23	40	-----> switch "$__bobthefish_current_bg"...
6	6	------> set_color $__bobthefish_current_bg
5	5	------> echo -ns $right_black_arrow_glyph ' '
6	6	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
48	5002	----> echo -ns (__bobthefish_git_branch) $flags ' '
17	4954	-----> __bobthefish_git_branch
62	1732	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1670	1670	-------> command git describe --tags --exact-match 2>/dev/null
87	1905	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1818	1818	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1300	------> begin...
10	10	-------> [ -n "$theme_git_default_branches" ]
62	1239	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1177	1177	--------> git config init.defaultBranch
13	13	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
10	277	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	249	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
22	208	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
50	153	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
57	103	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
30	46	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
7	23	-------> if [ $theme_project_dir_length -eq 0 ]...
6	6	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
12	108	--> __bobthefish_finish_segments
20	43	---> if [ -n "$__bobthefish_current_bg" ]...
5	5	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
6	6	----> set_color $__bobthefish_current_bg
6	6	----> echo -ns $right_black_arrow_glyph ' '
10	44	---> if [ "$theme_newline_cursor" = 'yes' ]...
4	4	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
5	14	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
5	5	-----> echo -ens "$theme_newline_prompt"
4	4	---> set_color normal
5	5	---> set __bobthefish_current_bg
9	130	> fish_right_prompt
6	28	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	93	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
2	11	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
9	9	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
8	8	--> set_color $fish_color_autosuggestion
12	30	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
8	15	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
26	648	> fish_title
15	34	-> __bobthefish_title_user
4	19	--> if [ "$theme_title_display_user" = 'yes' ]...
15	15	---> [ "$theme_title_display_user" = 'yes' ]
4	17	-> if [ "$theme_title_display_process" = 'yes' ]...
13	13	--> [ "$theme_title_display_process" = 'yes' ]
7	571	-> if [ "$theme_title_display_path" != 'no' ]...
7	7	--> [ "$theme_title_display_path" != 'no' ]
5	557	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
41	546	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
14	14	----> argparse -n prompt_pwd $options -- $argv
5	8	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
5	5	----> set -q argv[1]
9	9	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
20	433	----> for path in $argv...
50	61	-----> set -l realhome (string escape --style=regex -- ~)
11	11	------> string escape --style=regex -- ~
51	86	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
35	35	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	266	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
9	9	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	160	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
49	127	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
58	78	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
20	20	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
56	80	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
24	24	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
189	606	> up-or-search
11	176	-> if commandline --search-mode...
165	165	--> commandline --search-mode
6	17	-> if commandline --paging-mode...
11	11	--> commandline --paging-mode
185	202	-> set -l lineno (commandline -L)
17	17	--> commandline -L
12	22	-> switch $lineno...
10	10	--> commandline -f history-search-backward
58	127	> up-or-search
23	69	-> if commandline --search-mode...
29	29	--> commandline --search-mode
13	13	--> commandline -f history-search-backward
4	4	--> return
47	110	> up-or-search
23	63	-> if commandline --search-mode...
24	24	--> commandline --search-mode
11	11	--> commandline -f history-search-backward
5	5	--> return
45	73	> __fish_disable_bracketed_paste hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
28	28	-> printf "\e[?2004l"
16	31	> __fish_disable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
15	15	-> echo -n \e\[\?1004l
28	863	> fish_title hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
22	45	-> __bobthefish_title_user
5	23	--> if [ "$theme_title_display_user" = 'yes' ]...
18	18	---> [ "$theme_title_display_user" = 'yes' ]
6	18	-> if [ "$theme_title_display_process" = 'yes' ]...
12	12	--> [ "$theme_title_display_process" = 'yes' ]
8	772	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
6	755	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
45	742	---> prompt_pwd
14	14	----> set -l options h/help d/dir-length= D/full-length-dirs=
18	18	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
11	11	----> set -l fish_prompt_pwd_full_dirs 1
36	597	----> for path in $argv...
72	92	-----> set -l realhome (string escape --style=regex -- ~)
20	20	------> string escape --style=regex -- ~
81	115	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
34	34	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
20	354	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
24	24	------> test "$fish_prompt_pwd_dir_length" -eq 0
22	22	------> set -l full
18	196	------> if test $fish_prompt_pwd_full_dirs -gt 0...
8	8	-------> test $fish_prompt_pwd_full_dirs -gt 0
62	152	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
67	90	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
23	23	---------> math $fish_prompt_pwd_full_dirs - 1
10	10	-------> set tmp $all[1]
8	8	-------> set full $all[2..]
61	92	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
31	31	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
2442454	2442454	> hyperfine -w 5 -r 50 'fish -i -c exit'
36	92	> __fish_enable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
56	56	-> echo -n \e\[\?1004h
15	33	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
22	85	> fish_mode_prompt
17	17	-> [ "$theme_display_vi" != 'no' ]
42	42	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
22	21103	> fish_prompt
16	16	-> set -l last_status $status
4	10	-> if set -q CONDA_LEFT_PROMPT...
6	6	--> set -q CONDA_LEFT_PROMPT
11	17	-> return_last_status $last_status
6	6	--> return $argv
79	21038	-> __fish_prompt_orig
9	9	--> set -l last_status $status
3	14	--> if [ "$TERM" = 'dumb' ]...
11	11	---> [ "$TERM" = 'dumb' ]
125	568	--> __bobthefish_glyphs
15	15	---> set -x branch_glyph            \uE0A0
7	7	---> set -x right_black_arrow_glyph \uE0B0
5	5	---> set -x right_arrow_glyph       \uE0B1
6	6	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
5	5	---> set -x detached_glyph          \u27A6
6	6	---> set -x tag_glyph               \u2302
10	10	---> set -x nonzero_exit_glyph      '! '
7	7	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
7	7	---> set -x hg_glyph                \u263F
7	7	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
5	5	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
5	5	---> set -x go_glyph                ''
6	6	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
5	5	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
5	5	---> set -x vagrant_poweroff_glyph  \u2193
5	5	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
9	9	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
9	9	---> set -x git_dirty_glyph      '*'
10	10	---> set -x git_staged_glyph     '~'
6	6	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
5	5	---> set -x git_ahead_glyph      \u2191
6	6	---> set -x git_behind_glyph     \u2193
6	6	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
7	7	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
4	19	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
15	15	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
52	174	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
7	7	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
6	6	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
5	5	----> set node_glyph       \uE718 ' '
4	4	----> set vagrant_running_glyph  \uF431
5	5	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
8	8	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	10	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
62	516	--> __bobthefish_colors $theme_color_scheme
150	454	---> switch "$color_scheme"...
7	7	----> set -l red      cc9999 ce000f 660000
10	10	----> set -l green    addc10 189303 0c4801
4	4	----> set -l blue     48b4fb 005faf 255e87
9	9	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
5	5	----> set -l grey     cccccc 999999 333333
8	8	----> set -l white    ffffff
9	9	----> set -l black    000000
10	10	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
8	8	----> set -x color_initial_segment_private  $white $grey[3]
11	11	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
13	13	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
11	11	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
9	9	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
11	11	----> set -x color_repo_staged              $orange[1] $orange[3]
11	11	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
7	7	----> set -x color_vagrant                  $blue[1] $white --bold
8	8	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
7	7	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
8	8	----> set -x color_screen                   $green[1] $white --bold
7	7	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
7	7	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
126	126	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
53	107	--> set -l real_pwd (__bobthefish_pwd)
31	54	---> __bobthefish_pwd
23	23	----> builtin pwd -P 2>/dev/null
31	127	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
4	4	---> set -l superuser
4	4	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
8	8	---> [ -w / -o -w /private/ ]
19	51	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
7	27	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
14	14	-----> jobs -p >/dev/null
3	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
28	112	--> __bobthefish_prompt_user
30	30	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
15	15	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
4	7	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
21	33	--> __bobthefish_prompt_screen
9	9	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
8	18	--> __bobthefish_prompt_vagrant
7	7	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
9	19	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
8	16	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
10	17	--> __bobthefish_prompt_aws_vault_profile
5	5	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
9	18	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
2	2	---> return
9	18	--> __bobthefish_prompt_desk
6	6	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
13	338	--> __bobthefish_prompt_rubies
6	6	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
14	306	---> if command -q rvm-prompt...
77	77	----> command -q rvm-prompt
66	66	----> command -q rbenv
85	85	----> type -q chruby
64	64	----> command -q asdf
5	5	---> [ -z "$ruby_version" ]
3	3	---> return
20	567	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
4	4	---> set -l d $real_pwd
64	519	---> while not [ -z "$d" ]
...
4	4	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
54	109	----> set d (__bobthefish_dirname $d)
27	55	-----> __bobthefish_dirname $d
28	28	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	77	----> set d (__bobthefish_dirname $d)
21	34	-----> __bobthefish_dirname $d
13	13	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
42	77	----> set d (__bobthefish_dirname $d)
20	35	-----> __bobthefish_dirname $d
15	15	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
65	102	----> set d (__bobthefish_dirname $d)
17	37	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	13	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
2	2	----> return
12	38	--> __bobthefish_prompt_virtualfish
13	13	---> command -q python
11	11	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
2	2	---> return
8	18	--> __bobthefish_prompt_virtualgo
8	8	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
2	2	---> return
13	699	--> __bobthefish_prompt_node
5	5	---> set -l should_show
37	674	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
9	9	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
18	622	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
6	6	-----> set -l files $argv[2..-1]
4	14	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
5	5	------> test -z "$files"
63	573	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
11	39	------> for f in $files...
2	10	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
43	84	------> set dir (__bobthefish_dirname "$dir")
23	41	-------> __bobthefish_dirname "$dir"
18	18	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
11	41	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
4	4	------> [ "$dir" = '/' ]
43	81	------> set dir (__bobthefish_dirname "$dir")
24	38	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
10	40	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	75	------> set dir (__bobthefish_dirname "$dir")
20	35	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
10	38	------> for f in $files...
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
4	4	------> [ "$dir" = '/' ]
40	72	------> set dir (__bobthefish_dirname "$dir")
17	32	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
4	4	-----> return 1
4	4	---> [ -z "$should_show" ]
3	3	---> return
46	1919	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
18	1873	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
61	61	----> command -q git
4	4	----> set -q theme_vcs_ignore_paths
15	1783	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
58	1731	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1673	1673	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
11	23	-----> switch $real_pwd/...
9	9	------> echo $git_toplevel
3	3	------> return
49	74	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
15	25	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
44	69	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
14	25	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
51	15386	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	174	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
48	160	----> if builtin -q path...
28	28	-----> builtin -q path
65	84	-----> echo (path sort -r $argv)[1]
19	19	------> path sort -r $argv
47	15161	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
48	2805	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
57	1254	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1197	1197	------> command git config --bool bash.showDirtyState 2>/dev/null
10	1495	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
61	1463	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1387	1387	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
2	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
58	1510	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1452	1452	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
55	1331	----> set -l stashed (__bobthefish_git_stashed)
10	1276	-----> __bobthefish_git_stashed
20	1266	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1237	1237	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
41	1485	----> set -l ahead (__bobthefish_git_ahead)
16	1444	-----> __bobthefish_git_ahead
4	12	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
5	5	------> set -l behind 0
59	1383	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1324	1324	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	22	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
11	2814	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
58	1192	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1134	1134	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
11	1604	-----> if [ "$show_untracked" != 'false' ]...
11	11	------> [ "$show_untracked" != 'false' ]
65	1573	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1508	1508	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	9	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
8	8	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
5	5	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
8	18	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
34	721	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
4	17	-----> if not [ -w "$segment_dir" ]...
13	13	------> not [ -w "$segment_dir" ]
32	114	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
14	14	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
18	25	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
7	7	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
5	5	-----> set -l parent
12	491	-----> switch "$segment_dir"...
53	396	------> set parent (__bobthefish_pretty_parent "$segment_dir")
30	343	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
5	5	--------> set -l fish_prompt_pwd_dir_length 1
9	9	--------> set -l real_home ~
51	253	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
94	202	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
36	54	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
25	54	----------> __bobthefish_dirname $child_dir
29	29	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	10	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	11	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
7	7	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
17	17	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	83	------> set directory (__bobthefish_basename "$segment_dir")
23	37	-------> __bobthefish_basename "$segment_dir"
14	14	--------> string replace -r '^.*/' '' -- $argv
11	11	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
13	13	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
25	105	----> __bobthefish_start_segment $flag_colors
5	5	-----> set -l bg $argv[1]
4	4	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
5	5	-----> set_color normal
10	10	-----> set_color -b $bg $fg $argv
21	42	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
48	3956	----> echo -ns (__bobthefish_git_branch) $flags ' '
24	3908	-----> __bobthefish_git_branch
64	1357	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1293	1293	-------> command git describe --tags --exact-match 2>/dev/null
73	1188	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1115	1115	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1339	------> begin...
10	10	-------> [ -n "$theme_git_default_branches" ]
59	1278	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1219	1219	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
11	11	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
12	320	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
46	291	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
49	245	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
53	159	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
60	106	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
29	46	---------> __bobthefish_escape_regex "$project_root_dir"
17	17	----------> string escape --style=regex "$str" 2>/dev/null
8	27	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
15	127	--> __bobthefish_finish_segments
20	51	---> if [ -n "$__bobthefish_current_bg" ]...
7	7	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
11	50	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
6	17	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
5	5	---> set __bobthefish_current_bg
11	217	> fish_right_prompt
8	32	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
10	18	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
16	174	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
22	104	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
30	44	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
9	9	----> echo -ns $CMD_DURATION 'ms'
9	9	---> set_color $fish_color_normal
7	7	---> set_color $fish_color_autosuggestion
6	6	---> [ "$theme_display_date" = "no" ]
10	17	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
17	529	> fish_title
11	25	-> __bobthefish_title_user
5	14	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	478	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
6	465	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
38	454	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
19	350	----> for path in $argv...
44	52	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
49	69	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
20	20	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	210	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
4	4	------> set -l full
11	127	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
41	99	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
42	58	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
7	7	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	60	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
103	484	> up-or-search
19	63	-> if commandline --search-mode...
44	44	--> commandline --search-mode
6	16	-> if commandline --paging-mode...
10	10	--> commandline --paging-mode
238	268	-> set -l lineno (commandline -L)
30	30	--> commandline -L
18	34	-> switch $lineno...
16	16	--> commandline -f history-search-backward
46	82	> __fish_disable_bracketed_paste hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
36	36	-> printf "\e[?2004l"
18	36	> __fish_disable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
18	18	-> echo -n \e\[\?1004l
26	887	> fish_title hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
18	46	-> __bobthefish_title_user
7	28	--> if [ "$theme_title_display_user" = 'yes' ]...
21	21	---> [ "$theme_title_display_user" = 'yes' ]
4	13	-> if [ "$theme_title_display_process" = 'yes' ]...
9	9	--> [ "$theme_title_display_process" = 'yes' ]
11	802	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
7	782	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
58	768	---> prompt_pwd
16	16	----> set -l options h/help d/dir-length= D/full-length-dirs=
23	23	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
7	7	----> set -q argv[1]
8	8	----> set argv $PWD
5	5	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
12	12	----> set -l fulldirs 0
5	5	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
7	7	----> set -l fish_prompt_pwd_full_dirs 1
26	598	----> for path in $argv...
87	109	-----> set -l realhome (string escape --style=regex -- ~)
22	22	------> string escape --style=regex -- ~
71	108	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
37	37	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
15	355	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
15	220	------> if test $fish_prompt_pwd_full_dirs -gt 0...
8	8	-------> test $fish_prompt_pwd_full_dirs -gt 0
64	182	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
77	118	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
41	41	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
61	100	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
39	39	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
2455630	2455630	> hyperfine -w 5 -r 50 'fish -i -c exit'
37	85	> __fish_enable_focus hyperfine\ -w\ 5\ -r\ 50\ \'fish\ -i\ -c\ exit\'
48	48	-> echo -n \e\[\?1004h
15	28	> __fish_enable_bracketed_paste
13	13	-> printf "\e[?2004h"
24	85	> fish_mode_prompt
20	20	-> [ "$theme_display_vi" != 'no' ]
37	37	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
21	22031	> fish_prompt
16	16	-> set -l last_status $status
6	11	-> if set -q CONDA_LEFT_PROMPT...
5	5	--> set -q CONDA_LEFT_PROMPT
13	26	-> return_last_status $last_status
13	13	--> return $argv
93	21957	-> __fish_prompt_orig
9	9	--> set -l last_status $status
4	13	--> if [ "$TERM" = 'dumb' ]...
9	9	---> [ "$TERM" = 'dumb' ]
131	617	--> __bobthefish_glyphs
9	9	---> set -x branch_glyph            \uE0A0
8	8	---> set -x right_black_arrow_glyph \uE0B0
6	6	---> set -x right_arrow_glyph       \uE0B1
5	5	---> set -x left_black_arrow_glyph  \uE0B2
7	7	---> set -x left_arrow_glyph        \uE0B3
5	5	---> set -x detached_glyph          \u27A6
6	6	---> set -x tag_glyph               \u2302
26	26	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
7	7	---> set -x hg_glyph                \u263F
7	7	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
5	5	---> set -x go_glyph                ''
5	5	---> set -x nix_glyph               ''
7	7	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
5	5	---> set -x vagrant_running_glyph   \u2191
5	5	---> set -x vagrant_poweroff_glyph  \u2193
6	6	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
8	8	---> set -x vagrant_stopping_glyph  \u21E3
6	6	---> set -x vagrant_unknown_glyph   '!'
9	9	---> set -x git_dirty_glyph      '*'
10	10	---> set -x git_staged_glyph     '~'
9	9	---> set -x git_stashed_glyph    '$'
9	9	---> set -x git_untracked_glyph  '…'
8	8	---> set -x git_ahead_glyph      \u2191
12	12	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
7	7	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
5	24	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
19	19	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
43	182	---> if [ "$theme_nerd_fonts" = "yes" ]...
6	6	----> [ "$theme_nerd_fonts" = "yes" ]
7	7	----> set private_glyph    \uF023 ' '
8	8	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
8	8	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
9	9	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
5	5	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
5	5	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
11	11	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
5	5	----> set git_plus_minus_glyph \uF0DC
2	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
55	541	--> __bobthefish_colors $theme_color_scheme
171	486	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
8	8	----> set -l green    addc10 189303 0c4801
5	5	----> set -l blue     48b4fb 005faf 255e87
9	9	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
5	5	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
10	10	----> set -l black    000000
8	8	----> set -l ruby_red af0000
4	4	----> set -l go_blue  00d7d7
14	14	----> set -x color_initial_segment_exit     $white $red[2] --bold
9	9	----> set -x color_initial_segment_private  $white $grey[3]
12	12	----> set -x color_initial_segment_su       $white $green[2] --bold
13	13	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
7	7	----> set -x color_path                     $grey[3] $grey[2]
13	13	----> set -x color_path_basename            $grey[3] $white --bold
7	7	----> set -x color_path_nowrite             $red[3] $red[1]
12	12	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
7	7	----> set -x color_repo                     $green[1] $green[3]
14	14	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
10	10	----> set -x color_vagrant                  $blue[1] $white --bold
8	8	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
7	7	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
8	8	----> set -x color_username                 $grey[1] $blue[3] --bold
8	8	----> set -x color_hostname                 $grey[1] $blue[3]
7	7	----> set -x color_screen                   $green[1] $white --bold
7	7	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
6	6	----> set -x color_virtualgo                $go_blue $black --bold
7	7	----> set -x color_desk                     $blue[2] $grey[1] --bold
7	7	----> set -x color_nix                      $blue[2] $grey[1] --bold
129	129	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
52	113	--> set -l real_pwd (__bobthefish_pwd)
37	61	---> __bobthefish_pwd
24	24	----> builtin pwd -P 2>/dev/null
29	133	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
12	12	---> [ -w / -o -w /private/ ]
19	53	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
6	29	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
15	15	-----> jobs -p >/dev/null
3	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
30	121	--> __bobthefish_prompt_user
34	34	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
9	9	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
17	17	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
3	8	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
4	7	---> if set -q display_hostname...
3	3	----> set -q display_hostname
3	3	---> set -q display_user
4	4	---> set -q display_sudo_user
2	2	---> set -q display_hostname
11	23	--> __bobthefish_prompt_screen
9	9	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
11	19	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
2	2	---> return
9	18	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
1	1	---> return
9	17	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
8	17	--> __bobthefish_prompt_aws_vault_profile
7	7	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
9	18	--> __bobthefish_prompt_nix
8	8	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
1	1	---> return
11	20	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
17	382	--> __bobthefish_prompt_rubies
6	6	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
10	345	---> if command -q rvm-prompt...
86	86	----> command -q rvm-prompt
72	72	----> command -q rbenv
95	95	----> type -q chruby
82	82	----> command -q asdf
6	6	---> [ -z "$ruby_version" ]
3	3	---> return
17	566	--> __bobthefish_prompt_golang $real_pwd
7	7	---> [ "$theme_display_go" = 'no' ]
7	7	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
60	515	---> while not [ -z "$d" ]
...
6	6	----> not [ -z "$d" ]
4	12	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
57	118	----> set d (__bobthefish_dirname $d)
30	61	-----> __bobthefish_dirname $d
31	31	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
46	83	----> set d (__bobthefish_dirname $d)
23	37	-----> __bobthefish_dirname $d
14	14	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
43	81	----> set d (__bobthefish_dirname $d)
25	38	-----> __bobthefish_dirname $d
13	13	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
4	10	----> if [ -e $d/go.mod ]...
6	6	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	78	----> set d (__bobthefish_dirname $d)
19	35	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	15	---> if [ "$gomod_version" = "0" ]...
6	6	----> [ "$gomod_version" = "0" ]
3	3	----> return
11	41	--> __bobthefish_prompt_virtualfish
15	15	---> command -q python
12	12	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
9	19	--> __bobthefish_prompt_virtualgo
8	8	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
2	2	---> return
13	762	--> __bobthefish_prompt_node
5	5	---> set -l should_show
34	735	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
20	20	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
17	675	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
8	8	-----> set -l files $argv[2..-1]
5	14	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
4	4	------> test -z "$files"
66	626	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
13	46	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
53	100	------> set dir (__bobthefish_dirname "$dir")
28	47	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
11	45	------> for f in $files...
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
9	9	------> [ "$dir" = '/' ]
43	81	------> set dir (__bobthefish_dirname "$dir")
22	38	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	42	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
39	75	------> set dir (__bobthefish_dirname "$dir")
19	36	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
11	41	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
43	78	------> set dir (__bobthefish_dirname "$dir")
19	35	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
3	3	-----> return 1
5	5	---> [ -z "$should_show" ]
4	4	---> return
50	2029	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
22	1979	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
68	68	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
19	1877	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
66	1811	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1745	1745	------> command git rev-parse --show-toplevel 2>/dev/null
11	11	-----> [ -z "$git_toplevel" ]
12	30	-----> switch $real_pwd/...
14	14	------> echo $git_toplevel
4	4	------> return
56	88	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
18	32	---> __bobthefish_hg_project_dir $real_pwd
10	10	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
47	74	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
15	27	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
52	15950	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
17	181	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
52	164	----> if builtin -q path...
37	37	-----> builtin -q path
54	75	-----> echo (path sort -r $argv)[1]
21	21	------> path sort -r $argv
51	15717	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
63	3031	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
66	1450	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1384	1384	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1510	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
64	1477	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1399	1399	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
14	14	-------> echo -n "$git_dirty_glyph"
4	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
59	1469	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1410	1410	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
60	1478	----> set -l stashed (__bobthefish_git_stashed)
11	1418	-----> __bobthefish_git_stashed
22	1407	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1376	1376	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
45	1620	----> set -l ahead (__bobthefish_git_ahead)
19	1575	-----> __bobthefish_git_ahead
3	13	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
7	7	------> set -l ahead 0
7	7	------> set -l behind 0
80	1504	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1424	1424	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	25	------> if [ $ahead -eq 1 ]...
13	13	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
11	2742	----> if [ "$theme_display_git_untracked" != 'no' ]...
8	8	-----> [ "$theme_display_git_untracked" != 'no' ]
63	1210	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1147	1147	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1513	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
60	1481	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1421	1421	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	12	------> if [ "$new" ]...
8	8	-------> [ "$new" ]
10	10	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
7	18	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
39	766	----> __bobthefish_path_segment $git_root_dir project
8	8	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
3	14	-----> if not [ -w "$segment_dir" ]...
11	11	------> not [ -w "$segment_dir" ]
37	119	-----> __bobthefish_start_segment $segment_color
7	7	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
16	16	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
18	24	------> switch "$__bobthefish_current_bg"...
6	6	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
4	4	-----> set -l parent
12	526	-----> switch "$segment_dir"...
49	406	------> set parent (__bobthefish_pretty_parent "$segment_dir")
32	357	-------> __bobthefish_pretty_parent "$segment_dir"
6	6	--------> set -q fish_prompt_pwd_dir_length
5	5	--------> set -l fish_prompt_pwd_dir_length 1
9	9	--------> set -l real_home ~
53	267	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
103	214	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
36	54	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
28	57	----------> __bobthefish_dirname $child_dir
29	29	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	11	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
4	10	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
17	17	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
47	108	------> set directory (__bobthefish_basename "$segment_dir")
27	61	-------> __bobthefish_basename "$segment_dir"
34	34	--------> string replace -r '^.*/' '' -- $argv
12	12	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
22	115	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
7	7	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
24	46	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
50	4046	----> echo -ns (__bobthefish_git_branch) $flags ' '
20	3996	-----> __bobthefish_git_branch
63	1383	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1320	1320	-------> command git describe --tags --exact-match 2>/dev/null
77	1303	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1226	1226	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
22	1290	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
74	1215	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1141	1141	--------> git config init.defaultBranch
15	15	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
14	14	-------> contains $branch $theme_git_default_branches
11	11	-------> echo $branch_glyph
4	4	-------> return
12	12	----> set_color normal
13	324	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
44	293	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
24	249	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
54	183	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
62	129	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
46	67	---------> __bobthefish_escape_regex "$project_root_dir"
21	21	----------> string escape --style=regex "$str" 2>/dev/null
9	30	-------> if [ $theme_project_dir_length -eq 0 ]...
10	10	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
2	8	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
3	3	-----> return
14	139	--> __bobthefish_finish_segments
26	59	---> if [ -n "$__bobthefish_current_bg" ]...
7	7	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
9	9	----> set_color $__bobthefish_current_bg
9	9	----> echo -ns $right_black_arrow_glyph ' '
13	54	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
11	11	----> set_color $fish_color_autosuggestion
5	17	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
6	6	---> set __bobthefish_current_bg
10	220	> fish_right_prompt
8	33	-> if not set -q CONDA_LEFT_PROMPT...
7	7	--> not set -q CONDA_LEFT_PROMPT
9	18	--> __conda_add_prompt
4	9	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	177	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	16	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
21	105	--> __bobthefish_cmd_duration
8	8	---> [ "$theme_display_cmd_duration" = "no" ]
12	12	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
26	38	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
7	7	----> echo -ns $CMD_DURATION 'ms'
11	11	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
7	7	---> [ "$theme_display_date" = "no" ]
8	17	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
6	6	--> set_color normal
17	573	> fish_title
13	26	-> __bobthefish_title_user
3	13	--> if [ "$theme_title_display_user" = 'yes' ]...
10	10	---> [ "$theme_title_display_user" = 'yes' ]
8	13	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
8	517	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	503	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
38	492	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
12	12	----> argparse -n prompt_pwd $options -- $argv
3	8	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
5	5	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
19	383	----> for path in $argv...
46	57	-----> set -l realhome (string escape --style=regex -- ~)
11	11	------> string escape --style=regex -- ~
46	83	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
37	37	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	224	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
9	132	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
42	104	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
43	62	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
19	19	---------> math $fish_prompt_pwd_full_dirs - 1
7	7	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
48	68	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
20	20	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
53	87	> __fish_disable_bracketed_paste 'eza --icons --color'
34	34	-> printf "\e[?2004l"
37	62	> __fish_disable_focus 'eza --icons --color'
25	25	-> echo -n \e\[\?1004l
23	881	> fish_title eza\ --icons\ --color
18	44	-> __bobthefish_title_user
6	26	--> if [ "$theme_title_display_user" = 'yes' ]...
20	20	---> [ "$theme_title_display_user" = 'yes' ]
4	14	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
8	800	-> if [ "$theme_title_display_path" != 'no' ]...
10	10	--> [ "$theme_title_display_path" != 'no' ]
7	782	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
49	768	---> prompt_pwd
15	15	----> set -l options h/help d/dir-length= D/full-length-dirs=
19	19	----> argparse -n prompt_pwd $options -- $argv
5	13	----> if set -q _flag_help...
8	8	-----> set -q _flag_help
9	9	----> set -q argv[1]
12	12	----> set argv $PWD
6	6	----> set -ql _flag_d
9	9	----> set -q fish_prompt_pwd_dir_length
10	10	----> set -l fish_prompt_pwd_dir_length 1
10	10	----> set -l fulldirs 0
7	7	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
25	597	----> for path in $argv...
86	105	-----> set -l realhome (string escape --style=regex -- ~)
19	19	------> string escape --style=regex -- ~
70	118	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
48	48	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
13	349	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
14	14	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
18	199	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
66	155	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
66	89	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
23	23	---------> math $fish_prompt_pwd_full_dirs - 1
10	10	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
81	115	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
34	34	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
5836	5836	> eza --icons --color
40	94	> __fish_enable_focus 'eza --icons --color'
54	54	-> echo -n \e\[\?1004h
22	40	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
34	116	> fish_mode_prompt
19	19	-> [ "$theme_display_vi" != 'no' ]
58	58	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
25	22524	> fish_prompt
21	21	-> set -l last_status $status
5	13	-> if set -q CONDA_LEFT_PROMPT...
8	8	--> set -q CONDA_LEFT_PROMPT
19	33	-> return_last_status $last_status
14	14	--> return $argv
82	22432	-> __fish_prompt_orig
17	17	--> set -l last_status $status
5	26	--> if [ "$TERM" = 'dumb' ]...
21	21	---> [ "$TERM" = 'dumb' ]
340	958	--> __bobthefish_glyphs
11	11	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
9	9	---> set -x right_arrow_glyph       \uE0B1
9	9	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
9	9	---> set -x tag_glyph               \u2302
9	9	---> set -x nonzero_exit_glyph      '! '
12	12	---> set -x private_glyph           \uE0A2 ' '
9	9	---> set -x superuser_glyph         '$ '
11	11	---> set -x bg_job_glyph            '% '
10	10	---> set -x hg_glyph                \u263F
22	22	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
8	8	---> set -x virtualenv_glyph        \u25F0
10	10	---> set -x pypy_glyph              \u1D56
15	15	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
10	10	---> set -x desk_glyph              \u25F2
11	11	---> set -x k8s_glyph               \u2388
9	9	---> set -x vagrant_running_glyph   \u2191
8	8	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
8	8	---> set -x vagrant_saved_glyph     \u21E1
11	11	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
9	9	---> set -x git_dirty_glyph      '*'
13	13	---> set -x git_staged_glyph     '~'
10	10	---> set -x git_stashed_glyph    '$'
10	10	---> set -x git_untracked_glyph  '…'
9	9	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
11	11	---> set -x git_plus_minus_glyph '±'
6	6	---> set -x fossil_glyph \U1F9B4
6	26	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
20	20	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
56	227	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
7	7	----> set branch_glyph     \uF418
7	7	----> set detached_glyph   \uF417
9	9	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
6	6	----> set vagrant_poweroff_glyph \uF433
9	9	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
9	9	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
7	7	----> set fossil_glyph \UF00B9
7	7	----> set git_ahead_glyph      \uF47B
6	6	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
59	651	--> __bobthefish_colors $theme_color_scheme
173	592	---> switch "$color_scheme"...
14	14	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
13	13	----> set -l orange   f6b117 unused 3a2a03
10	10	----> set -l brown    bf5e00 803f00 4d2600
12	12	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
9	9	----> set -l black    000000
11	11	----> set -l ruby_red af0000
10	10	----> set -l go_blue  00d7d7
15	15	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
18	18	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
18	18	----> set -x color_path_basename            $grey[3] $white --bold
8	8	----> set -x color_path_nowrite             $red[3] $red[1]
14	14	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
14	14	----> set -x color_repo_work_tree           $grey[3] $white --bold
10	10	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
11	11	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
23	23	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
11	11	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
12	12	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
10	10	----> set -x color_username                 $grey[1] $blue[3] --bold
8	8	----> set -x color_hostname                 $grey[1] $blue[3]
8	8	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
22	22	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
172	172	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
69	143	--> set -l real_pwd (__bobthefish_pwd)
40	74	---> __bobthefish_pwd
34	34	----> builtin pwd -P 2>/dev/null
32	159	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
6	6	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
25	65	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
8	34	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
18	18	-----> jobs -p >/dev/null
4	22	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
18	18	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
35	146	--> __bobthefish_prompt_user
41	41	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
10	10	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
23	23	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
3	8	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
3	7	---> if set -q display_hostname...
4	4	----> set -q display_hostname
5	5	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
14	28	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
13	24	--> __bobthefish_prompt_vagrant
8	8	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
12	26	--> __bobthefish_prompt_docker
11	11	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
12	22	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
10	25	--> __bobthefish_prompt_aws_vault_profile
11	11	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
4	4	---> return
12	38	--> __bobthefish_prompt_nix
23	23	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
10	23	--> __bobthefish_prompt_desk
10	10	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
19	455	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
8	412	---> if command -q rvm-prompt...
105	105	----> command -q rvm-prompt
91	91	----> command -q rbenv
118	118	----> type -q chruby
90	90	----> command -q asdf
7	7	---> [ -z "$ruby_version" ]
3	3	---> return
22	712	--> __bobthefish_prompt_golang $real_pwd
7	7	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
83	652	---> while not [ -z "$d" ]
...
6	6	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
61	133	----> set d (__bobthefish_dirname $d)
38	72	-----> __bobthefish_dirname $d
34	34	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
55	105	----> set d (__bobthefish_dirname $d)
29	50	-----> __bobthefish_dirname $d
21	21	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
55	113	----> set d (__bobthefish_dirname $d)
38	58	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
54	99	----> set d (__bobthefish_dirname $d)
25	45	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
5	16	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
4	4	----> return
14	50	--> __bobthefish_prompt_virtualfish
15	15	---> command -q python
18	18	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
10	23	--> __bobthefish_prompt_virtualgo
10	10	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
13	854	--> __bobthefish_prompt_node
6	6	---> set -l should_show
43	826	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
10	10	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
21	767	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
8	8	-----> set -l dir "$argv[1]"
9	9	-----> set -l files $argv[2..-1]
6	18	-----> if test -z "$dir"...
6	6	------> test -z "$dir"
6	6	------> test -z "$files"
79	707	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
13	56	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	17	-------> if [ -e "$dir/$f" ]...
14	14	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
50	98	------> set dir (__bobthefish_dirname "$dir")
25	48	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
13	50	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
50	89	------> set dir (__bobthefish_dirname "$dir")
24	39	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	47	------> for f in $files...
5	14	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
49	88	------> set dir (__bobthefish_dirname "$dir")
22	39	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
12	55	------> for f in $files...
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	19	-------> if [ -e "$dir/$f" ]...
16	16	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
50	92	------> set dir (__bobthefish_dirname "$dir")
24	42	-------> __bobthefish_dirname "$dir"
18	18	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
48	1952	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
22	1904	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
66	66	----> command -q git
4	4	----> set -q theme_vcs_ignore_paths
17	1805	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
64	1752	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1688	1688	------> command git rev-parse --show-toplevel 2>/dev/null
7	7	-----> [ -z "$git_toplevel" ]
10	22	-----> switch $real_pwd/...
9	9	------> echo $git_toplevel
3	3	------> return
45	66	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
12	21	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
2	2	----> return
45	69	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
14	24	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
47	15584	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
15	154	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
48	139	----> if builtin -q path...
27	27	-----> builtin -q path
47	64	-----> echo (path sort -r $argv)[1]
17	17	------> path sort -r $argv
50	15383	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
43	2707	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
51	1067	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1016	1016	------> command git config --bool bash.showDirtyState 2>/dev/null
12	1589	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
62	1548	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1473	1473	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
4	21	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
17	17	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
59	1450	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1391	1391	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
46	1325	----> set -l stashed (__bobthefish_git_stashed)
12	1279	-----> __bobthefish_git_stashed
18	1267	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1241	1241	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
46	1384	----> set -l ahead (__bobthefish_git_ahead)
15	1338	-----> __bobthefish_git_ahead
2	10	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
14	14	------> set -l ahead 0
6	6	------> set -l behind 0
58	1267	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1209	1209	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
4	26	------> if [ $ahead -eq 1 ]...
15	15	-------> [ $ahead -eq 1 ]
7	7	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
11	3136	----> if [ "$theme_display_git_untracked" != 'no' ]...
10	10	-----> [ "$theme_display_git_untracked" != 'no' ]
57	1365	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1308	1308	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1750	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
59	1723	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1664	1664	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
2	9	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
11	11	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
6	6	----> set flags " $flags"
11	11	----> set -l flag_colors $color_repo
9	22	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
43	952	----> __bobthefish_path_segment $git_root_dir project
13	13	-----> set -l segment_color $color_path
10	10	-----> set -l segment_basename_color $color_path_basename
4	14	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
45	162	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
8	8	------> set -l fg $argv[1]
6	6	------> set -e argv[1]
28	28	------> set_color normal
15	15	------> set_color -b $bg $fg $argv
29	36	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
6	6	-----> set -l parent
16	648	-----> switch "$segment_dir"...
47	531	------> set parent (__bobthefish_pretty_parent "$segment_dir")
31	484	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
7	7	--------> set -l fish_prompt_pwd_dir_length 1
11	11	--------> set -l real_home ~
60	380	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
149	320	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
58	85	----------> __bobthefish_escape_regex "$real_home"
27	27	-----------> string escape --style=regex "$str" 2>/dev/null
39	86	----------> __bobthefish_dirname $child_dir
47	47	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	14	--------> if [ -z "$parent_dir" ]...
10	10	---------> [ -z "$parent_dir" ]
3	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
9	9	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
21	21	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
48	101	------> set directory (__bobthefish_basename "$segment_dir")
37	53	-------> __bobthefish_basename "$segment_dir"
16	16	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
17	17	-----> set_color -b $segment_basename_color
10	10	-----> echo -ns $directory ' '
26	144	----> __bobthefish_start_segment $flag_colors
8	8	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
13	13	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
35	61	-----> switch "$__bobthefish_current_bg"...
9	9	------> set_color $__bobthefish_current_bg
9	9	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
54	3884	----> echo -ns (__bobthefish_git_branch) $flags ' '
18	3830	-----> __bobthefish_git_branch
74	1494	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1420	1420	-------> command git describe --tags --exact-match 2>/dev/null
64	1282	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1218	1218	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
15	1036	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
51	981	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
930	930	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
12	274	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
40	245	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
21	205	------> __bobthefish_project_pwd $git_root_dir $real_pwd
4	4	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
50	150	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
55	100	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
28	45	---------> __bobthefish_escape_regex "$project_root_dir"
17	17	----------> string escape --style=regex "$str" 2>/dev/null
8	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
15	120	--> __bobthefish_finish_segments
19	47	---> if [ -n "$__bobthefish_current_bg" ]...
5	5	----> [ -n "$__bobthefish_current_bg" ]
7	7	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
10	48	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
5	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
4	4	---> set __bobthefish_current_bg
9	143	> fish_right_prompt
9	30	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
19	104	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
13	31	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
8	8	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
10	17	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
15	522	> fish_title
11	24	-> __bobthefish_title_user
3	13	--> if [ "$theme_title_display_user" = 'yes' ]...
10	10	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	474	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	461	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
40	450	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
10	10	----> argparse -n prompt_pwd $options -- $argv
4	7	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
3	3	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
4	4	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
17	352	----> for path in $argv...
39	47	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
46	76	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
30	30	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	212	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	128	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	102	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
47	62	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
15	15	---------> math $fish_prompt_pwd_full_dirs - 1
5	5	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
44	61	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
474	492	> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/functions/cd.fish
18	18	-> function cd --description "Change directory"...
69	224	> source /home/linuxbrew/.linuxbrew/Cellar/fish/3.7.1/share/fish/completions/cd.fish
141	141	-> complete -c cd -a "(__fish_complete_cd)"
14	14	-> complete -c cd -s h -l help -d 'Display help and exit'
53	235	> __fish_disable_bracketed_paste 'cd cashe'
182	182	-> printf "\e[?2004l"
22	186	> __fish_disable_focus 'cd cashe'
164	164	-> echo -n \e\[\?1004l
26	1318	> fish_title cd\ cashe
26	66	-> __bobthefish_title_user
15	40	--> if [ "$theme_title_display_user" = 'yes' ]...
25	25	---> [ "$theme_title_display_user" = 'yes' ]
4	20	-> if [ "$theme_title_display_process" = 'yes' ]...
16	16	--> [ "$theme_title_display_process" = 'yes' ]
12	1206	-> if [ "$theme_title_display_path" != 'no' ]...
13	13	--> [ "$theme_title_display_path" != 'no' ]
8	1181	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
12	12	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
189	1161	---> prompt_pwd
19	19	----> set -l options h/help d/dir-length= D/full-length-dirs=
23	23	----> argparse -n prompt_pwd $options -- $argv
6	14	----> if set -q _flag_help...
8	8	-----> set -q _flag_help
9	9	----> set -q argv[1]
14	14	----> set argv $PWD
5	5	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
7	7	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
40	851	----> for path in $argv...
96	121	-----> set -l realhome (string escape --style=regex -- ~)
25	25	------> string escape --style=regex -- ~
106	169	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
63	63	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
18	521	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
23	23	------> test "$fish_prompt_pwd_dir_length" -eq 0
13	13	------> set -l full
13	356	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
97	306	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
98	209	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
111	111	---------> math $fish_prompt_pwd_full_dirs - 1
21	21	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
79	111	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
32	32	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
59	446	> cd cashe
10	10	-> set -l MAX_DIR_HIST 25
6	254	-> if test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)...
107	248	--> test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)
121	121	---> count $argv
12	12	---> test "$argv[1]" = "--"
8	8	---> echo 1
5	11	-> if status --is-command-substitution...
6	6	--> status --is-command-substitution
10	10	-> set -l previous $PWD
3	11	-> if test "$argv" = -...
8	8	--> test "$argv" = -
36	36	-> builtin cd $argv
28	28	-> set -l cd_status $status
5	21	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
16	16	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
6	6	-> return $cd_status
12	26	> __fish_enable_focus 'cd cashe'
14	14	-> echo -n \e\[\?1004h
8	20	> __fish_enable_bracketed_paste
12	12	-> printf "\e[?2004h"
16	58	> fish_mode_prompt
12	12	-> [ "$theme_display_vi" != 'no' ]
26	26	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
19	26511	> fish_prompt
13	13	-> set -l last_status $status
3	10	-> if set -q CONDA_LEFT_PROMPT...
7	7	--> set -q CONDA_LEFT_PROMPT
13	20	-> return_last_status $last_status
7	7	--> return $argv
90	26449	-> __fish_prompt_orig
8	8	--> set -l last_status $status
3	12	--> if [ "$TERM" = 'dumb' ]...
9	9	---> [ "$TERM" = 'dumb' ]
164	719	--> __bobthefish_glyphs
10	10	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
8	8	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
11	11	---> set -x nonzero_exit_glyph      '! '
13	13	---> set -x private_glyph           \uE0A2 ' '
13	13	---> set -x superuser_glyph         '$ '
12	12	---> set -x bg_job_glyph            '% '
13	13	---> set -x hg_glyph                \u263F
9	9	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
7	7	---> set -x ruby_glyph              ''
7	7	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
8	8	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
8	8	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
8	8	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
12	12	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
6	6	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
6	6	---> set -x fossil_glyph \U1F9B4
4	20	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
16	16	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
57	222	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
19	19	----> set git_dirty_glyph      \uF448 ''
8	8	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
4	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
88	676	--> __bobthefish_colors $theme_color_scheme
252	588	---> switch "$color_scheme"...
9	9	----> set -l red      cc9999 ce000f 660000
6	6	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
11	11	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
5	5	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
6	6	----> set -l black    000000
6	6	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
15	15	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
9	9	----> set -x color_path_basename            $grey[3] $white --bold
8	8	----> set -x color_path_nowrite             $red[3] $red[1]
13	13	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
8	8	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
10	10	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
8	8	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
12	12	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
8	8	----> set -x color_k8s                      $green[2] $white --bold
8	8	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
12	12	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
8	8	----> set -x color_desk                     $blue[2] $grey[1] --bold
13	13	----> set -x color_nix                      $blue[2] $grey[1] --bold
415	415	--> type -q bobthefish_colors
9	9	--> set -l __bobthefish_current_bg
64	144	--> set -l real_pwd (__bobthefish_pwd)
43	80	---> __bobthefish_pwd
37	37	----> builtin pwd -P 2>/dev/null
33	596	--> __bobthefish_prompt_status $last_status
6	6	---> set -l nonzero
6	6	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
5	5	---> set nonzero 1
13	13	---> [ -w / -o -w /private/ ]
26	161	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
8	129	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
113	113	-----> jobs -p >/dev/null
19	358	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
20	20	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
40	234	----> __bobthefish_start_segment $color_initial_segment_exit
10	10	-----> set -l bg $argv[1]
8	8	-----> set -e argv[1]
7	7	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
104	104	-----> set_color normal
18	18	-----> set_color -b $bg $fg $argv
25	33	-----> switch "$__bobthefish_current_bg"...
8	8	------> echo -n ' '
9	9	-----> set __bobthefish_current_bg $bg
10	60	----> if [ "$nonzero" ]...
6	6	-----> [ "$nonzero" ]
8	8	-----> set_color normal
13	13	-----> set_color -b $color_initial_segment_exit
7	23	-----> if [ "$theme_show_exit_status" = 'yes' ]...
8	8	------> [ "$theme_show_exit_status" = 'yes' ]
8	8	------> echo -n $nonzero_exit_glyph
3	9	----> if [ "$fish_private_mode" ]...
6	6	-----> [ "$fish_private_mode" ]
3	8	----> if [ "$superuser" ]...
5	5	-----> [ "$superuser" ]
3	8	----> if [ "$bg_jobs" ]...
5	5	-----> [ "$bg_jobs" ]
42	169	--> __bobthefish_prompt_user
56	56	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
14	14	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
19	19	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
4	8	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
4	4	---> set -q display_user
5	5	---> set -q display_sudo_user
4	4	---> set -q display_hostname
14	29	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
11	23	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
13	26	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
11	23	--> __bobthefish_prompt_k8s_context
8	8	---> [ "$theme_display_k8s_context" = 'yes' ]
4	4	---> return
20	32	--> __bobthefish_prompt_aws_vault_profile
9	9	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
12	27	--> __bobthefish_prompt_nix
12	12	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
12	25	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
4	4	---> return
29	585	--> __bobthefish_prompt_rubies
8	8	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
10	525	---> if command -q rvm-prompt...
112	112	----> command -q rvm-prompt
98	98	----> command -q rbenv
208	208	----> type -q chruby
97	97	----> command -q asdf
11	11	---> [ -z "$ruby_version" ]
5	5	---> return
31	755	--> __bobthefish_prompt_golang $real_pwd
13	13	---> [ "$theme_display_go" = 'no' ]
13	13	---> set -l gomod_version "0"
11	11	---> set -l d $real_pwd
92	669	---> while not [ -z "$d" ]
...
8	8	----> not [ -z "$d" ]
4	16	----> if [ -e $d/go.mod ]...
12	12	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
63	132	----> set d (__bobthefish_dirname $d)
38	69	-----> __bobthefish_dirname $d
31	31	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
59	111	----> set d (__bobthefish_dirname $d)
29	52	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
56	98	----> set d (__bobthefish_dirname $d)
26	42	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
58	112	----> set d (__bobthefish_dirname $d)
27	54	-----> __bobthefish_dirname $d
27	27	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
7	18	---> if [ "$gomod_version" = "0" ]...
8	8	----> [ "$gomod_version" = "0" ]
3	3	----> return
15	56	--> __bobthefish_prompt_virtualfish
20	20	---> command -q python
18	18	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
12	26	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
15	984	--> __bobthefish_prompt_node
8	8	---> set -l should_show
54	952	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
24	880	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
17	17	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
7	20	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
89	804	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
27	68	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
69	125	------> set dir (__bobthefish_dirname "$dir")
34	56	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
16	53	------> for f in $files...
2	14	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
57	106	------> set dir (__bobthefish_dirname "$dir")
28	49	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
13	54	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
56	98	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	50	------> for f in $files...
2	13	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
55	102	------> set dir (__bobthefish_dirname "$dir")
26	47	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
64	2489	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	2425	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
87	87	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
23	2300	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
83	2221	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
2138	2138	------> command git rev-parse --show-toplevel 2>/dev/null
13	13	-----> [ -z "$git_toplevel" ]
15	35	-----> switch $real_pwd/...
15	15	------> echo $git_toplevel
5	5	------> return
69	105	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
20	36	---> __bobthefish_hg_project_dir $real_pwd
11	11	----> [ "$theme_display_hg" = 'yes' ]
5	5	----> return
62	96	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	34	---> __bobthefish_fossil_project_dir $real_pwd
11	11	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
67	18161	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
20	320	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
72	300	----> if builtin -q path...
22	22	-----> builtin -q path
68	206	-----> echo (path sort -r $argv)[1]
138	138	------> path sort -r $argv
56	17774	---> __bobthefish_prompt_git $git_root_dir $real_pwd
10	10	----> set -l dirty ''
55	3690	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
78	1578	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1500	1500	------> command git config --bool bash.showDirtyState 2>/dev/null
11	2047	-----> if [ "$show_dirty" != 'false' ]...
17	17	------> [ "$show_dirty" != 'false' ]
82	2001	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1902	1902	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
17	17	-------> echo -n "$git_dirty_glyph"
5	18	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
13	13	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
61	1754	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1693	1693	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
49	1302	----> set -l stashed (__bobthefish_git_stashed)
10	1253	-----> __bobthefish_git_stashed
19	1243	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1215	1215	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
43	1435	----> set -l ahead (__bobthefish_git_ahead)
15	1392	-----> __bobthefish_git_ahead
4	12	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
5	5	------> set -l behind 0
51	1329	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1278	1278	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
3	26	------> if [ $ahead -eq 1 ]...
10	10	-------> [ $ahead -eq 1 ]
13	13	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
7	2532	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
54	1094	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1040	1040	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1424	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
55	1396	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1341	1341	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	9	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
8	8	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
8	8	----> set -l flag_colors $color_repo
6	16	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
6	6	-----> set flag_colors $color_repo_dirty
32	814	----> __bobthefish_path_segment $git_root_dir project
7	7	-----> set -l segment_color $color_path
8	8	-----> set -l segment_basename_color $color_path_basename
2	11	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
34	136	-----> __bobthefish_start_segment $segment_color
7	7	------> set -l bg $argv[1]
5	5	------> set -e argv[1]
5	5	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
14	14	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
27	49	------> switch "$__bobthefish_current_bg"...
7	7	-------> set_color $__bobthefish_current_bg
8	8	-------> echo -ns $right_black_arrow_glyph ' '
7	7	-------> set_color $fg $argv
6	6	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
4	4	-----> set -l parent
12	568	-----> switch "$segment_dir"...
46	463	------> set parent (__bobthefish_pretty_parent "$segment_dir")
24	417	-------> __bobthefish_pretty_parent "$segment_dir"
6	6	--------> set -q fish_prompt_pwd_dir_length
5	5	--------> set -l fish_prompt_pwd_dir_length 1
9	9	--------> set -l real_home ~
50	328	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
115	278	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
47	72	----------> __bobthefish_escape_regex "$real_home"
25	25	-----------> string escape --style=regex "$str" 2>/dev/null
32	91	----------> __bobthefish_dirname $child_dir
59	59	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	11	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
4	10	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
24	24	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	93	------> set directory (__bobthefish_basename "$segment_dir")
30	47	-------> __bobthefish_basename "$segment_dir"
17	17	--------> string replace -r '^.*/' '' -- $argv
13	13	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
25	145	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
12	12	-----> set_color normal
16	16	-----> set_color -b $bg $fg $argv
33	62	-----> switch "$__bobthefish_current_bg"...
11	11	------> set_color $__bobthefish_current_bg
10	10	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
8	8	-----> set __bobthefish_current_bg $bg
58	5596	----> echo -ns (__bobthefish_git_branch) $flags ' '
21	5538	-----> __bobthefish_git_branch
77	1729	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1652	1652	-------> command git describe --tags --exact-match 2>/dev/null
100	1689	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1589	1589	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
26	2099	------> begin...
14	14	-------> [ -n "$theme_git_default_branches" ]
73	1873	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1800	1800	--------> git config init.defaultBranch
30	30	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
142	142	-------> contains $branch $theme_git_default_branches
10	10	-------> echo $branch_glyph
4	4	-------> return
10	10	----> set_color normal
14	384	----> if [ "$theme_git_worktree_support" != 'yes' ]...
10	10	-----> [ "$theme_git_worktree_support" != 'yes' ]
55	347	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
25	292	------> __bobthefish_project_pwd $git_root_dir $real_pwd
7	7	-------> set -q theme_project_dir_length
8	8	-------> set -l theme_project_dir_length 0
73	219	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
73	146	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
50	73	---------> __bobthefish_escape_regex "$project_root_dir"
23	23	----------> string escape --style=regex "$str" 2>/dev/null
8	33	-------> if [ $theme_project_dir_length -eq 0 ]...
12	12	--------> [ $theme_project_dir_length -eq 0 ]
9	9	--------> echo -n $project_dir
4	4	--------> return
4	10	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
3	3	-----> return
17	169	--> __bobthefish_finish_segments
36	76	---> if [ -n "$__bobthefish_current_bg" ]...
9	9	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
11	11	----> set_color $__bobthefish_current_bg
11	11	----> echo -ns $right_black_arrow_glyph ' '
14	62	---> if [ "$theme_newline_cursor" = 'yes' ]...
9	9	----> [ "$theme_newline_cursor" = 'yes' ]
8	8	----> echo -ens "\n"
11	11	----> set_color $fish_color_autosuggestion
6	20	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
9	9	-----> echo -ens "$theme_newline_prompt"
7	7	---> set_color normal
7	7	---> set __bobthefish_current_bg
11	167	> fish_right_prompt
9	34	-> if not set -q CONDA_LEFT_PROMPT...
7	7	--> not set -q CONDA_LEFT_PROMPT
9	18	--> __conda_add_prompt
3	9	---> if set -q CONDA_PROMPT_MODIFIER...
6	6	----> set -q CONDA_PROMPT_MODIFIER
15	122	-> __fish_right_prompt_orig
9	9	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	16	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
11	11	--> set_color $fish_color_autosuggestion
15	43	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
11	11	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
10	10	---> return
12	21	--> __bobthefish_timestamp
7	7	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
15	507	> fish_title
12	24	-> __bobthefish_title_user
4	12	--> if [ "$theme_title_display_user" = 'yes' ]...
8	8	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	459	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
6	446	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
39	435	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
10	10	----> argparse -n prompt_pwd $options -- $argv
3	8	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
5	5	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
19	332	----> for path in $argv...
43	51	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
41	56	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
15	15	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	206	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	124	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
41	98	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
5	5	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
41	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
41	69	> __fish_disable_bracketed_paste 'eza --icons --color'
28	28	-> printf "\e[?2004l"
13	30	> __fish_disable_focus 'eza --icons --color'
17	17	-> echo -n \e\[\?1004l
23	935	> fish_title eza\ --icons\ --color
17	40	-> __bobthefish_title_user
4	23	--> if [ "$theme_title_display_user" = 'yes' ]...
19	19	---> [ "$theme_title_display_user" = 'yes' ]
4	14	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
9	858	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
9	840	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
48	824	---> prompt_pwd
14	14	----> set -l options h/help d/dir-length= D/full-length-dirs=
18	18	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
9	9	----> set argv $PWD
18	18	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
6	6	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
28	667	----> for path in $argv...
80	98	-----> set -l realhome (string escape --style=regex -- ~)
18	18	------> string escape --style=regex -- ~
71	115	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
44	44	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
18	426	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
35	35	------> test "$fish_prompt_pwd_dir_length" -eq 0
9	9	------> set -l full
15	238	------> if test $fish_prompt_pwd_full_dirs -gt 0...
11	11	-------> test $fish_prompt_pwd_full_dirs -gt 0
78	195	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
91	117	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
26	26	---------> math $fish_prompt_pwd_full_dirs - 1
10	10	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
86	126	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
40	40	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
6227	6227	> eza --icons --color
49	102	> __fish_enable_focus 'eza --icons --color'
53	53	-> echo -n \e\[\?1004h
17	39	> __fish_enable_bracketed_paste
22	22	-> printf "\e[?2004h"
26	106	> fish_mode_prompt
14	14	-> [ "$theme_display_vi" != 'no' ]
60	60	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
6	6	-> return
26	22264	> fish_prompt
21	21	-> set -l last_status $status
5	14	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
17	25	-> return_last_status $last_status
8	8	--> return $argv
89	22178	-> __fish_prompt_orig
17	17	--> set -l last_status $status
4	20	--> if [ "$TERM" = 'dumb' ]...
16	16	---> [ "$TERM" = 'dumb' ]
189	880	--> __bobthefish_glyphs
14	14	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
10	10	---> set -x right_arrow_glyph       \uE0B1
8	8	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
9	9	---> set -x detached_glyph          \u27A6
9	9	---> set -x tag_glyph               \u2302
12	12	---> set -x nonzero_exit_glyph      '! '
12	12	---> set -x private_glyph           \uE0A2 ' '
10	10	---> set -x superuser_glyph         '$ '
9	9	---> set -x bg_job_glyph            '% '
11	11	---> set -x hg_glyph                \u263F
13	13	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
9	9	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
9	9	---> set -x nix_glyph               ''
11	11	---> set -x desk_glyph              \u25F2
11	11	---> set -x k8s_glyph               \u2388
22	22	---> set -x vagrant_running_glyph   \u2191
9	9	---> set -x vagrant_poweroff_glyph  \u2193
13	13	---> set -x vagrant_aborted_glyph   \u2715
8	8	---> set -x vagrant_saved_glyph     \u21E1
11	11	---> set -x vagrant_stopping_glyph  \u21E3
8	8	---> set -x vagrant_unknown_glyph   '!'
13	13	---> set -x git_dirty_glyph      '*'
13	13	---> set -x git_staged_glyph     '~'
10	10	---> set -x git_stashed_glyph    '$'
11	11	---> set -x git_untracked_glyph  '…'
8	8	---> set -x git_ahead_glyph      \u2191
16	16	---> set -x git_behind_glyph     \u2193
12	12	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
13	13	---> set -x git_plus_minus_glyph '±'
8	8	---> set -x fossil_glyph \U1F9B4
5	28	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
23	23	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
62	266	---> if [ "$theme_nerd_fonts" = "yes" ]...
9	9	----> [ "$theme_nerd_fonts" = "yes" ]
10	10	----> set private_glyph    \uF023 ' '
10	10	----> set branch_glyph     \uF418
10	10	----> set detached_glyph   \uF417
14	14	----> set tag_glyph        \uF412
9	9	----> set nix_glyph        \uF313 ' '
13	13	----> set virtualenv_glyph \uE73C ' '
8	8	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
9	9	----> set node_glyph       \uE718 ' '
8	8	----> set vagrant_running_glyph  \uF431
8	8	----> set vagrant_poweroff_glyph \uF433
8	8	----> set vagrant_aborted_glyph  \uF468
7	7	----> set vagrant_unknown_glyph  \uF421
11	11	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
11	11	----> set git_stashed_glyph    \uF0C6 ''
8	8	----> set git_untracked_glyph  \uF128 ''
7	7	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
6	6	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
6	6	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	12	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
9	9	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
59	662	--> __bobthefish_colors $theme_color_scheme
212	603	---> switch "$color_scheme"...
12	12	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
11	11	----> set -l blue     48b4fb 005faf 255e87
13	13	----> set -l orange   f6b117 unused 3a2a03
7	7	----> set -l brown    bf5e00 803f00 4d2600
10	10	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
9	9	----> set -l black    000000
11	11	----> set -l ruby_red af0000
8	8	----> set -l go_blue  00d7d7
12	12	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
15	15	----> set -x color_initial_segment_su       $white $green[2] --bold
14	14	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
13	13	----> set -x color_path                     $grey[3] $grey[2]
17	17	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
9	9	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
8	8	----> set -x color_repo                     $green[1] $green[3]
9	9	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
10	10	----> set -x color_repo_staged              $orange[1] $orange[3]
10	10	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
8	8	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
23	23	----> set -x color_vagrant                  $blue[1] $white --bold
10	10	----> set -x color_k8s                      $green[2] $white --bold
12	12	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
11	11	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
8	8	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
221	221	--> type -q bobthefish_colors
16	16	--> set -l __bobthefish_current_bg
80	173	--> set -l real_pwd (__bobthefish_pwd)
53	93	---> __bobthefish_pwd
40	40	----> builtin pwd -P 2>/dev/null
35	202	--> __bobthefish_prompt_status $last_status
8	8	---> set -l nonzero
6	6	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
45	100	---> if set -q AUTOJUMP_SOURCED...
7	7	----> set -q AUTOJUMP_SOURCED
10	48	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
14	14	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
24	24	-----> jobs -p >/dev/null
4	26	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
22	22	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
36	149	--> __bobthefish_prompt_user
41	41	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
22	22	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
5	10	---> if set -q display_user...
5	5	----> set -q display_user
4	8	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
4	4	---> set -q display_user
5	5	---> set -q display_sudo_user
4	4	---> set -q display_hostname
13	43	--> __bobthefish_prompt_screen
26	26	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
49	63	--> __bobthefish_prompt_vagrant
10	10	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
16	83	--> __bobthefish_prompt_docker
60	60	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
7	7	---> return
17	34	--> __bobthefish_prompt_k8s_context
12	12	---> [ "$theme_display_k8s_context" = 'yes' ]
5	5	---> return
13	27	--> __bobthefish_prompt_aws_vault_profile
10	10	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
4	4	---> return
14	34	--> __bobthefish_prompt_nix
14	14	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
6	6	---> return
15	41	--> __bobthefish_prompt_desk
21	21	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
5	5	---> return
20	492	--> __bobthefish_prompt_rubies
9	9	---> [ "$theme_display_ruby" = 'no' ]
10	10	---> set -l ruby_version
11	441	---> if command -q rvm-prompt...
128	128	----> command -q rvm-prompt
96	96	----> command -q rbenv
114	114	----> type -q chruby
92	92	----> command -q asdf
8	8	---> [ -z "$ruby_version" ]
4	4	---> return
21	788	--> __bobthefish_prompt_golang $real_pwd
9	9	---> [ "$theme_display_go" = 'no' ]
9	9	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
86	724	---> while not [ -z "$d" ]
...
8	8	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
76	172	----> set d (__bobthefish_dirname $d)
42	96	-----> __bobthefish_dirname $d
54	54	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
3	15	----> if [ -e $d/go.mod ]...
12	12	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
67	123	----> set d (__bobthefish_dirname $d)
33	56	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
65	111	----> set d (__bobthefish_dirname $d)
29	46	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
60	105	----> set d (__bobthefish_dirname $d)
26	45	-----> __bobthefish_dirname $d
19	19	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
8	17	---> if [ "$gomod_version" = "0" ]...
6	6	----> [ "$gomod_version" = "0" ]
3	3	----> return
14	48	--> __bobthefish_prompt_virtualfish
16	16	---> command -q python
15	15	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
11	23	--> __bobthefish_prompt_virtualgo
9	9	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
13	888	--> __bobthefish_prompt_node
7	7	---> set -l should_show
44	859	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
22	797	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
8	8	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
10	23	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
76	731	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
13	53	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
5	13	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
64	116	------> set dir (__bobthefish_dirname "$dir")
26	52	-------> __bobthefish_dirname "$dir"
26	26	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	53	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
52	93	------> set dir (__bobthefish_dirname "$dir")
25	41	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
13	50	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
54	98	------> set dir (__bobthefish_dirname "$dir")
24	44	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
12	49	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
47	85	------> set dir (__bobthefish_dirname "$dir")
24	38	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
3	3	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
46	2032	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	1986	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
68	68	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
18	1883	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
58	1826	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1768	1768	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
11	24	-----> switch $real_pwd/...
10	10	------> echo $git_toplevel
3	3	------> return
48	73	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
14	25	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
43	67	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
13	24	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
50	14893	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	140	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
47	126	----> if builtin -q path...
15	15	-----> builtin -q path
47	64	-----> echo (path sort -r $argv)[1]
17	17	------> path sort -r $argv
49	14703	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
57	2743	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
51	1166	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1115	1115	------> command git config --bool bash.showDirtyState 2>/dev/null
8	1513	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
56	1484	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1417	1417	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
11	11	-------> echo -n "$git_dirty_glyph"
3	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
52	1401	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1349	1349	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
50	1073	----> set -l stashed (__bobthefish_git_stashed)
10	1023	-----> __bobthefish_git_stashed
20	1013	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
985	985	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
46	1249	----> set -l ahead (__bobthefish_git_ahead)
18	1203	-----> __bobthefish_git_ahead
4	14	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
4	4	------> set -l behind 0
70	1139	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1069	1069	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	23	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
11	3088	----> if [ "$theme_display_git_untracked" != 'no' ]...
8	8	-----> [ "$theme_display_git_untracked" != 'no' ]
52	1458	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1406	1406	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1611	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
54	1583	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1529	1529	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
11	11	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
10	10	----> set -l flag_colors $color_repo
19	31	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
41	878	----> __bobthefish_path_segment $git_root_dir project
9	9	-----> set -l segment_color $color_path
12	12	-----> set -l segment_basename_color $color_path_basename
5	15	-----> if not [ -w "$segment_dir" ]...
10	10	------> not [ -w "$segment_dir" ]
48	170	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
9	9	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
6	6	------> set -e argv[1]
24	24	------> set_color normal
20	20	------> set_color -b $bg $fg $argv
30	39	------> switch "$__bobthefish_current_bg"...
9	9	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
5	5	-----> set -l parent
13	573	-----> switch "$segment_dir"...
48	468	------> set parent (__bobthefish_pretty_parent "$segment_dir")
36	420	-------> __bobthefish_pretty_parent "$segment_dir"
7	7	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
10	10	--------> set -l real_home ~
57	319	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
104	262	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
62	86	----------> __bobthefish_escape_regex "$real_home"
24	24	-----------> string escape --style=regex "$str" 2>/dev/null
33	72	----------> __bobthefish_dirname $child_dir
39	39	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	12	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
3	11	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
19	19	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	92	------> set directory (__bobthefish_basename "$segment_dir")
31	46	-------> __bobthefish_basename "$segment_dir"
15	15	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
25	117	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
28	50	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
47	3752	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3705	-----> __bobthefish_git_branch
55	1301	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1246	1246	-------> command git describe --tags --exact-match 2>/dev/null
60	1250	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1190	1190	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
16	1139	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
50	1083	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1033	1033	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
11	269	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
42	241	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
19	199	------> __bobthefish_project_pwd $git_root_dir $real_pwd
4	4	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
49	146	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
53	97	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
30	44	---------> __bobthefish_escape_regex "$project_root_dir"
14	14	----------> string escape --style=regex "$str" 2>/dev/null
7	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
2	2	-----> return
13	120	--> __bobthefish_finish_segments
20	48	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
7	7	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	48	---> if [ "$theme_newline_cursor" = 'yes' ]...
5	5	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
5	17	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
5	5	---> set __bobthefish_current_bg
9	132	> fish_right_prompt
9	30	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
15	93	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
14	29	--> __bobthefish_cmd_duration
5	5	---> [ "$theme_display_cmd_duration" = "no" ]
8	8	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
2	2	---> return
8	14	--> __bobthefish_timestamp
4	4	---> [ "$theme_display_date" = "no" ]
2	2	---> return
5	5	--> set_color normal
14	518	> fish_title
11	25	-> __bobthefish_title_user
5	14	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
7	470	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	457	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
42	446	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
2	6	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
3	3	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
17	342	----> for path in $argv...
42	50	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
43	70	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
27	27	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
10	205	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
4	4	------> set -l full
11	124	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	97	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	59	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
47	90	> __fish_disable_bracketed_paste 'eza --icons --color'
43	43	-> printf "\e[?2004l"
31	73	> __fish_disable_focus 'eza --icons --color'
42	42	-> echo -n \e\[\?1004l
32	1119	> fish_title eza\ --icons\ --color
24	59	-> __bobthefish_title_user
6	35	--> if [ "$theme_title_display_user" = 'yes' ]...
29	29	---> [ "$theme_title_display_user" = 'yes' ]
6	21	-> if [ "$theme_title_display_process" = 'yes' ]...
15	15	--> [ "$theme_title_display_process" = 'yes' ]
12	1007	-> if [ "$theme_title_display_path" != 'no' ]...
15	15	--> [ "$theme_title_display_path" != 'no' ]
10	980	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
11	11	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
68	959	---> prompt_pwd
20	20	----> set -l options h/help d/dir-length= D/full-length-dirs=
31	31	----> argparse -n prompt_pwd $options -- $argv
5	14	----> if set -q _flag_help...
9	9	-----> set -q _flag_help
8	8	----> set -q argv[1]
11	11	----> set argv $PWD
7	7	----> set -ql _flag_d
8	8	----> set -q fish_prompt_pwd_dir_length
10	10	----> set -l fish_prompt_pwd_dir_length 1
13	13	----> set -l fulldirs 0
8	8	----> set -ql _flag_D
9	9	----> set -q fish_prompt_pwd_full_dirs
11	11	----> set -l fish_prompt_pwd_full_dirs 1
35	741	----> for path in $argv...
101	131	-----> set -l realhome (string escape --style=regex -- ~)
30	30	------> string escape --style=regex -- ~
91	146	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
55	55	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
17	429	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
14	14	------> test "$fish_prompt_pwd_dir_length" -eq 0
7	7	------> set -l full
16	272	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
85	222	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
104	137	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
33	33	---------> math $fish_prompt_pwd_full_dirs - 1
15	15	-------> set tmp $all[1]
12	12	-------> set full $all[2..]
78	119	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
41	41	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
6251	6251	> eza --icons --color
46	95	> __fish_enable_focus 'eza --icons --color'
49	49	-> echo -n \e\[\?1004h
25	41	> __fish_enable_bracketed_paste
16	16	-> printf "\e[?2004h"
24	90	> fish_mode_prompt
19	19	-> [ "$theme_display_vi" != 'no' ]
42	42	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
26	22040	> fish_prompt
18	18	-> set -l last_status $status
5	11	-> if set -q CONDA_LEFT_PROMPT...
6	6	--> set -q CONDA_LEFT_PROMPT
13	20	-> return_last_status $last_status
7	7	--> return $argv
83	21965	-> __fish_prompt_orig
13	13	--> set -l last_status $status
4	18	--> if [ "$TERM" = 'dumb' ]...
14	14	---> [ "$TERM" = 'dumb' ]
163	726	--> __bobthefish_glyphs
12	12	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
8	8	---> set -x right_arrow_glyph       \uE0B1
7	7	---> set -x left_black_arrow_glyph  \uE0B2
7	7	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
7	7	---> set -x tag_glyph               \u2302
10	10	---> set -x nonzero_exit_glyph      '! '
9	9	---> set -x private_glyph           \uE0A2 ' '
7	7	---> set -x superuser_glyph         '$ '
10	10	---> set -x bg_job_glyph            '% '
8	8	---> set -x hg_glyph                \u263F
10	10	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
6	6	---> set -x nix_glyph               ''
9	9	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
11	11	---> set -x git_dirty_glyph      '*'
12	12	---> set -x git_staged_glyph     '~'
8	8	---> set -x git_stashed_glyph    '$'
9	9	---> set -x git_untracked_glyph  '…'
9	9	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
8	8	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
10	10	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
6	24	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
18	18	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
57	230	---> if [ "$theme_nerd_fonts" = "yes" ]...
8	8	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
8	8	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
10	10	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
8	8	----> set virtualenv_glyph \uE73C ' '
9	9	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
9	9	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
10	10	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
6	6	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
60	633	--> __bobthefish_colors $theme_color_scheme
209	573	---> switch "$color_scheme"...
11	11	----> set -l red      cc9999 ce000f 660000
9	9	----> set -l green    addc10 189303 0c4801
10	10	----> set -l blue     48b4fb 005faf 255e87
14	14	----> set -l orange   f6b117 unused 3a2a03
7	7	----> set -l brown    bf5e00 803f00 4d2600
11	11	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
8	8	----> set -l black    000000
8	8	----> set -l ruby_red af0000
9	9	----> set -l go_blue  00d7d7
12	12	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
12	12	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
11	11	----> set -x color_path                     $grey[3] $grey[2]
16	16	----> set -x color_path_basename            $grey[3] $white --bold
10	10	----> set -x color_path_nowrite             $red[3] $red[1]
10	10	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
12	12	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
8	8	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
8	8	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
166	166	--> type -q bobthefish_colors
8	8	--> set -l __bobthefish_current_bg
68	137	--> set -l real_pwd (__bobthefish_pwd)
37	69	---> __bobthefish_pwd
32	32	----> builtin pwd -P 2>/dev/null
51	179	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
27	66	---> if set -q AUTOJUMP_SOURCED...
6	6	----> set -q AUTOJUMP_SOURCED
7	33	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
8	8	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
18	18	-----> jobs -p >/dev/null
4	23	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
19	19	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
48	163	--> __bobthefish_prompt_user
47	47	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
21	21	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	9	---> if set -q display_user...
5	5	----> set -q display_user
3	7	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
4	4	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
13	28	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
14	26	--> __bobthefish_prompt_vagrant
8	8	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
4	4	---> return
12	24	--> __bobthefish_prompt_docker
9	9	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
8	20	--> __bobthefish_prompt_k8s_context
8	8	---> [ "$theme_display_k8s_context" = 'yes' ]
4	4	---> return
14	24	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
4	4	---> return
10	24	--> __bobthefish_prompt_nix
10	10	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
12	24	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
20	472	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
10	428	---> if command -q rvm-prompt...
111	111	----> command -q rvm-prompt
96	96	----> command -q rbenv
119	119	----> type -q chruby
92	92	----> command -q asdf
7	7	---> [ -z "$ruby_version" ]
3	3	---> return
20	868	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
90	806	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
74	164	----> set d (__bobthefish_dirname $d)
35	90	-----> __bobthefish_dirname $d
55	55	------> string replace -r '/[^/]+/?$' '' -- $argv
13	13	----> not [ -z "$d" ]
4	19	----> if [ -e $d/go.mod ]...
15	15	-----> [ -e $d/go.mod ]
10	10	----> [ "$d" = "/" ]
75	149	----> set d (__bobthefish_dirname $d)
43	74	-----> __bobthefish_dirname $d
31	31	------> string replace -r '/[^/]+/?$' '' -- $argv
12	12	----> not [ -z "$d" ]
5	20	----> if [ -e $d/go.mod ]...
15	15	-----> [ -e $d/go.mod ]
10	10	----> [ "$d" = "/" ]
75	141	----> set d (__bobthefish_dirname $d)
37	66	-----> __bobthefish_dirname $d
29	29	------> string replace -r '/[^/]+/?$' '' -- $argv
13	13	----> not [ -z "$d" ]
5	18	----> if [ -e $d/go.mod ]...
13	13	-----> [ -e $d/go.mod ]
11	11	----> [ "$d" = "/" ]
57	99	----> set d (__bobthefish_dirname $d)
26	42	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
13	50	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
16	16	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
11	23	--> __bobthefish_prompt_virtualgo
9	9	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
15	943	--> __bobthefish_prompt_node
7	7	---> set -l should_show
44	912	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
16	16	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
24	845	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
9	9	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
5	18	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
80	781	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
15	70	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	26	-------> if [ -e "$dir/$f" ]...
22	22	--------> [ -e "$dir/$f" ]
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
71	124	------> set dir (__bobthefish_dirname "$dir")
30	53	-------> __bobthefish_dirname "$dir"
23	23	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
15	54	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
14	14	------> [ "$dir" = '/' ]
56	102	------> set dir (__bobthefish_dirname "$dir")
26	46	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	52	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
55	96	------> set dir (__bobthefish_dirname "$dir")
26	41	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	50	------> for f in $files...
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
48	87	------> set dir (__bobthefish_dirname "$dir")
22	39	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
3	3	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
51	1989	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
21	1938	---> __bobthefish_git_project_dir $real_pwd
8	8	----> [ "$theme_display_git" = 'no' ]
72	72	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
18	1831	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
67	1772	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1705	1705	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
12	26	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
50	77	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	27	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
44	69	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
15	25	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
51	15045	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
15	166	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
50	151	----> if builtin -q path...
18	18	-----> builtin -q path
56	83	-----> echo (path sort -r $argv)[1]
27	27	------> path sort -r $argv
46	14828	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
48	2569	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
52	1194	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1142	1142	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1320	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
67	1289	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1209	1209	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
4	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
9	9	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
50	1440	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1390	1390	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
47	1180	----> set -l stashed (__bobthefish_git_stashed)
10	1133	-----> __bobthefish_git_stashed
20	1123	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1096	1096	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
44	1352	----> set -l ahead (__bobthefish_git_ahead)
16	1308	-----> __bobthefish_git_ahead
4	12	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
5	5	------> set -l behind 0
66	1247	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1181	1181	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
4	23	------> if [ $ahead -eq 1 ]...
13	13	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
12	3008	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
51	1263	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1212	1212	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1726	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
56	1698	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1642	1642	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
11	11	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
11	11	----> set -l flag_colors $color_repo
10	22	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
39	925	----> __bobthefish_path_segment $git_root_dir project
13	13	-----> set -l segment_color $color_path
11	11	-----> set -l segment_basename_color $color_path_basename
4	19	-----> if not [ -w "$segment_dir" ]...
15	15	------> not [ -w "$segment_dir" ]
49	173	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
9	9	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
29	29	------> set_color normal
17	17	------> set_color -b $bg $fg $argv
32	40	------> switch "$__bobthefish_current_bg"...
8	8	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
5	5	-----> set -l parent
26	612	-----> switch "$segment_dir"...
49	490	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	441	-------> __bobthefish_pretty_parent "$segment_dir"
10	10	--------> set -q fish_prompt_pwd_dir_length
7	7	--------> set -l fish_prompt_pwd_dir_length 1
11	11	--------> set -l real_home ~
57	331	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
111	274	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
57	85	----------> __bobthefish_escape_regex "$real_home"
28	28	-----------> string escape --style=regex "$str" 2>/dev/null
31	78	----------> __bobthefish_dirname $child_dir
47	47	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	13	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
5	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
7	7	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
24	24	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
45	96	------> set directory (__bobthefish_basename "$segment_dir")
33	51	-------> __bobthefish_basename "$segment_dir"
18	18	--------> string replace -r '^.*/' '' -- $argv
12	12	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
13	13	-----> echo -ns $directory ' '
23	108	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
4	4	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
25	46	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
45	3854	----> echo -ns (__bobthefish_git_branch) $flags ' '
13	3809	-----> __bobthefish_git_branch
51	1318	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1267	1267	-------> command git describe --tags --exact-match 2>/dev/null
66	1265	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1199	1199	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
14	1213	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
57	1155	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1098	1098	--------> git config init.defaultBranch
13	13	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
11	11	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
3	3	-------> return
7	7	----> set_color normal
12	270	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	240	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
19	199	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
48	144	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
53	96	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
28	43	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
8	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
4	8	-----> if [ "$project_pwd" ]...
4	4	------> [ "$project_pwd" ]
3	3	-----> return
14	133	--> __bobthefish_finish_segments
20	49	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	60	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
20	20	----> set_color $fish_color_autosuggestion
6	17	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
9	142	> fish_right_prompt
8	29	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
7	16	--> __conda_add_prompt
4	9	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
15	104	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
16	35	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
8	17	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
13	513	> fish_title
13	26	-> __bobthefish_title_user
4	13	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
6	465	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	453	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
40	442	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
5	5	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
17	341	----> for path in $argv...
42	50	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
43	69	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
26	26	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	205	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	124	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
41	98	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
15	15	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
63	96	> __fish_disable_bracketed_paste 'cd cache'
33	33	-> printf "\e[?2004l"
16	34	> __fish_disable_focus 'cd cache'
18	18	-> echo -n \e\[\?1004l
22	661	> fish_title cd\ cache
20	47	-> __bobthefish_title_user
6	27	--> if [ "$theme_title_display_user" = 'yes' ]...
21	21	---> [ "$theme_title_display_user" = 'yes' ]
4	16	-> if [ "$theme_title_display_process" = 'yes' ]...
12	12	--> [ "$theme_title_display_process" = 'yes' ]
8	576	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
4	562	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
38	551	---> prompt_pwd
25	25	----> set -l options h/help d/dir-length= D/full-length-dirs=
16	16	----> argparse -n prompt_pwd $options -- $argv
4	9	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
6	6	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
20	421	----> for path in $argv...
63	83	-----> set -l realhome (string escape --style=regex -- ~)
20	20	------> string escape --style=regex -- ~
46	79	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
33	33	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
13	239	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
9	9	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	143	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
46	115	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
50	69	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
19	19	---------> math $fish_prompt_pwd_full_dirs - 1
7	7	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
50	69	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
19	19	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
51	6261	> cd cache
9	9	-> set -l MAX_DIR_HIST 25
4	162	-> if test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)...
103	158	--> test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)
37	37	---> count $argv
11	11	---> test "$argv[1]" = "--"
7	7	---> echo 1
5	13	-> if status --is-command-substitution...
8	8	--> status --is-command-substitution
10	10	-> set -l previous $PWD
5	13	-> if test "$argv" = -...
8	8	--> test "$argv" = -
38	5904	-> builtin cd $argv
26	5866	--> __z_on_variable_pwd VARIABLE SET PWD
40	5840	---> __z_add
123	131	----> source /home/yoshimi/.config/fish/functions/__z_add.fish
8	8	-----> function __z_add -d "Add PATH to .z file"...
9	9	----> test -n "$fish_private_mode"
11	47	----> for i in $Z_EXCLUDE...
5	36	-----> if string match -r $i $PWD >/dev/null...
31	31	------> string match -r $i $PWD >/dev/null
60	1476	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
1416	1416	-----> mktemp $Z_DATA.XXXXXX
23	4137	----> if test -f $tmpfile...
12	12	-----> test -f $tmpfile
50	62	-----> set -l path (string replace --all \\ \\\\ $PWD)
12	12	------> string replace --all \\ \\\\ $PWD
1673	2679	-----> command awk -v path=$path -v now=(date +%s) -F "|" '
      BEGIN {
          rank[path] = 1
          time[path] = now
      }
      $2 >= 1 {
          if( $1 == path ) {
              rank[$1] = $2 + 1
              time[$1] = now
          }
          else {
              rank[$1] = $2
              time[$1] = $3
          }
          count += $2
      }
      END {
          if( count > 1000 ) {
              for( i in rank ) print i "|" 0.9*rank[i] "|" time[i] # aging
          }
          else for( i in rank ) print i "|" rank[i] "|" time[i]
      }
    ' $Z_DATA 2>/dev/null >$tmpfile
1006	1006	------> date +%s
3	14	-----> if test ! -z "$Z_OWNER"...
11	11	------> test ! -z "$Z_OWNER"
1347	1347	-----> command mv $tmpfile $Z_DATA
11	11	-> set -l cd_status $status
31	83	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
13	13	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
3	3	--> set -q dirprev
5	5	--> set -l dirprev
6	6	--> set -q dirprev[$MAX_DIR_HIST]
4	4	--> set -U -q dirprev
6	6	--> set -g -a dirprev $previous
3	3	--> set -U -q dirnext
5	5	--> set -e dirnext
3	3	--> set -U -q __fish_cd_direction
4	4	--> set -g __fish_cd_direction prev
5	5	-> return $cd_status
11	22	> __fish_enable_focus 'cd cache'
11	11	-> echo -n \e\[\?1004h
11	26	> __fish_enable_bracketed_paste
15	15	-> printf "\e[?2004h"
18	66	> fish_mode_prompt
12	12	-> [ "$theme_display_vi" != 'no' ]
33	33	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
3	3	-> return
18	21407	> fish_prompt
8	8	-> set -l last_status $status
3	7	-> if set -q CONDA_LEFT_PROMPT...
4	4	--> set -q CONDA_LEFT_PROMPT
12	17	-> return_last_status $last_status
5	5	--> return $argv
74	21357	-> __fish_prompt_orig
6	6	--> set -l last_status $status
4	11	--> if [ "$TERM" = 'dumb' ]...
7	7	---> [ "$TERM" = 'dumb' ]
141	540	--> __bobthefish_glyphs
6	6	---> set -x branch_glyph            \uE0A0
6	6	---> set -x right_black_arrow_glyph \uE0B0
6	6	---> set -x right_arrow_glyph       \uE0B1
5	5	---> set -x left_black_arrow_glyph  \uE0B2
5	5	---> set -x left_arrow_glyph        \uE0B3
5	5	---> set -x detached_glyph          \u27A6
6	6	---> set -x tag_glyph               \u2302
5	5	---> set -x nonzero_exit_glyph      '! '
6	6	---> set -x private_glyph           \uE0A2 ' '
6	6	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
5	5	---> set -x hg_glyph                \u263F
9	9	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
8	8	---> set -x virtualenv_glyph        \u25F0
5	5	---> set -x pypy_glyph              \u1D56
6	6	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
5	5	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
5	5	---> set -x vagrant_poweroff_glyph  \u2193
6	6	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
5	5	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
5	5	---> set -x git_dirty_glyph      '*'
7	7	---> set -x git_staged_glyph     '~'
6	6	---> set -x git_stashed_glyph    '$'
6	6	---> set -x git_untracked_glyph  '…'
6	6	---> set -x git_ahead_glyph      \u2191
5	5	---> set -x git_behind_glyph     \u2193
5	5	---> set -x git_plus_glyph       '+'
5	5	---> set -x git_minus_glyph      '-'
6	6	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
4	15	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
11	11	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
54	169	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
4	4	----> set detached_glyph   \uF417
5	5	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
5	5	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
5	5	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
4	4	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
5	5	----> set vagrant_unknown_glyph  \uF421
4	4	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
6	6	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
6	6	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
38	463	--> __bobthefish_colors $theme_color_scheme
196	425	---> switch "$color_scheme"...
6	6	----> set -l red      cc9999 ce000f 660000
5	5	----> set -l green    addc10 189303 0c4801
5	5	----> set -l blue     48b4fb 005faf 255e87
5	5	----> set -l orange   f6b117 unused 3a2a03
4	4	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
4	4	----> set -l black    000000
4	4	----> set -l ruby_red af0000
4	4	----> set -l go_blue  00d7d7
7	7	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
7	7	----> set -x color_initial_segment_su       $white $green[2] --bold
7	7	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
7	7	----> set -x color_path                     $grey[3] $grey[2]
7	7	----> set -x color_path_basename            $grey[3] $white --bold
5	5	----> set -x color_path_nowrite             $red[3] $red[1]
6	6	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
6	6	----> set -x color_repo_work_tree           $grey[3] $white --bold
7	7	----> set -x color_repo_dirty               $red[2] $white
6	6	----> set -x color_repo_staged              $orange[1] $orange[3]
6	6	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
6	6	----> set -x color_vagrant                  $blue[1] $white --bold
8	8	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
6	6	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
6	6	----> set -x color_screen                   $green[1] $white --bold
8	8	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
7	7	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
6	6	----> set -x color_virtualgo                $go_blue $black --bold
6	6	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
93	93	--> type -q bobthefish_colors
5	5	--> set -l __bobthefish_current_bg
46	88	--> set -l real_pwd (__bobthefish_pwd)
24	42	---> __bobthefish_pwd
18	18	----> builtin pwd -P 2>/dev/null
32	119	--> __bobthefish_prompt_status $last_status
4	4	---> set -l nonzero
3	3	---> set -l superuser
4	4	---> set -l bg_jobs
6	6	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
18	46	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
6	24	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
12	12	-----> jobs -p >/dev/null
2	15	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
13	13	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
26	97	--> __bobthefish_prompt_user
22	22	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
7	7	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
12	12	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	7	---> if set -q display_user...
3	3	----> set -q display_user
2	5	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
5	9	---> if set -q display_hostname...
4	4	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
9	19	--> __bobthefish_prompt_screen
8	8	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
2	2	---> return
9	18	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	20	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
9	17	--> __bobthefish_prompt_k8s_context
6	6	---> [ "$theme_display_k8s_context" = 'yes' ]
2	2	---> return
9	17	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
8	18	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
9	18	--> __bobthefish_prompt_desk
6	6	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
20	333	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
15	293	---> if command -q rvm-prompt...
71	71	----> command -q rvm-prompt
65	65	----> command -q rbenv
78	78	----> type -q chruby
64	64	----> command -q asdf
8	8	---> [ -z "$ruby_version" ]
2	2	---> return
23	727	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
69	670	---> while not [ -z "$d" ]
...
4	4	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
52	100	----> set d (__bobthefish_dirname $d)
26	48	-----> __bobthefish_dirname $d
22	22	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	75	----> set d (__bobthefish_dirname $d)
20	32	-----> __bobthefish_dirname $d
12	12	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
4	4	----> [ "$d" = "/" ]
48	101	----> set d (__bobthefish_dirname $d)
26	53	-----> __bobthefish_dirname $d
27	27	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
53	100	----> set d (__bobthefish_dirname $d)
29	47	-----> __bobthefish_dirname $d
18	18	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	15	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
50	99	----> set d (__bobthefish_dirname $d)
31	49	-----> __bobthefish_dirname $d
18	18	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
16	60	--> __bobthefish_prompt_virtualfish
16	16	---> command -q python
24	24	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
4	4	---> return
14	32	--> __bobthefish_prompt_virtualgo
13	13	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
5	5	---> return
15	1096	--> __bobthefish_prompt_node
9	9	---> set -l should_show
67	1063	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
11	11	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
4	4	----> [ "$theme_display_node" = 'yes' ]
27	981	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
10	10	-----> set -l dir "$argv[1]"
8	8	-----> set -l files $argv[2..-1]
7	28	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
16	16	------> test -z "$files"
107	905	-----> while [ "$dir" ]
...
7	7	------> [ "$dir" ]
20	71	------> for f in $files...
3	19	-------> if [ -e "$dir/$f" ]...
16	16	--------> [ -e "$dir/$f" ]
3	15	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
4	17	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
10	10	------> [ "$dir" = '/' ]
52	111	------> set dir (__bobthefish_dirname "$dir")
31	59	-------> __bobthefish_dirname "$dir"
28	28	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	55	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
5	15	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
2	12	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
53	96	------> set dir (__bobthefish_dirname "$dir")
24	43	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	51	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
51	101	------> set dir (__bobthefish_dirname "$dir")
28	50	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	58	------> for f in $files...
4	17	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
41	75	------> set dir (__bobthefish_dirname "$dir")
22	34	-------> __bobthefish_dirname "$dir"
12	12	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	39	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	8	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
37	70	------> set dir (__bobthefish_dirname "$dir")
19	33	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
3	3	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
46	1931	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
17	1885	---> __bobthefish_git_project_dir $real_pwd
6	6	----> [ "$theme_display_git" = 'no' ]
69	69	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
16	1788	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
66	1731	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1665	1665	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
12	26	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
50	75	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
15	25	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
43	74	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	31	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
49	15291	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
16	147	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
51	131	----> if builtin -q path...
15	15	-----> builtin -q path
49	65	-----> echo (path sort -r $argv)[1]
16	16	------> path sort -r $argv
58	15095	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
81	2895	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
69	1325	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1256	1256	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1479	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
57	1447	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1375	1375	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
3	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
62	1444	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1382	1382	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
52	1228	----> set -l stashed (__bobthefish_git_stashed)
10	1176	-----> __bobthefish_git_stashed
21	1166	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1136	1136	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
44	1218	----> set -l ahead (__bobthefish_git_ahead)
16	1174	-----> __bobthefish_git_ahead
3	11	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
4	4	------> set -l behind 0
62	1102	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1040	1040	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
7	36	------> if [ $ahead -eq 1 ]...
14	14	-------> [ $ahead -eq 1 ]
15	15	-------> [ $behind -eq 1 ]
8	8	----> set -l new ''
11	2635	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
54	1099	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1045	1045	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1518	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
63	1489	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1426	1426	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	11	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
12	12	----> set -l flags "$dirty$staged$stashed$ahead$new"
6	6	----> [ "$flags" ]
8	8	----> set flags " $flags"
12	12	----> set -l flag_colors $color_repo
9	23	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
10	10	-----> set flag_colors $color_repo_dirty
40	991	----> __bobthefish_path_segment $git_root_dir project
12	12	-----> set -l segment_color $color_path
14	14	-----> set -l segment_basename_color $color_path_basename
4	21	-----> if not [ -w "$segment_dir" ]...
17	17	------> not [ -w "$segment_dir" ]
54	219	-----> __bobthefish_start_segment $segment_color
11	11	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
8	8	------> set -l fg $argv[1]
7	7	------> set -e argv[1]
28	28	------> set_color normal
18	18	------> set_color -b $bg $fg $argv
66	76	------> switch "$__bobthefish_current_bg"...
10	10	-------> echo -n ' '
10	10	------> set __bobthefish_current_bg $bg
7	7	-----> set -l directory
6	6	-----> set -l parent
19	629	-----> switch "$segment_dir"...
52	527	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	475	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
8	8	--------> set -l fish_prompt_pwd_dir_length 1
12	12	--------> set -l real_home ~
64	362	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
115	298	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
59	90	----------> __bobthefish_escape_regex "$real_home"
31	31	-----------> string escape --style=regex "$str" 2>/dev/null
33	93	----------> __bobthefish_dirname $child_dir
60	60	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	13	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
4	13	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
9	9	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
26	26	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
39	83	------> set directory (__bobthefish_basename "$segment_dir")
28	44	-------> __bobthefish_basename "$segment_dir"
16	16	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
13	13	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
19	103	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
6	6	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
22	43	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
45	4021	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3976	-----> __bobthefish_git_branch
47	1259	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1212	1212	-------> command git describe --tags --exact-match 2>/dev/null
63	1404	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1341	1341	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
16	1298	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
51	1240	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1189	1189	--------> git config init.defaultBranch
13	13	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
11	11	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
11	416	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	255	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	214	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
49	157	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
56	108	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
36	52	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
9	26	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
7	141	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
5	122	------> if [ -w "$real_pwd" ]...
9	9	-------> [ -w "$real_pwd" ]
22	108	-------> __bobthefish_start_segment $color_path
5	5	--------> set -l bg $argv[1]
5	5	--------> set -e argv[1]
5	5	--------> set -l fg $argv[1]
4	4	--------> set -e argv[1]
8	8	--------> set_color normal
10	10	--------> set_color -b $bg $fg $argv
22	43	--------> switch "$__bobthefish_current_bg"...
7	7	---------> set_color $__bobthefish_current_bg
7	7	---------> echo -ns $right_black_arrow_glyph ' '
7	7	---------> set_color $fg $argv
6	6	--------> set __bobthefish_current_bg $bg
7	7	------> echo -ns $project_pwd ' '
3	3	-----> return
15	115	--> __bobthefish_finish_segments
19	44	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
6	6	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
10	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
5	5	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
8	8	----> set_color $fish_color_autosuggestion
5	16	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
8	140	> fish_right_prompt
9	31	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
9	17	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
16	101	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
13	31	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
8	17	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
6	6	--> set_color normal
15	510	> fish_title
11	23	-> __bobthefish_title_user
5	12	--> if [ "$theme_title_display_user" = 'yes' ]...
7	7	---> [ "$theme_title_display_user" = 'yes' ]
4	9	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
7	463	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
6	451	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
34	440	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
4	7	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
4	4	----> set -q argv[1]
7	7	----> set argv $PWD
5	5	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
6	6	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
4	4	----> set -l fish_prompt_pwd_full_dirs 1
18	339	----> for path in $argv...
42	50	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
37	55	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
18	18	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
19	216	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	126	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	98	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	58	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
17	17	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
41	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
38	65	> __fish_disable_bracketed_paste 'eza --icons --color'
27	27	-> printf "\e[?2004l"
12	32	> __fish_disable_focus 'eza --icons --color'
20	20	-> echo -n \e\[\?1004l
25	938	> fish_title eza\ --icons\ --color
16	38	-> __bobthefish_title_user
5	22	--> if [ "$theme_title_display_user" = 'yes' ]...
17	17	---> [ "$theme_title_display_user" = 'yes' ]
3	13	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
9	862	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
7	844	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
46	830	---> prompt_pwd
13	13	----> set -l options h/help d/dir-length= D/full-length-dirs=
17	17	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
7	7	----> set -q argv[1]
8	8	----> set argv $PWD
5	5	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
8	8	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
7	7	----> set -l fish_prompt_pwd_full_dirs 1
26	686	----> for path in $argv...
80	99	-----> set -l realhome (string escape --style=regex -- ~)
19	19	------> string escape --style=regex -- ~
110	171	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
61	61	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
17	390	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
18	18	------> test "$fish_prompt_pwd_dir_length" -eq 0
10	10	------> set -l full
14	229	------> if test $fish_prompt_pwd_full_dirs -gt 0...
12	12	-------> test $fish_prompt_pwd_full_dirs -gt 0
83	187	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
79	104	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
25	25	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
87	116	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
29	29	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
5661	5661	> eza --icons --color
54	120	> __fish_enable_focus 'eza --icons --color'
66	66	-> echo -n \e\[\?1004h
24	44	> __fish_enable_bracketed_paste
20	20	-> printf "\e[?2004h"
34	140	> fish_mode_prompt
30	30	-> [ "$theme_display_vi" != 'no' ]
70	70	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
6	6	-> return
32	22907	> fish_prompt
26	26	-> set -l last_status $status
5	14	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
21	32	-> return_last_status $last_status
11	11	--> return $argv
87	22803	-> __fish_prompt_orig
13	13	--> set -l last_status $status
4	27	--> if [ "$TERM" = 'dumb' ]...
23	23	---> [ "$TERM" = 'dumb' ]
268	927	--> __bobthefish_glyphs
16	16	---> set -x branch_glyph            \uE0A0
11	11	---> set -x right_black_arrow_glyph \uE0B0
11	11	---> set -x right_arrow_glyph       \uE0B1
9	9	---> set -x left_black_arrow_glyph  \uE0B2
12	12	---> set -x left_arrow_glyph        \uE0B3
10	10	---> set -x detached_glyph          \u27A6
10	10	---> set -x tag_glyph               \u2302
12	12	---> set -x nonzero_exit_glyph      '! '
11	11	---> set -x private_glyph           \uE0A2 ' '
10	10	---> set -x superuser_glyph         '$ '
9	9	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
12	12	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
10	10	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
8	8	---> set -x vagrant_poweroff_glyph  \u2193
9	9	---> set -x vagrant_aborted_glyph   \u2715
6	6	---> set -x vagrant_saved_glyph     \u21E1
9	9	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
9	9	---> set -x git_dirty_glyph      '*'
11	11	---> set -x git_staged_glyph     '~'
11	11	---> set -x git_stashed_glyph    '$'
12	12	---> set -x git_untracked_glyph  '…'
9	9	---> set -x git_ahead_glyph      \u2191
22	22	---> set -x git_behind_glyph     \u2193
19	19	---> set -x git_plus_glyph       '+'
16	16	---> set -x git_minus_glyph      '-'
16	16	---> set -x git_plus_minus_glyph '±'
12	12	---> set -x fossil_glyph \U1F9B4
5	34	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
29	29	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
59	228	---> if [ "$theme_nerd_fonts" = "yes" ]...
9	9	----> [ "$theme_nerd_fonts" = "yes" ]
9	9	----> set private_glyph    \uF023 ' '
9	9	----> set branch_glyph     \uF418
8	8	----> set detached_glyph   \uF417
12	12	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
9	9	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
5	5	----> set vagrant_aborted_glyph  \uF468
5	5	----> set vagrant_unknown_glyph  \uF421
7	7	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
10	10	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
5	5	----> set git_plus_minus_glyph \uF0DC
5	12	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
61	600	--> __bobthefish_colors $theme_color_scheme
172	539	---> switch "$color_scheme"...
14	14	----> set -l red      cc9999 ce000f 660000
6	6	----> set -l green    addc10 189303 0c4801
9	9	----> set -l blue     48b4fb 005faf 255e87
9	9	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
6	6	----> set -l grey     cccccc 999999 333333
7	7	----> set -l white    ffffff
9	9	----> set -l black    000000
8	8	----> set -l ruby_red af0000
7	7	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
9	9	----> set -x color_initial_segment_private  $white $grey[3]
28	28	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
17	17	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
9	9	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
11	11	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
8	8	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
12	12	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
9	9	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
10	10	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
8	8	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
156	156	--> type -q bobthefish_colors
8	8	--> set -l __bobthefish_current_bg
82	170	--> set -l real_pwd (__bobthefish_pwd)
48	88	---> __bobthefish_pwd
40	40	----> builtin pwd -P 2>/dev/null
42	201	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
4	4	---> set -l superuser
5	5	---> set -l bg_jobs
13	13	---> [ $last_status -ne 0 ]
24	24	---> [ -w / -o -w /private/ ]
36	83	---> if set -q AUTOJUMP_SOURCED...
10	10	----> set -q AUTOJUMP_SOURCED
8	37	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
10	10	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
19	19	-----> jobs -p >/dev/null
3	23	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
20	20	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
39	165	--> __bobthefish_prompt_user
43	43	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
12	12	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
33	33	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	9	---> if set -q display_user...
6	6	----> set -q display_user
4	8	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	8	---> if set -q display_hostname...
5	5	----> set -q display_hostname
5	5	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
13	28	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
13	25	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
11	24	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
10	20	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
15	26	--> __bobthefish_prompt_aws_vault_profile
8	8	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
10	23	--> __bobthefish_prompt_nix
9	9	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
12	23	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
19	526	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
12	480	---> if command -q rvm-prompt...
129	129	----> command -q rvm-prompt
108	108	----> command -q rbenv
136	136	----> type -q chruby
95	95	----> command -q asdf
9	9	---> [ -z "$ruby_version" ]
4	4	---> return
25	933	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
9	9	---> set -l gomod_version "0"
8	8	---> set -l d $real_pwd
92	860	---> while not [ -z "$d" ]
...
8	8	----> not [ -z "$d" ]
5	16	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
73	171	----> set d (__bobthefish_dirname $d)
52	98	-----> __bobthefish_dirname $d
46	46	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
61	117	----> set d (__bobthefish_dirname $d)
31	56	-----> __bobthefish_dirname $d
25	25	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
5	15	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
57	99	----> set d (__bobthefish_dirname $d)
26	42	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
52	103	----> set d (__bobthefish_dirname $d)
25	51	-----> __bobthefish_dirname $d
26	26	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	13	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
72	114	----> set d (__bobthefish_dirname $d)
22	42	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
17	17	----> not [ -z "$d" ]
7	23	---> if [ "$gomod_version" = "0" ]...
11	11	----> [ "$gomod_version" = "0" ]
5	5	----> return
17	59	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
19	19	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
5	5	---> return
22	47	--> __bobthefish_prompt_virtualgo
20	20	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
5	5	---> return
17	1117	--> __bobthefish_prompt_node
9	9	---> set -l should_show
49	1082	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
11	11	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
26	1016	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
10	10	-----> set -l dir "$argv[1]"
11	11	-----> set -l files $argv[2..-1]
7	19	-----> if test -z "$dir"...
6	6	------> test -z "$dir"
6	6	------> test -z "$files"
106	946	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
15	56	------> for f in $files...
3	16	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
66	122	------> set dir (__bobthefish_dirname "$dir")
32	56	-------> __bobthefish_dirname "$dir"
24	24	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	54	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
50	94	------> set dir (__bobthefish_dirname "$dir")
25	44	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
17	73	------> for f in $files...
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
6	27	-------> if [ -e "$dir/$f" ]...
21	21	--------> [ -e "$dir/$f" ]
12	12	------> [ "$dir" = '/' ]
59	98	------> set dir (__bobthefish_dirname "$dir")
25	39	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
12	48	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
50	93	------> set dir (__bobthefish_dirname "$dir")
21	43	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
12	48	------> for f in $files...
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	11	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
47	83	------> set dir (__bobthefish_dirname "$dir")
23	36	-------> __bobthefish_dirname "$dir"
13	13	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
3	3	---> return
47	1939	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
22	1892	---> __bobthefish_git_project_dir $real_pwd
8	8	----> [ "$theme_display_git" = 'no' ]
82	82	----> command -q git
7	7	----> set -q theme_vcs_ignore_paths
15	1773	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
60	1720	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1660	1660	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
10	22	-----> switch $real_pwd/...
9	9	------> echo $git_toplevel
3	3	------> return
43	67	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
14	24	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
56	78	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
14	22	---> __bobthefish_fossil_project_dir $real_pwd
6	6	----> [ "$theme_display_fossil" = 'yes' ]
2	2	----> return
48	15382	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
13	129	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
41	116	----> if builtin -q path...
13	13	-----> builtin -q path
45	62	-----> echo (path sort -r $argv)[1]
17	17	------> path sort -r $argv
43	15205	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
41	2357	----> if [ "$theme_display_git_dirty" != 'no' ]...
6	6	-----> [ "$theme_display_git_dirty" != 'no' ]
51	1039	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
988	988	------> command git config --bool bash.showDirtyState 2>/dev/null
8	1271	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
55	1241	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1173	1173	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
4	14	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
65	1445	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1380	1380	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
55	1296	----> set -l stashed (__bobthefish_git_stashed)
12	1241	-----> __bobthefish_git_stashed
29	1229	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
11	11	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1189	1189	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
40	1338	----> set -l ahead (__bobthefish_git_ahead)
18	1298	-----> __bobthefish_git_ahead
4	12	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
6	6	------> set -l behind 0
58	1232	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1174	1174	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	25	------> if [ $ahead -eq 1 ]...
14	14	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
5	5	----> set -l new ''
11	3146	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
51	1426	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1375	1375	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
10	1702	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
55	1674	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1619	1619	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	9	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
10	10	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
9	9	----> set -l flag_colors $color_repo
8	21	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
39	896	----> __bobthefish_path_segment $git_root_dir project
12	12	-----> set -l segment_color $color_path
12	12	-----> set -l segment_basename_color $color_path_basename
2	14	-----> if not [ -w "$segment_dir" ]...
12	12	------> not [ -w "$segment_dir" ]
48	180	-----> __bobthefish_start_segment $segment_color
10	10	------> set -l bg $argv[1]
13	13	------> set -e argv[1]
10	10	------> set -l fg $argv[1]
4	4	------> set -e argv[1]
32	32	------> set_color normal
18	18	------> set_color -b $bg $fg $argv
31	38	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
7	7	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
6	6	-----> set -l parent
16	581	-----> switch "$segment_dir"...
46	475	------> set parent (__bobthefish_pretty_parent "$segment_dir")
28	429	-------> __bobthefish_pretty_parent "$segment_dir"
7	7	--------> set -q fish_prompt_pwd_dir_length
7	7	--------> set -l fish_prompt_pwd_dir_length 1
14	14	--------> set -l real_home ~
56	327	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
113	271	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
58	83	----------> __bobthefish_escape_regex "$real_home"
25	25	-----------> string escape --style=regex "$str" 2>/dev/null
29	75	----------> __bobthefish_dirname $child_dir
46	46	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	11	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
5	13	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
8	8	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
22	22	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
45	90	------> set directory (__bobthefish_basename "$segment_dir")
30	45	-------> __bobthefish_basename "$segment_dir"
15	15	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
23	124	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
8	8	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
32	54	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
7	7	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
44	4058	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	4014	-----> __bobthefish_git_branch
52	1704	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1652	1652	-------> command git describe --tags --exact-match 2>/dev/null
55	1138	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1083	1083	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1157	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
49	1099	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1050	1050	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
11	11	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
7	7	----> set_color normal
12	431	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
52	255	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	203	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
49	145	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
53	96	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
27	43	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
10	27	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
8	155	-----> if [ "$project_pwd" ]...
4	4	------> [ "$project_pwd" ]
7	134	------> if [ -w "$real_pwd" ]...
8	8	-------> [ -w "$real_pwd" ]
21	119	-------> __bobthefish_start_segment $color_path
6	6	--------> set -l bg $argv[1]
5	5	--------> set -e argv[1]
6	6	--------> set -l fg $argv[1]
4	4	--------> set -e argv[1]
7	7	--------> set_color normal
12	12	--------> set_color -b $bg $fg $argv
27	51	--------> switch "$__bobthefish_current_bg"...
8	8	---------> set_color $__bobthefish_current_bg
8	8	---------> echo -ns $right_black_arrow_glyph ' '
8	8	---------> set_color $fg $argv
7	7	--------> set __bobthefish_current_bg $bg
9	9	------> echo -ns $project_pwd ' '
3	3	-----> return
15	132	--> __bobthefish_finish_segments
22	52	---> if [ -n "$__bobthefish_current_bg" ]...
7	7	----> [ -n "$__bobthefish_current_bg" ]
7	7	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
11	53	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
6	18	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
6	6	---> set __bobthefish_current_bg
10	159	> fish_right_prompt
9	33	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	18	--> __conda_add_prompt
5	10	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
19	116	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	15	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
11	11	--> set_color $fish_color_autosuggestion
17	37	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
8	18	--> __bobthefish_timestamp
7	7	---> [ "$theme_display_date" = "no" ]
3	3	---> return
8	8	--> set_color normal
15	568	> fish_title
12	27	-> __bobthefish_title_user
3	15	--> if [ "$theme_title_display_user" = 'yes' ]...
12	12	---> [ "$theme_title_display_user" = 'yes' ]
4	10	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
8	516	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
7	502	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
43	489	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
12	12	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
5	5	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
18	18	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
19	361	----> for path in $argv...
48	59	-----> set -l realhome (string escape --style=regex -- ~)
11	11	------> string escape --style=regex -- ~
47	64	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
17	17	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	219	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	137	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
46	110	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
46	64	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
18	18	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	58	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
15	15	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
77	126	> __fish_disable_bracketed_paste 'eza --icons --color'
49	49	-> printf "\e[?2004l"
25	53	> __fish_disable_focus 'eza --icons --color'
28	28	-> echo -n \e\[\?1004l
25	883	> fish_title eza\ --icons\ --color
21	57	-> __bobthefish_title_user
7	36	--> if [ "$theme_title_display_user" = 'yes' ]...
29	29	---> [ "$theme_title_display_user" = 'yes' ]
4	15	-> if [ "$theme_title_display_process" = 'yes' ]...
11	11	--> [ "$theme_title_display_process" = 'yes' ]
10	786	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
6	767	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
8	8	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
45	753	---> prompt_pwd
14	14	----> set -l options h/help d/dir-length= D/full-length-dirs=
19	19	----> argparse -n prompt_pwd $options -- $argv
4	11	----> if set -q _flag_help...
7	7	-----> set -q _flag_help
6	6	----> set -q argv[1]
8	8	----> set argv $PWD
5	5	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
6	6	----> set -ql _flag_D
8	8	----> set -q fish_prompt_pwd_full_dirs
8	8	----> set -l fish_prompt_pwd_full_dirs 1
35	602	----> for path in $argv...
96	128	-----> set -l realhome (string escape --style=regex -- ~)
32	32	------> string escape --style=regex -- ~
60	126	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
66	66	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	313	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
18	18	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
12	184	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
51	149	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
56	98	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
42	42	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
56	91	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
35	35	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
4936	4936	> eza --icons --color
48	103	> __fish_enable_focus 'eza --icons --color'
55	55	-> echo -n \e\[\?1004h
22	41	> __fish_enable_bracketed_paste
19	19	-> printf "\e[?2004h"
24	101	> fish_mode_prompt
17	17	-> [ "$theme_display_vi" != 'no' ]
55	55	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
24	22253	> fish_prompt
19	19	-> set -l last_status $status
4	13	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
21	29	-> return_last_status $last_status
8	8	--> return $argv
80	22168	-> __fish_prompt_orig
14	14	--> set -l last_status $status
5	19	--> if [ "$TERM" = 'dumb' ]...
14	14	---> [ "$TERM" = 'dumb' ]
232	711	--> __bobthefish_glyphs
15	15	---> set -x branch_glyph            \uE0A0
11	11	---> set -x right_black_arrow_glyph \uE0B0
10	10	---> set -x right_arrow_glyph       \uE0B1
9	9	---> set -x left_black_arrow_glyph  \uE0B2
10	10	---> set -x left_arrow_glyph        \uE0B3
10	10	---> set -x detached_glyph          \u27A6
9	9	---> set -x tag_glyph               \u2302
10	10	---> set -x nonzero_exit_glyph      '! '
11	11	---> set -x private_glyph           \uE0A2 ' '
8	8	---> set -x superuser_glyph         '$ '
7	7	---> set -x bg_job_glyph            '% '
7	7	---> set -x hg_glyph                \u263F
9	9	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
8	8	---> set -x vagrant_stopping_glyph  \u21E3
5	5	---> set -x vagrant_unknown_glyph   '!'
7	7	---> set -x git_dirty_glyph      '*'
8	8	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
6	6	---> set -x git_untracked_glyph  '…'
6	6	---> set -x git_ahead_glyph      \u2191
10	10	---> set -x git_behind_glyph     \u2193
6	6	---> set -x git_plus_glyph       '+'
11	11	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
5	5	---> set -x fossil_glyph \U1F9B4
3	17	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
14	14	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
49	163	---> if [ "$theme_nerd_fonts" = "yes" ]...
5	5	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
4	4	----> set detached_glyph   \uF417
8	8	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
4	4	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
5	5	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
4	4	----> set vagrant_poweroff_glyph \uF433
4	4	----> set vagrant_aborted_glyph  \uF468
3	3	----> set vagrant_unknown_glyph  \uF421
6	6	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
6	6	----> set git_stashed_glyph    \uF0C6 ''
4	4	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
4	10	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
6	6	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
58	507	--> __bobthefish_colors $theme_color_scheme
189	449	---> switch "$color_scheme"...
18	18	----> set -l red      cc9999 ce000f 660000
8	8	----> set -l green    addc10 189303 0c4801
11	11	----> set -l blue     48b4fb 005faf 255e87
6	6	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
4	4	----> set -l white    ffffff
8	8	----> set -l black    000000
4	4	----> set -l ruby_red af0000
4	4	----> set -l go_blue  00d7d7
8	8	----> set -x color_initial_segment_exit     $white $red[2] --bold
7	7	----> set -x color_initial_segment_private  $white $grey[3]
8	8	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
7	7	----> set -x color_path                     $grey[3] $grey[2]
8	8	----> set -x color_path_basename            $grey[3] $white --bold
5	5	----> set -x color_path_nowrite             $red[3] $red[1]
6	6	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
5	5	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
7	7	----> set -x color_repo_dirty               $red[2] $white
7	7	----> set -x color_repo_staged              $orange[1] $orange[3]
6	6	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
6	6	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
7	7	----> set -x color_vagrant                  $blue[1] $white --bold
6	6	----> set -x color_k8s                      $green[2] $white --bold
6	6	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
8	8	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
6	6	----> set -x color_hostname                 $grey[1] $blue[3]
6	6	----> set -x color_screen                   $green[1] $white --bold
6	6	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
8	8	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
5	5	----> set -x color_virtualgo                $go_blue $black --bold
5	5	----> set -x color_desk                     $blue[2] $grey[1] --bold
7	7	----> set -x color_nix                      $blue[2] $grey[1] --bold
135	135	--> type -q bobthefish_colors
5	5	--> set -l __bobthefish_current_bg
54	106	--> set -l real_pwd (__bobthefish_pwd)
27	52	---> __bobthefish_pwd
25	25	----> builtin pwd -P 2>/dev/null
24	118	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
2	2	---> set -l superuser
4	4	---> set -l bg_jobs
6	6	---> [ $last_status -ne 0 ]
7	7	---> [ -w / -o -w /private/ ]
25	53	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
6	24	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
6	6	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
12	12	-----> jobs -p >/dev/null
5	17	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
12	12	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
22	102	--> __bobthefish_prompt_user
31	31	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
6	6	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
13	13	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	8	---> if set -q display_user...
4	4	----> set -q display_user
4	7	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
3	5	---> if set -q display_hostname...
2	2	----> set -q display_hostname
4	4	---> set -q display_user
2	2	---> set -q display_sudo_user
4	4	---> set -q display_hostname
9	18	--> __bobthefish_prompt_screen
7	7	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
2	2	---> return
8	17	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
8	18	--> __bobthefish_prompt_docker
7	7	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
8	16	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
7	17	--> __bobthefish_prompt_aws_vault_profile
7	7	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
7	17	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
8	17	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
15	367	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
8	335	---> if command -q rvm-prompt...
95	95	----> command -q rvm-prompt
72	72	----> command -q rbenv
91	91	----> type -q chruby
69	69	----> command -q asdf
5	5	---> [ -z "$ruby_version" ]
2	2	---> return
18	650	--> __bobthefish_prompt_golang $real_pwd
7	7	---> [ "$theme_display_go" = 'no' ]
6	6	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
82	602	---> while not [ -z "$d" ]
...
5	5	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
51	122	----> set d (__bobthefish_dirname $d)
29	71	-----> __bobthefish_dirname $d
42	42	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	79	----> set d (__bobthefish_dirname $d)
20	36	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
40	69	----> set d (__bobthefish_dirname $d)
18	29	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	10	----> if [ -e $d/go.mod ]...
6	6	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
39	74	----> set d (__bobthefish_dirname $d)
22	35	-----> __bobthefish_dirname $d
13	13	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
2	9	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
38	65	----> set d (__bobthefish_dirname $d)
17	27	-----> __bobthefish_dirname $d
10	10	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
6	12	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
1	1	----> return
14	52	--> __bobthefish_prompt_virtualfish
21	21	---> command -q python
15	15	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
2	2	---> return
8	19	--> __bobthefish_prompt_virtualgo
8	8	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
12	804	--> __bobthefish_prompt_node
5	5	---> set -l should_show
34	780	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
13	13	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
5	5	----> [ "$theme_display_node" = 'yes' ]
19	728	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
6	6	-----> set -l dir "$argv[1]"
7	7	-----> set -l files $argv[2..-1]
4	15	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
6	6	------> test -z "$files"
68	677	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
9	42	------> for f in $files...
2	10	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
41	77	------> set dir (__bobthefish_dirname "$dir")
19	36	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
10	40	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
2	8	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	73	------> set dir (__bobthefish_dirname "$dir")
18	33	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
12	41	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
39	68	------> set dir (__bobthefish_dirname "$dir")
18	29	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
9	39	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
39	71	------> set dir (__bobthefish_dirname "$dir")
18	32	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
10	38	------> for f in $files...
2	10	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	9	-------> if [ -e "$dir/$f" ]...
5	5	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
38	66	------> set dir (__bobthefish_dirname "$dir")
17	28	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
4	4	-----> return 1
5	5	---> [ -z "$should_show" ]
2	2	---> return
56	2088	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
20	2032	---> __bobthefish_git_project_dir $real_pwd
7	7	----> [ "$theme_display_git" = 'no' ]
60	60	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
18	1940	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
97	1881	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1784	1784	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
12	26	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
53	93	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
17	40	---> __bobthefish_hg_project_dir $real_pwd
20	20	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
44	71	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
16	27	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
46	15975	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
17	171	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
61	154	----> if builtin -q path...
23	23	-----> builtin -q path
50	70	-----> echo (path sort -r $argv)[1]
20	20	------> path sort -r $argv
52	15758	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
59	2781	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
66	1261	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1195	1195	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1454	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
78	1418	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1323	1323	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
17	17	-------> echo -n "$git_dirty_glyph"
4	17	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
13	13	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
64	1353	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1289	1289	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
46	1089	----> set -l stashed (__bobthefish_git_stashed)
11	1043	-----> __bobthefish_git_stashed
20	1032	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1002	1002	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
44	1209	----> set -l ahead (__bobthefish_git_ahead)
17	1165	-----> __bobthefish_git_ahead
2	10	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
6	6	------> set -l behind 0
61	1103	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1042	1042	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	23	------> if [ $ahead -eq 1 ]...
13	13	-------> [ $ahead -eq 1 ]
4	4	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
12	2455	----> if [ "$theme_display_git_untracked" != 'no' ]...
7	7	-----> [ "$theme_display_git_untracked" != 'no' ]
51	1014	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
963	963	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
8	1422	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
64	1395	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1331	1331	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
13	13	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
13	13	----> set -l flag_colors $color_repo
6	19	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
46	1235	----> __bobthefish_path_segment $git_root_dir project
13	13	-----> set -l segment_color $color_path
15	15	-----> set -l segment_basename_color $color_path_basename
4	18	-----> if not [ -w "$segment_dir" ]...
14	14	------> not [ -w "$segment_dir" ]
62	235	-----> __bobthefish_start_segment $segment_color
13	13	------> set -l bg $argv[1]
9	9	------> set -e argv[1]
10	10	------> set -l fg $argv[1]
6	6	------> set -e argv[1]
38	38	------> set_color normal
22	22	------> set_color -b $bg $fg $argv
45	59	------> switch "$__bobthefish_current_bg"...
14	14	-------> echo -n ' '
16	16	------> set __bobthefish_current_bg $bg
7	7	-----> set -l directory
7	7	-----> set -l parent
20	837	-----> switch "$segment_dir"...
68	709	------> set parent (__bobthefish_pretty_parent "$segment_dir")
39	641	-------> __bobthefish_pretty_parent "$segment_dir"
9	9	--------> set -q fish_prompt_pwd_dir_length
10	10	--------> set -l fish_prompt_pwd_dir_length 1
20	20	--------> set -l real_home ~
80	495	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
174	415	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
79	113	----------> __bobthefish_escape_regex "$real_home"
34	34	-----------> string escape --style=regex "$str" 2>/dev/null
47	128	----------> __bobthefish_dirname $child_dir
81	81	-----------> string replace -r '/[^/]+/?$' '' -- $argv
5	15	--------> if [ -z "$parent_dir" ]...
10	10	---------> [ -z "$parent_dir" ]
4	17	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
13	13	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
54	108	------> set directory (__bobthefish_basename "$segment_dir")
34	54	-------> __bobthefish_basename "$segment_dir"
20	20	--------> string replace -r '^.*/' '' -- $argv
17	17	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
12	12	-----> echo -n $parent
19	19	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
25	135	----> __bobthefish_start_segment $flag_colors
8	8	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
6	6	-----> set -e argv[1]
8	8	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
29	57	-----> switch "$__bobthefish_current_bg"...
9	9	------> set_color $__bobthefish_current_bg
11	11	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
60	4848	----> echo -ns (__bobthefish_git_branch) $flags ' '
21	4788	-----> __bobthefish_git_branch
72	2239	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
2167	2167	-------> command git describe --tags --exact-match 2>/dev/null
89	1344	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1255	1255	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
19	1184	------> begin...
12	12	-------> [ -n "$theme_git_default_branches" ]
77	1100	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1023	1023	--------> git config init.defaultBranch
20	20	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
18	18	-------> contains $branch $theme_git_default_branches
12	12	-------> echo $branch_glyph
3	3	-------> return
18	18	----> set_color normal
14	515	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
46	318	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
27	272	------> __bobthefish_project_pwd $git_root_dir $real_pwd
7	7	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
55	204	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
68	149	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
56	81	---------> __bobthefish_escape_regex "$project_root_dir"
25	25	----------> string escape --style=regex "$str" 2>/dev/null
8	28	-------> if [ $theme_project_dir_length -eq 0 ]...
9	9	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
6	172	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
6	154	------> if [ -w "$real_pwd" ]...
9	9	-------> [ -w "$real_pwd" ]
37	139	-------> __bobthefish_start_segment $color_path
7	7	--------> set -l bg $argv[1]
5	5	--------> set -e argv[1]
5	5	--------> set -l fg $argv[1]
4	4	--------> set -e argv[1]
8	8	--------> set_color normal
11	11	--------> set_color -b $bg $fg $argv
32	56	--------> switch "$__bobthefish_current_bg"...
8	8	---------> set_color $__bobthefish_current_bg
8	8	---------> echo -ns $right_black_arrow_glyph ' '
8	8	---------> set_color $fg $argv
6	6	--------> set __bobthefish_current_bg $bg
7	7	------> echo -ns $project_pwd ' '
4	4	-----> return
15	132	--> __bobthefish_finish_segments
23	49	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
7	7	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	56	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
14	14	----> set_color $fish_color_autosuggestion
7	20	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
8	8	-----> echo -ens "$theme_newline_prompt"
8	8	---> set_color normal
4	4	---> set __bobthefish_current_bg
11	164	> fish_right_prompt
7	29	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
15	124	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
16	16	--> set_color $fish_color_autosuggestion
25	48	--> __bobthefish_cmd_duration
7	7	---> [ "$theme_display_cmd_duration" = "no" ]
13	13	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
11	18	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
16	678	> fish_title
10	23	-> __bobthefish_title_user
4	13	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
8	630	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
6	616	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
35	605	---> prompt_pwd
8	8	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
2	8	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
9	9	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
19	499	----> for path in $argv...
41	50	-----> set -l realhome (string escape --style=regex -- ~)
9	9	------> string escape --style=regex -- ~
40	55	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
15	15	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
13	375	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
6	6	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
10	228	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
76	197	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
99	121	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
22	22	---------> math $fish_prompt_pwd_full_dirs - 1
9	9	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
88	123	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
35	35	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
55	117	> __fish_disable_bracketed_paste 'eza --icons --color'
62	62	-> printf "\e[?2004l"
15	33	> __fish_disable_focus 'eza --icons --color'
18	18	-> echo -n \e\[\?1004l
22	853	> fish_title eza\ --icons\ --color
16	42	-> __bobthefish_title_user
4	26	--> if [ "$theme_title_display_user" = 'yes' ]...
22	22	---> [ "$theme_title_display_user" = 'yes' ]
4	14	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
8	775	-> if [ "$theme_title_display_path" != 'no' ]...
8	8	--> [ "$theme_title_display_path" != 'no' ]
10	759	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
7	7	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
57	742	---> prompt_pwd
12	12	----> set -l options h/help d/dir-length= D/full-length-dirs=
17	17	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
6	6	----> set -q argv[1]
7	7	----> set argv $PWD
4	4	----> set -ql _flag_d
7	7	----> set -q fish_prompt_pwd_dir_length
6	6	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
7	7	----> set -l fish_prompt_pwd_full_dirs 1
28	592	----> for path in $argv...
85	111	-----> set -l realhome (string escape --style=regex -- ~)
26	26	------> string escape --style=regex -- ~
60	95	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
35	35	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
13	358	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
7	7	------> set -l full
13	206	------> if test $fish_prompt_pwd_full_dirs -gt 0...
8	8	-------> test $fish_prompt_pwd_full_dirs -gt 0
58	170	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
90	112	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
22	22	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
92	120	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
28	28	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
4947	4947	> eza --icons --color
50	111	> __fish_enable_focus 'eza --icons --color'
61	61	-> echo -n \e\[\?1004h
25	43	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
29	111	> fish_mode_prompt
22	22	-> [ "$theme_display_vi" != 'no' ]
54	54	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
6	6	-> return
27	23273	> fish_prompt
22	22	-> set -l last_status $status
4	12	-> if set -q CONDA_LEFT_PROMPT...
8	8	--> set -q CONDA_LEFT_PROMPT
19	27	-> return_last_status $last_status
8	8	--> return $argv
80	23185	-> __fish_prompt_orig
13	13	--> set -l last_status $status
5	22	--> if [ "$TERM" = 'dumb' ]...
17	17	---> [ "$TERM" = 'dumb' ]
188	837	--> __bobthefish_glyphs
13	13	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
8	8	---> set -x right_arrow_glyph       \uE0B1
9	9	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
9	9	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
11	11	---> set -x nonzero_exit_glyph      '! '
12	12	---> set -x private_glyph           \uE0A2 ' '
10	10	---> set -x superuser_glyph         '$ '
10	10	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
15	15	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
8	8	---> set -x virtualenv_glyph        \u25F0
45	45	---> set -x pypy_glyph              \u1D56
20	20	---> set -x ruby_glyph              ''
10	10	---> set -x go_glyph                ''
8	8	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
7	7	---> set -x k8s_glyph               \u2388
8	8	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
8	8	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
10	10	---> set -x git_dirty_glyph      '*'
13	13	---> set -x git_staged_glyph     '~'
10	10	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
8	8	---> set -x git_ahead_glyph      \u2191
11	11	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
8	8	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
12	12	---> set -x fossil_glyph \U1F9B4
10	30	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
20	20	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
61	228	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
8	8	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
8	8	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
10	10	----> set virtualenv_glyph \uE73C ' '
8	8	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
9	9	----> set git_dirty_glyph      \uF448 ''
7	7	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
7	7	----> set git_untracked_glyph  \uF128 ''
6	6	----> set fossil_glyph \UF00B9
6	6	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	12	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
9	9	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
63	651	--> __bobthefish_colors $theme_color_scheme
226	588	---> switch "$color_scheme"...
13	13	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
11	11	----> set -l blue     48b4fb 005faf 255e87
9	9	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
7	7	----> set -l grey     cccccc 999999 333333
6	6	----> set -l white    ffffff
11	11	----> set -l black    000000
6	6	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
13	13	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
11	11	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
9	9	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
7	7	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
8	8	----> set -x color_repo_staged              $orange[1] $orange[3]
11	11	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
22	22	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
15	15	----> set -x color_vagrant                  $blue[1] $white --bold
11	11	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
11	11	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
10	10	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
9	9	----> set -x color_rvm                      $ruby_red $grey[1] --bold
9	9	----> set -x color_node                     $green[1] $white --bold
8	8	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
8	8	----> set -x color_virtualgo                $go_blue $black --bold
9	9	----> set -x color_desk                     $blue[2] $grey[1] --bold
8	8	----> set -x color_nix                      $blue[2] $grey[1] --bold
164	164	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
70	140	--> set -l real_pwd (__bobthefish_pwd)
36	70	---> __bobthefish_pwd
34	34	----> builtin pwd -P 2>/dev/null
34	165	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
13	13	---> [ -w / -o -w /private/ ]
27	69	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
10	38	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
19	19	-----> jobs -p >/dev/null
4	23	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
19	19	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
28	142	--> __bobthefish_prompt_user
45	45	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
21	21	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
5	9	---> if set -q display_user...
4	4	----> set -q display_user
4	8	---> if set -q display_sudo_user...
4	4	----> set -q display_sudo_user
3	7	---> if set -q display_hostname...
4	4	----> set -q display_hostname
5	5	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
17	31	--> __bobthefish_prompt_screen
10	10	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
12	24	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	23	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
11	21	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
10	21	--> __bobthefish_prompt_aws_vault_profile
8	8	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
24	35	--> __bobthefish_prompt_nix
8	8	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
11	23	--> __bobthefish_prompt_desk
10	10	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
16	485	--> __bobthefish_prompt_rubies
7	7	---> [ "$theme_display_ruby" = 'no' ]
7	7	---> set -l ruby_version
11	442	---> if command -q rvm-prompt...
109	109	----> command -q rvm-prompt
94	94	----> command -q rbenv
131	131	----> type -q chruby
97	97	----> command -q asdf
9	9	---> [ -z "$ruby_version" ]
4	4	---> return
23	921	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
87	859	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
4	20	----> if [ -e $d/go.mod ]...
16	16	-----> [ -e $d/go.mod ]
11	11	----> [ "$d" = "/" ]
80	165	----> set d (__bobthefish_dirname $d)
41	85	-----> __bobthefish_dirname $d
44	44	------> string replace -r '/[^/]+/?$' '' -- $argv
10	10	----> not [ -z "$d" ]
5	17	----> if [ -e $d/go.mod ]...
12	12	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
60	112	----> set d (__bobthefish_dirname $d)
29	52	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	25	----> if [ -e $d/go.mod ]...
21	21	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
67	115	----> set d (__bobthefish_dirname $d)
27	48	-----> __bobthefish_dirname $d
21	21	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	14	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
56	106	----> set d (__bobthefish_dirname $d)
27	50	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	12	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
53	97	----> set d (__bobthefish_dirname $d)
26	44	-----> __bobthefish_dirname $d
18	18	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
6	18	---> if [ "$gomod_version" = "0" ]...
8	8	----> [ "$gomod_version" = "0" ]
4	4	----> return
14	55	--> __bobthefish_prompt_virtualfish
21	21	---> command -q python
17	17	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
11	24	--> __bobthefish_prompt_virtualgo
10	10	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
20	1159	--> __bobthefish_prompt_node
7	7	---> set -l should_show
50	1122	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
6	6	----> [ "$theme_display_node" = 'yes' ]
25	1054	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
8	8	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
8	20	-----> if test -z "$dir"...
6	6	------> test -z "$dir"
6	6	------> test -z "$files"
91	986	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
16	62	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
5	14	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	17	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
57	111	------> set dir (__bobthefish_dirname "$dir")
30	54	-------> __bobthefish_dirname "$dir"
24	24	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
15	57	------> for f in $files...
3	16	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
72	123	------> set dir (__bobthefish_dirname "$dir")
29	51	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	55	------> for f in $files...
5	16	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
5	13	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
58	105	------> set dir (__bobthefish_dirname "$dir")
25	47	-------> __bobthefish_dirname "$dir"
22	22	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
14	57	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
7	16	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
58	100	------> set dir (__bobthefish_dirname "$dir")
26	42	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	51	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
55	96	------> set dir (__bobthefish_dirname "$dir")
26	41	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
5	5	-----> return 1
7	7	---> [ -z "$should_show" ]
3	3	---> return
54	2267	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
25	2213	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
85	85	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
23	2088	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
69	2024	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1955	1955	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
11	25	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
52	91	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	39	---> __bobthefish_hg_project_dir $real_pwd
19	19	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
48	71	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
12	23	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
52	15599	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	159	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
51	145	----> if builtin -q path...
21	21	-----> builtin -q path
53	73	-----> echo (path sort -r $argv)[1]
20	20	------> path sort -r $argv
47	15388	---> __bobthefish_prompt_git $git_root_dir $real_pwd
10	10	----> set -l dirty ''
50	2773	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
65	1332	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1267	1267	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1383	-----> if [ "$show_dirty" != 'false' ]...
9	9	------> [ "$show_dirty" != 'false' ]
71	1350	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1264	1264	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
3	15	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
12	12	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
56	1456	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1400	1400	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
49	1304	----> set -l stashed (__bobthefish_git_stashed)
11	1255	-----> __bobthefish_git_stashed
19	1244	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1218	1218	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
42	1442	----> set -l ahead (__bobthefish_git_ahead)
18	1400	-----> __bobthefish_git_ahead
4	11	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
7	7	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
7	7	------> set -l behind 0
58	1336	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1278	1278	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
5	22	------> if [ $ahead -eq 1 ]...
12	12	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
9	2780	----> if [ "$theme_display_git_untracked" != 'no' ]...
6	6	-----> [ "$theme_display_git_untracked" != 'no' ]
51	1140	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1089	1089	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
8	1625	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
54	1600	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1546	1546	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	9	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
5	5	----> set flags " $flags"
11	11	----> set -l flag_colors $color_repo
11	23	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
8	8	-----> set flag_colors $color_repo_dirty
46	952	----> __bobthefish_path_segment $git_root_dir project
11	11	-----> set -l segment_color $color_path
13	13	-----> set -l segment_basename_color $color_path_basename
15	27	-----> if not [ -w "$segment_dir" ]...
12	12	------> not [ -w "$segment_dir" ]
54	177	-----> __bobthefish_start_segment $segment_color
11	11	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
29	29	------> set_color normal
16	16	------> set_color -b $bg $fg $argv
35	42	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
5	5	-----> set -l parent
14	616	-----> switch "$segment_dir"...
48	493	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	445	-------> __bobthefish_pretty_parent "$segment_dir"
10	10	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
12	12	--------> set -l real_home ~
59	340	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
112	281	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
58	85	----------> __bobthefish_escape_regex "$real_home"
27	27	-----------> string escape --style=regex "$str" 2>/dev/null
31	84	----------> __bobthefish_dirname $child_dir
53	53	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	11	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
4	10	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
23	23	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
46	109	------> set directory (__bobthefish_basename "$segment_dir")
45	63	-------> __bobthefish_basename "$segment_dir"
18	18	--------> string replace -r '^.*/' '' -- $argv
14	14	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
20	20	-----> set_color -b $segment_basename_color
9	9	-----> echo -ns $directory ' '
25	123	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
7	7	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
28	51	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
46	4036	----> echo -ns (__bobthefish_git_branch) $flags ' '
15	3990	-----> __bobthefish_git_branch
54	1356	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1302	1302	-------> command git describe --tags --exact-match 2>/dev/null
67	1357	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1290	1290	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
19	1262	------> begin...
8	8	-------> [ -n "$theme_git_default_branches" ]
51	1201	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1150	1150	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
10	10	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
4	4	-------> return
8	8	----> set_color normal
10	398	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
40	237	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	197	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
48	142	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
54	94	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
25	40	---------> __bobthefish_escape_regex "$project_root_dir"
15	15	----------> string escape --style=regex "$str" 2>/dev/null
8	25	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
2	2	--------> return
8	142	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
6	122	------> if [ -w "$real_pwd" ]...
8	8	-------> [ -w "$real_pwd" ]
24	108	-------> __bobthefish_start_segment $color_path
6	6	--------> set -l bg $argv[1]
4	4	--------> set -e argv[1]
6	6	--------> set -l fg $argv[1]
3	3	--------> set -e argv[1]
7	7	--------> set_color normal
10	10	--------> set_color -b $bg $fg $argv
21	43	--------> switch "$__bobthefish_current_bg"...
7	7	---------> set_color $__bobthefish_current_bg
8	8	---------> echo -ns $right_black_arrow_glyph ' '
7	7	---------> set_color $fg $argv
5	5	--------> set __bobthefish_current_bg $bg
7	7	------> echo -ns $project_pwd ' '
2	2	-----> return
14	114	--> __bobthefish_finish_segments
20	45	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
6	6	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
9	46	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
9	9	----> set_color $fish_color_autosuggestion
6	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
4	4	---> set __bobthefish_current_bg
11	153	> fish_right_prompt
9	29	-> if not set -q CONDA_LEFT_PROMPT...
5	5	--> not set -q CONDA_LEFT_PROMPT
7	15	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	113	-> __fish_right_prompt_orig
7	7	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
22	22	--> set_color $fish_color_autosuggestion
14	32	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
8	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
17	498	> fish_title
11	24	-> __bobthefish_title_user
4	13	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
4	9	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
8	448	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
5	435	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
41	425	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
10	10	----> argparse -n prompt_pwd $options -- $argv
3	6	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
3	3	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
4	4	----> set -l fulldirs 0
3	3	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
16	326	----> for path in $argv...
41	49	-----> set -l realhome (string escape --style=regex -- ~)
8	8	------> string escape --style=regex -- ~
41	59	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
18	18	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
10	202	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
8	8	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
9	122	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
39	96	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
41	57	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
41	57	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
189	540	> up-or-search
10	142	-> if commandline --search-mode...
132	132	--> commandline --search-mode
5	13	-> if commandline --paging-mode...
8	8	--> commandline --paging-mode
155	171	-> set -l lineno (commandline -L)
16	16	--> commandline -L
13	25	-> switch $lineno...
12	12	--> commandline -f history-search-backward
44	102	> up-or-search
19	58	-> if commandline --search-mode...
23	23	--> commandline --search-mode
11	11	--> commandline -f history-search-backward
5	5	--> return
48	147	> up-or-search
25	99	-> if commandline --search-mode...
48	48	--> commandline --search-mode
19	19	--> commandline -f history-search-backward
7	7	--> return
44	110	> up-or-search
22	66	-> if commandline --search-mode...
26	26	--> commandline --search-mode
12	12	--> commandline -f history-search-backward
6	6	--> return
38	96	> up-or-search
18	58	-> if commandline --search-mode...
25	25	--> commandline --search-mode
9	9	--> commandline -f history-search-backward
6	6	--> return
51	174	> __fish_disable_bracketed_paste 'nvim config.fish'
123	123	-> printf "\e[?2004l"
11	99	> __fish_disable_focus 'nvim config.fish'
88	88	-> echo -n \e\[\?1004l
21	882	> fish_title nvim\ config.fish
18	41	-> __bobthefish_title_user
5	23	--> if [ "$theme_title_display_user" = 'yes' ]...
18	18	---> [ "$theme_title_display_user" = 'yes' ]
3	10	-> if [ "$theme_title_display_process" = 'yes' ]...
7	7	--> [ "$theme_title_display_process" = 'yes' ]
8	810	-> if [ "$theme_title_display_path" != 'no' ]...
8	8	--> [ "$theme_title_display_path" != 'no' ]
4	794	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
106	785	---> prompt_pwd
12	12	----> set -l options h/help d/dir-length= D/full-length-dirs=
13	13	----> argparse -n prompt_pwd $options -- $argv
5	11	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
5	5	----> set -q argv[1]
6	6	----> set argv $PWD
3	3	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
8	8	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
3	3	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
25	595	----> for path in $argv...
74	92	-----> set -l realhome (string escape --style=regex -- ~)
18	18	------> string escape --style=regex -- ~
106	142	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
36	36	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	336	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
6	6	------> set -l full
11	230	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
51	201	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
62	150	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
88	88	---------> math $fish_prompt_pwd_full_dirs - 1
7	7	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
54	76	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
22	22	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
5746489	5746489	> nvim config.fish
89	161	> __fish_enable_focus 'nvim config.fish'
72	72	-> echo -n \e\[\?1004h
20	40	> __fish_enable_bracketed_paste
20	20	-> printf "\e[?2004h"
28	110	> fish_mode_prompt
28	28	-> [ "$theme_display_vi" != 'no' ]
49	49	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
23	21912	> fish_prompt
25	25	-> set -l last_status $status
5	14	-> if set -q CONDA_LEFT_PROMPT...
9	9	--> set -q CONDA_LEFT_PROMPT
19	45	-> return_last_status $last_status
26	26	--> return $argv
73	21805	-> __fish_prompt_orig
14	14	--> set -l last_status $status
4	17	--> if [ "$TERM" = 'dumb' ]...
13	13	---> [ "$TERM" = 'dumb' ]
292	841	--> __bobthefish_glyphs
20	20	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
8	8	---> set -x right_arrow_glyph       \uE0B1
7	7	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
9	9	---> set -x tag_glyph               \u2302
12	12	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
8	8	---> set -x superuser_glyph         '$ '
8	8	---> set -x bg_job_glyph            '% '
9	9	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
5	5	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
8	8	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
8	8	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
5	5	---> set -x vagrant_poweroff_glyph  \u2193
10	10	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
6	6	---> set -x vagrant_unknown_glyph   '!'
10	10	---> set -x git_dirty_glyph      '*'
13	13	---> set -x git_staged_glyph     '~'
8	8	---> set -x git_stashed_glyph    '$'
12	12	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
13	13	---> set -x git_behind_glyph     \u2193
9	9	---> set -x git_plus_glyph       '+'
10	10	---> set -x git_minus_glyph      '-'
8	8	---> set -x git_plus_minus_glyph '±'
9	9	---> set -x fossil_glyph \U1F9B4
5	26	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
21	21	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
57	196	---> if [ "$theme_nerd_fonts" = "yes" ]...
6	6	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
10	10	----> set tag_glyph        \uF412
8	8	----> set nix_glyph        \uF313 ' '
6	6	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
5	5	----> set vagrant_poweroff_glyph \uF433
5	5	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
9	9	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
4	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
7	7	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
64	590	--> __bobthefish_colors $theme_color_scheme
215	526	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
10	10	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
6	6	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
8	8	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
12	12	----> set -l black    000000
9	9	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
21	21	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
16	16	----> set -x color_initial_segment_su       $white $green[2] --bold
8	8	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
7	7	----> set -x color_path                     $grey[3] $grey[2]
11	11	----> set -x color_path_basename            $grey[3] $white --bold
8	8	----> set -x color_path_nowrite             $red[3] $red[1]
8	8	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
10	10	----> set -x color_repo_work_tree           $grey[3] $white --bold
8	8	----> set -x color_repo_dirty               $red[2] $white
8	8	----> set -x color_repo_staged              $orange[1] $orange[3]
8	8	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
8	8	----> set -x color_vagrant                  $blue[1] $white --bold
6	6	----> set -x color_k8s                      $green[2] $white --bold
7	7	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
6	6	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
7	7	----> set -x color_screen                   $green[1] $white --bold
7	7	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
7	7	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
285	285	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
52	102	--> set -l real_pwd (__bobthefish_pwd)
26	50	---> __bobthefish_pwd
24	24	----> builtin pwd -P 2>/dev/null
30	192	--> __bobthefish_prompt_status $last_status
4	4	---> set -l nonzero
5	5	---> set -l superuser
4	4	---> set -l bg_jobs
7	7	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
21	115	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
5	90	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
76	76	-----> jobs -p >/dev/null
4	18	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
14	14	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
30	129	--> __bobthefish_prompt_user
31	31	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
16	16	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
4	8	---> if set -q display_user...
4	4	----> set -q display_user
4	18	---> if set -q display_sudo_user...
14	14	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
4	4	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
14	27	--> __bobthefish_prompt_screen
9	9	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
9	19	--> __bobthefish_prompt_vagrant
7	7	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	21	--> __bobthefish_prompt_docker
8	8	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
10	18	--> __bobthefish_prompt_k8s_context
5	5	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
10	19	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
9	20	--> __bobthefish_prompt_nix
7	7	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
9	18	--> __bobthefish_prompt_desk
6	6	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
16	399	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
9	366	---> if command -q rvm-prompt...
74	74	----> command -q rvm-prompt
67	67	----> command -q rbenv
149	149	----> type -q chruby
67	67	----> command -q asdf
5	5	---> [ -z "$ruby_version" ]
2	2	---> return
18	653	--> __bobthefish_prompt_golang $real_pwd
7	7	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
71	604	---> while not [ -z "$d" ]
...
5	5	----> not [ -z "$d" ]
3	11	----> if [ -e $d/go.mod ]...
8	8	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
48	120	----> set d (__bobthefish_dirname $d)
28	72	-----> __bobthefish_dirname $d
44	44	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
42	74	----> set d (__bobthefish_dirname $d)
20	32	-----> __bobthefish_dirname $d
12	12	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
48	83	----> set d (__bobthefish_dirname $d)
22	35	-----> __bobthefish_dirname $d
13	13	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
42	71	----> set d (__bobthefish_dirname $d)
17	29	-----> __bobthefish_dirname $d
12	12	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
40	74	----> set d (__bobthefish_dirname $d)
18	34	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	14	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
3	3	----> return
12	41	--> __bobthefish_prompt_virtualfish
12	12	---> command -q python
14	14	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
9	19	--> __bobthefish_prompt_virtualgo
7	7	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
12	839	--> __bobthefish_prompt_node
5	5	---> set -l should_show
33	814	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
9	9	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
5	5	----> [ "$theme_display_node" = 'yes' ]
16	767	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
7	7	-----> set -l files $argv[2..-1]
5	14	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
4	4	------> test -z "$files"
74	719	-----> while [ "$dir" ]
...
4	4	------> [ "$dir" ]
12	48	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
42	80	------> set dir (__bobthefish_dirname "$dir")
19	38	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
12	42	------> for f in $files...
1	11	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
39	69	------> set dir (__bobthefish_dirname "$dir")
18	30	-------> __bobthefish_dirname "$dir"
12	12	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
10	41	------> for f in $files...
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	72	------> set dir (__bobthefish_dirname "$dir")
18	32	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	40	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
38	70	------> set dir (__bobthefish_dirname "$dir")
19	32	-------> __bobthefish_dirname "$dir"
13	13	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
11	59	------> for f in $files...
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
20	27	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	73	------> set dir (__bobthefish_dirname "$dir")
19	33	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
4	4	-----> return 1
5	5	---> [ -z "$should_show" ]
3	3	---> return
42	1807	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
18	1765	---> __bobthefish_git_project_dir $real_pwd
6	6	----> [ "$theme_display_git" = 'no' ]
57	57	----> command -q git
5	5	----> set -q theme_vcs_ignore_paths
15	1679	----> if [ "$theme_git_worktree_support" != 'yes' ]...
5	5	-----> [ "$theme_git_worktree_support" != 'yes' ]
51	1630	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1579	1579	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
10	21	-----> switch $real_pwd/...
9	9	------> echo $git_toplevel
2	2	------> return
43	77	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
14	34	---> __bobthefish_hg_project_dir $real_pwd
7	7	----> [ "$theme_display_hg" = 'yes' ]
13	13	----> return
40	61	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
11	21	---> __bobthefish_fossil_project_dir $real_pwd
7	7	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
45	15393	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
13	182	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
38	169	----> if builtin -q path...
14	14	-----> builtin -q path
43	117	-----> echo (path sort -r $argv)[1]
74	74	------> path sort -r $argv
49	15166	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
48	2662	----> if [ "$theme_display_git_dirty" != 'no' ]...
6	6	-----> [ "$theme_display_git_dirty" != 'no' ]
48	1052	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1004	1004	------> command git config --bool bash.showDirtyState 2>/dev/null
9	1556	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
52	1526	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1461	1461	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
4	13	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
9	9	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
54	1346	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1292	1292	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
58	1329	----> set -l stashed (__bobthefish_git_stashed)
11	1271	-----> __bobthefish_git_stashed
21	1260	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1231	1231	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
48	1414	----> set -l ahead (__bobthefish_git_ahead)
15	1366	-----> __bobthefish_git_ahead
4	13	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
5	5	------> set -l ahead 0
5	5	------> set -l behind 0
58	1306	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1248	1248	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	22	------> if [ $ahead -eq 1 ]...
11	11	-------> [ $ahead -eq 1 ]
5	5	-------> [ $behind -eq 1 ]
6	6	----> set -l new ''
8	2594	----> if [ "$theme_display_git_untracked" != 'no' ]...
6	6	-----> [ "$theme_display_git_untracked" != 'no' ]
56	1239	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1183	1183	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
11	1341	-----> if [ "$show_untracked" != 'false' ]...
8	8	------> [ "$show_untracked" != 'false' ]
65	1312	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1247	1247	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
3	10	------> if [ "$new" ]...
7	7	-------> [ "$new" ]
11	11	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
9	9	----> set -l flag_colors $color_repo
5	17	----> if [ "$dirty" ]...
5	5	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
36	853	----> __bobthefish_path_segment $git_root_dir project
10	10	-----> set -l segment_color $color_path
10	10	-----> set -l segment_basename_color $color_path_basename
3	15	-----> if not [ -w "$segment_dir" ]...
12	12	------> not [ -w "$segment_dir" ]
37	224	-----> __bobthefish_start_segment $segment_color
9	9	------> set -l bg $argv[1]
7	7	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
93	93	------> set_color normal
14	14	------> set_color -b $bg $fg $argv
36	44	------> switch "$__bobthefish_current_bg"...
8	8	-------> echo -n ' '
8	8	------> set __bobthefish_current_bg $bg
5	5	-----> set -l directory
5	5	-----> set -l parent
12	508	-----> switch "$segment_dir"...
48	419	------> set parent (__bobthefish_pretty_parent "$segment_dir")
30	371	-------> __bobthefish_pretty_parent "$segment_dir"
10	10	--------> set -q fish_prompt_pwd_dir_length
6	6	--------> set -l fish_prompt_pwd_dir_length 1
8	8	--------> set -l real_home ~
53	280	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
103	227	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
44	63	----------> __bobthefish_escape_regex "$real_home"
19	19	-----------> string escape --style=regex "$str" 2>/dev/null
29	61	----------> __bobthefish_dirname $child_dir
32	32	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	10	--------> if [ -z "$parent_dir" ]...
7	7	---------> [ -z "$parent_dir" ]
4	10	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
17	17	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
41	77	------> set directory (__bobthefish_basename "$segment_dir")
23	36	-------> __bobthefish_basename "$segment_dir"
13	13	--------> string replace -r '^.*/' '' -- $argv
12	12	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
8	8	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
21	106	----> __bobthefish_start_segment $flag_colors
6	6	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
3	3	-----> set -e argv[1]
7	7	-----> set_color normal
9	9	-----> set_color -b $bg $fg $argv
21	43	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
45	4319	----> echo -ns (__bobthefish_git_branch) $flags ' '
17	4274	-----> __bobthefish_git_branch
60	1474	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1414	1414	-------> command git describe --tags --exact-match 2>/dev/null
88	1373	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1285	1285	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
22	1410	------> begin...
10	10	-------> [ -n "$theme_git_default_branches" ]
59	1258	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1199	1199	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
89	89	-------> contains $branch $theme_git_default_branches
16	16	-------> echo $branch_glyph
3	3	-------> return
8	8	----> set_color normal
12	424	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	255	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
23	214	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
52	155	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
57	103	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
30	46	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
8	26	-------> if [ $theme_project_dir_length -eq 0 ]...
7	7	--------> [ $theme_project_dir_length -eq 0 ]
8	8	--------> echo -n $project_dir
3	3	--------> return
7	147	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
6	127	------> if [ -w "$real_pwd" ]...
8	8	-------> [ -w "$real_pwd" ]
20	113	-------> __bobthefish_start_segment $color_path
5	5	--------> set -l bg $argv[1]
5	5	--------> set -e argv[1]
5	5	--------> set -l fg $argv[1]
5	5	--------> set -e argv[1]
8	8	--------> set_color normal
10	10	--------> set_color -b $bg $fg $argv
26	49	--------> switch "$__bobthefish_current_bg"...
7	7	---------> set_color $__bobthefish_current_bg
8	8	---------> echo -ns $right_black_arrow_glyph ' '
8	8	---------> set_color $fg $argv
6	6	--------> set __bobthefish_current_bg $bg
7	7	------> echo -ns $project_pwd ' '
3	3	-----> return
16	124	--> __bobthefish_finish_segments
26	51	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
6	6	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
10	47	---> if [ "$theme_newline_cursor" = 'yes' ]...
5	5	----> [ "$theme_newline_cursor" = 'yes' ]
6	6	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
6	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
6	6	-----> echo -ens "$theme_newline_prompt"
6	6	---> set_color normal
4	4	---> set __bobthefish_current_bg
10	268	> fish_right_prompt
10	32	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
3	8	---> if set -q CONDA_PROMPT_MODIFIER...
5	5	----> set -q CONDA_PROMPT_MODIFIER
16	226	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
4	14	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
22	158	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
10	10	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
9	96	---> if [ "$CMD_DURATION" -lt 5000 ]...
6	6	----> [ "$CMD_DURATION" -lt 5000 ]
6	6	----> [ "$CMD_DURATION" -lt 60000 ]
17	75	----> __bobthefish_pretty_ms $CMD_DURATION s
5	5	-----> set -l interval_ms
4	4	-----> set -l scale 1
10	14	-----> switch $interval...
4	4	------> set interval_ms 1000
14	35	-----> switch $FISH_VERSION...
15	15	------> math -s$scale "$ms/$interval_ms"
6	6	------> echo -ns $interval
10	10	---> set_color $fish_color_normal
7	7	---> set_color $fish_color_autosuggestion
7	7	---> [ "$theme_display_date" = "no" ]
8	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
3	3	---> return
7	7	--> set_color normal
15	505	> fish_title
12	26	-> __bobthefish_title_user
4	14	--> if [ "$theme_title_display_user" = 'yes' ]...
10	10	---> [ "$theme_title_display_user" = 'yes' ]
5	10	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
8	454	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
3	441	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
36	432	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
12	12	----> argparse -n prompt_pwd $options -- $argv
3	6	----> if set -q _flag_help...
3	3	-----> set -q _flag_help
4	4	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
20	330	----> for path in $argv...
42	51	-----> set -l realhome (string escape --style=regex -- ~)
9	9	------> string escape --style=regex -- ~
40	59	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
19	19	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
10	200	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
5	5	------> set -l full
11	119	------> if test $fish_prompt_pwd_full_dirs -gt 0...
5	5	-------> test $fish_prompt_pwd_full_dirs -gt 0
40	92	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
40	52	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
12	12	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
43	59	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
16	16	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
62	91	> __fish_disable_bracketed_paste 'cd ..'
29	29	-> printf "\e[?2004l"
15	38	> __fish_disable_focus 'cd ..'
23	23	-> echo -n \e\[\?1004l
29	910	> fish_title cd\ ..
17	42	-> __bobthefish_title_user
5	25	--> if [ "$theme_title_display_user" = 'yes' ]...
20	20	---> [ "$theme_title_display_user" = 'yes' ]
5	15	-> if [ "$theme_title_display_process" = 'yes' ]...
10	10	--> [ "$theme_title_display_process" = 'yes' ]
8	824	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
6	807	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
8	8	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
44	793	---> prompt_pwd
15	15	----> set -l options h/help d/dir-length= D/full-length-dirs=
18	18	----> argparse -n prompt_pwd $options -- $argv
4	10	----> if set -q _flag_help...
6	6	-----> set -q _flag_help
8	8	----> set -q argv[1]
13	13	----> set argv $PWD
5	5	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
36	643	----> for path in $argv...
83	103	-----> set -l realhome (string escape --style=regex -- ~)
20	20	------> string escape --style=regex -- ~
65	100	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
35	35	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
18	404	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
13	261	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
102	209	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
85	107	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
22	22	---------> math $fish_prompt_pwd_full_dirs - 1
25	25	-------> set tmp $all[1]
7	7	-------> set full $all[2..]
78	105	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
27	27	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
168	8092	> cd ..
9	9	-> set -l MAX_DIR_HIST 25
6	271	-> if test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)...
120	265	--> test (count $argv) -gt (test "$argv[1]" = "--" && echo 2 || echo 1)
126	126	---> count $argv
11	11	---> test "$argv[1]" = "--"
8	8	---> echo 1
4	11	-> if status --is-command-substitution...
7	7	--> status --is-command-substitution
11	11	-> set -l previous $PWD
5	12	-> if test "$argv" = -...
7	7	--> test "$argv" = -
40	7428	-> builtin cd $argv
19	7388	--> __z_on_variable_pwd VARIABLE SET PWD
48	7369	---> __z_add
14	14	----> test -n "$fish_private_mode"
17	75	----> for i in $Z_EXCLUDE...
4	58	-----> if string match -r $i $PWD >/dev/null...
54	54	------> string match -r $i $PWD >/dev/null
78	2079	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2001	2001	-----> mktemp $Z_DATA.XXXXXX
37	5153	----> if test -f $tmpfile...
18	18	-----> test -f $tmpfile
79	98	-----> set -l path (string replace --all \\ \\\\ $PWD)
19	19	------> string replace --all \\ \\\\ $PWD
2083	3406	-----> command awk -v path=$path -v now=(date +%s) -F "|" '
      BEGIN {
          rank[path] = 1
          time[path] = now
      }
      $2 >= 1 {
          if( $1 == path ) {
              rank[$1] = $2 + 1
              time[$1] = now
          }
          else {
              rank[$1] = $2
              time[$1] = $3
          }
          count += $2
      }
      END {
          if( count > 1000 ) {
              for( i in rank ) print i "|" 0.9*rank[i] "|" time[i] # aging
          }
          else for( i in rank ) print i "|" rank[i] "|" time[i]
      }
    ' $Z_DATA 2>/dev/null >$tmpfile
1323	1323	------> date +%s
3	21	-----> if test ! -z "$Z_OWNER"...
18	18	------> test ! -z "$Z_OWNER"
1573	1573	-----> command mv $tmpfile $Z_DATA
19	19	-> set -l cd_status $status
55	155	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
33	33	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
7	7	--> set -q dirprev
9	9	--> set -q dirprev[$MAX_DIR_HIST]
7	7	--> set -U -q dirprev
17	17	--> set -g -a dirprev $previous
5	5	--> set -U -q dirnext
8	8	--> set -e dirnext
5	5	--> set -U -q __fish_cd_direction
9	9	--> set -g __fish_cd_direction prev
8	8	-> return $cd_status
17	36	> __fish_enable_focus 'cd ..'
19	19	-> echo -n \e\[\?1004h
13	29	> __fish_enable_bracketed_paste
16	16	-> printf "\e[?2004h"
21	68	> fish_mode_prompt
13	13	-> [ "$theme_display_vi" != 'no' ]
29	29	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
5	5	-> return
23	22212	> fish_prompt
15	15	-> set -l last_status $status
5	12	-> if set -q CONDA_LEFT_PROMPT...
7	7	--> set -q CONDA_LEFT_PROMPT
17	25	-> return_last_status $last_status
8	8	--> return $argv
80	22137	-> __fish_prompt_orig
10	10	--> set -l last_status $status
3	14	--> if [ "$TERM" = 'dumb' ]...
11	11	---> [ "$TERM" = 'dumb' ]
164	712	--> __bobthefish_glyphs
11	11	---> set -x branch_glyph            \uE0A0
10	10	---> set -x right_black_arrow_glyph \uE0B0
10	10	---> set -x right_arrow_glyph       \uE0B1
13	13	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
8	8	---> set -x detached_glyph          \u27A6
8	8	---> set -x tag_glyph               \u2302
8	8	---> set -x nonzero_exit_glyph      '! '
10	10	---> set -x private_glyph           \uE0A2 ' '
9	9	---> set -x superuser_glyph         '$ '
9	9	---> set -x bg_job_glyph            '% '
10	10	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
7	7	---> set -x virtualenv_glyph        \u25F0
8	8	---> set -x pypy_glyph              \u1D56
9	9	---> set -x ruby_glyph              ''
8	8	---> set -x go_glyph                ''
8	8	---> set -x nix_glyph               ''
8	8	---> set -x desk_glyph              \u25F2
9	9	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
7	7	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
7	7	---> set -x vagrant_saved_glyph     \u21E1
7	7	---> set -x vagrant_stopping_glyph  \u21E3
7	7	---> set -x vagrant_unknown_glyph   '!'
7	7	---> set -x git_dirty_glyph      '*'
8	8	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
6	6	---> set -x git_minus_glyph      '-'
7	7	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
6	19	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
13	13	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
68	223	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
9	9	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
7	7	----> set tag_glyph        \uF412
7	7	----> set nix_glyph        \uF313 ' '
7	7	----> set virtualenv_glyph \uE73C ' '
6	6	----> set ruby_glyph       \uE791 ' '
6	6	----> set go_glyph         \uE626 ' '
8	8	----> set node_glyph       \uE718 ' '
7	7	----> set vagrant_running_glyph  \uF431
7	7	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
6	6	----> set vagrant_unknown_glyph  \uF421
8	8	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
5	5	----> set git_behind_glyph     \uF47C
6	6	----> set git_plus_glyph       \uF0DE
6	6	----> set git_minus_glyph      \uF0DD
6	6	----> set git_plus_minus_glyph \uF0DC
3	11	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
8	8	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
56	565	--> __bobthefish_colors $theme_color_scheme
184	509	---> switch "$color_scheme"...
8	8	----> set -l red      cc9999 ce000f 660000
7	7	----> set -l green    addc10 189303 0c4801
6	6	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
6	6	----> set -l brown    bf5e00 803f00 4d2600
6	6	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
5	5	----> set -l black    000000
6	6	----> set -l ruby_red af0000
5	5	----> set -l go_blue  00d7d7
11	11	----> set -x color_initial_segment_exit     $white $red[2] --bold
10	10	----> set -x color_initial_segment_private  $white $grey[3]
15	15	----> set -x color_initial_segment_su       $white $green[2] --bold
10	10	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
9	9	----> set -x color_path                     $grey[3] $grey[2]
9	9	----> set -x color_path_basename            $grey[3] $white --bold
9	9	----> set -x color_path_nowrite             $red[3] $red[1]
10	10	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
9	9	----> set -x color_repo                     $green[1] $green[3]
12	12	----> set -x color_repo_work_tree           $grey[3] $white --bold
9	9	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
9	9	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
10	10	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
9	9	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
9	9	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
9	9	----> set -x color_username                 $grey[1] $blue[3] --bold
9	9	----> set -x color_hostname                 $grey[1] $blue[3]
9	9	----> set -x color_screen                   $green[1] $white --bold
8	8	----> set -x color_rvm                      $ruby_red $grey[1] --bold
8	8	----> set -x color_node                     $green[1] $white --bold
9	9	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
8	8	----> set -x color_virtualgo                $go_blue $black --bold
8	8	----> set -x color_desk                     $blue[2] $grey[1] --bold
9	9	----> set -x color_nix                      $blue[2] $grey[1] --bold
138	138	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
62	134	--> set -l real_pwd (__bobthefish_pwd)
35	72	---> __bobthefish_pwd
37	37	----> builtin pwd -P 2>/dev/null
39	163	--> __bobthefish_prompt_status $last_status
7	7	---> set -l nonzero
5	5	---> set -l superuser
6	6	---> set -l bg_jobs
8	8	---> [ $last_status -ne 0 ]
11	11	---> [ -w / -o -w /private/ ]
27	65	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
6	33	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
9	9	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
18	18	-----> jobs -p >/dev/null
5	22	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
17	17	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
34	134	--> __bobthefish_prompt_user
33	33	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
11	11	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
16	16	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	9	---> if set -q display_user...
6	6	----> set -q display_user
3	8	---> if set -q display_sudo_user...
5	5	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
5	5	---> set -q display_user
5	5	---> set -q display_sudo_user
5	5	---> set -q display_hostname
13	27	--> __bobthefish_prompt_screen
11	11	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
11	23	--> __bobthefish_prompt_vagrant
9	9	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
11	24	--> __bobthefish_prompt_docker
10	10	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
11	21	--> __bobthefish_prompt_k8s_context
7	7	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
11	22	--> __bobthefish_prompt_aws_vault_profile
8	8	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
15	28	--> __bobthefish_prompt_nix
9	9	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
4	4	---> return
10	22	--> __bobthefish_prompt_desk
9	9	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
3	3	---> return
21	479	--> __bobthefish_prompt_rubies
6	6	---> [ "$theme_display_ruby" = 'no' ]
6	6	---> set -l ruby_version
10	435	---> if command -q rvm-prompt...
109	109	----> command -q rvm-prompt
97	97	----> command -q rbenv
113	113	----> type -q chruby
106	106	----> command -q asdf
8	8	---> [ -z "$ruby_version" ]
3	3	---> return
23	721	--> __bobthefish_prompt_golang $real_pwd
8	8	---> [ "$theme_display_go" = 'no' ]
8	8	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
79	657	---> while not [ -z "$d" ]
...
7	7	----> not [ -z "$d" ]
3	14	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
65	136	----> set d (__bobthefish_dirname $d)
44	71	-----> __bobthefish_dirname $d
27	27	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	15	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
61	114	----> set d (__bobthefish_dirname $d)
28	53	-----> __bobthefish_dirname $d
25	25	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
4	14	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
8	8	----> [ "$d" = "/" ]
58	102	----> set d (__bobthefish_dirname $d)
27	44	-----> __bobthefish_dirname $d
17	17	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
5	14	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
58	99	----> set d (__bobthefish_dirname $d)
25	41	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	----> not [ -z "$d" ]
8	18	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
17	61	--> __bobthefish_prompt_virtualfish
18	18	---> command -q python
23	23	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
10	24	--> __bobthefish_prompt_virtualgo
10	10	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
4	4	---> return
15	958	--> __bobthefish_prompt_node
6	6	---> set -l should_show
48	926	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
12	12	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
22	859	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
9	9	-----> set -l dir "$argv[1]"
10	10	-----> set -l files $argv[2..-1]
6	19	-----> if test -z "$dir"...
7	7	------> test -z "$dir"
6	6	------> test -z "$files"
97	794	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
16	62	------> for f in $files...
4	17	-------> if [ -e "$dir/$f" ]...
13	13	--------> [ -e "$dir/$f" ]
4	13	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	16	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
61	113	------> set dir (__bobthefish_dirname "$dir")
27	52	-------> __bobthefish_dirname "$dir"
25	25	--------> string replace -r '/[^/]+/?$' '' -- $argv
8	8	------> [ "$dir" ]
16	55	------> for f in $files...
4	15	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
57	100	------> set dir (__bobthefish_dirname "$dir")
27	43	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
14	52	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
56	105	------> set dir (__bobthefish_dirname "$dir")
28	49	-------> __bobthefish_dirname "$dir"
21	21	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
13	51	------> for f in $files...
3	14	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	12	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
57	98	------> set dir (__bobthefish_dirname "$dir")
26	41	-------> __bobthefish_dirname "$dir"
15	15	--------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	------> [ "$dir" ]
5	5	-----> return 1
7	7	---> [ -z "$should_show" ]
4	4	---> return
52	1907	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
23	1855	---> __bobthefish_git_project_dir $real_pwd
8	8	----> [ "$theme_display_git" = 'no' ]
76	76	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
19	1742	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
63	1681	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1618	1618	------> command git rev-parse --show-toplevel 2>/dev/null
9	9	-----> [ -z "$git_toplevel" ]
12	26	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
3	3	------> return
53	79	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
14	26	---> __bobthefish_hg_project_dir $real_pwd
9	9	----> [ "$theme_display_hg" = 'yes' ]
3	3	----> return
47	71	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
13	24	---> __bobthefish_fossil_project_dir $real_pwd
8	8	----> [ "$theme_display_fossil" = 'yes' ]
3	3	----> return
48	15591	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
14	141	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
44	127	----> if builtin -q path...
14	14	-----> builtin -q path
54	69	-----> echo (path sort -r $argv)[1]
15	15	------> path sort -r $argv
47	15402	---> __bobthefish_prompt_git $git_root_dir $real_pwd
8	8	----> set -l dirty ''
41	2810	----> if [ "$theme_display_git_dirty" != 'no' ]...
7	7	-----> [ "$theme_display_git_dirty" != 'no' ]
51	1208	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1157	1157	------> command git config --bool bash.showDirtyState 2>/dev/null
8	1554	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
66	1521	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1440	1440	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
15	15	-------> echo -n "$git_dirty_glyph"
5	17	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
12	12	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
67	1363	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1296	1296	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
48	1305	----> set -l stashed (__bobthefish_git_stashed)
10	1257	-----> __bobthefish_git_stashed
23	1247	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1214	1214	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
46	2089	----> set -l ahead (__bobthefish_git_ahead)
19	2043	-----> __bobthefish_git_ahead
5	14	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
6	6	------> set -l behind 0
83	1968	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1885	1885	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
6	30	------> if [ $ahead -eq 1 ]...
18	18	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
8	8	----> set -l new ''
12	2697	----> if [ "$theme_display_git_untracked" != 'no' ]...
9	9	-----> [ "$theme_display_git_untracked" != 'no' ]
75	1334	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1259	1259	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
9	1342	-----> if [ "$show_untracked" != 'false' ]...
10	10	------> [ "$show_untracked" != 'false' ]
60	1313	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1253	1253	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
5	5	----> [ "$flags" ]
6	6	----> set flags " $flags"
9	9	----> set -l flag_colors $color_repo
9	19	----> if [ "$dirty" ]...
3	3	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
37	752	----> __bobthefish_path_segment $git_root_dir project
9	9	-----> set -l segment_color $color_path
9	9	-----> set -l segment_basename_color $color_path_basename
3	12	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
42	127	-----> __bobthefish_start_segment $segment_color
8	8	------> set -l bg $argv[1]
6	6	------> set -e argv[1]
6	6	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
14	14	------> set_color normal
12	12	------> set_color -b $bg $fg $argv
21	28	------> switch "$__bobthefish_current_bg"...
7	7	-------> echo -n ' '
6	6	------> set __bobthefish_current_bg $bg
4	4	-----> set -l directory
5	5	-----> set -l parent
12	508	-----> switch "$segment_dir"...
49	385	------> set parent (__bobthefish_pretty_parent "$segment_dir")
30	336	-------> __bobthefish_pretty_parent "$segment_dir"
5	5	--------> set -q fish_prompt_pwd_dir_length
5	5	--------> set -l fish_prompt_pwd_dir_length 1
8	8	--------> set -l real_home ~
48	253	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
94	205	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
40	58	----------> __bobthefish_escape_regex "$real_home"
18	18	-----------> string escape --style=regex "$str" 2>/dev/null
22	53	----------> __bobthefish_dirname $child_dir
31	31	-----------> string replace -r '/[^/]+/?$' '' -- $argv
4	10	--------> if [ -z "$parent_dir" ]...
6	6	---------> [ -z "$parent_dir" ]
3	9	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
6	6	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
16	16	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
63	111	------> set directory (__bobthefish_basename "$segment_dir")
30	48	-------> __bobthefish_basename "$segment_dir"
18	18	--------> string replace -r '^.*/' '' -- $argv
12	12	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
9	9	-----> echo -n $parent
12	12	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
20	111	----> __bobthefish_start_segment $flag_colors
7	7	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
7	7	-----> set_color normal
10	10	-----> set_color -b $bg $fg $argv
25	47	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
7	7	------> set_color $fg $argv
5	5	-----> set __bobthefish_current_bg $bg
46	3874	----> echo -ns (__bobthefish_git_branch) $flags ' '
13	3828	-----> __bobthefish_git_branch
48	1154	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1106	1106	-------> command git describe --tags --exact-match 2>/dev/null
59	1416	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1357	1357	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1245	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
60	1184	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1124	1124	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
12	12	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
3	3	-------> return
7	7	----> set_color normal
11	283	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
43	254	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
20	211	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
51	155	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
54	104	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
32	50	---------> __bobthefish_escape_regex "$project_root_dir"
18	18	----------> string escape --style=regex "$str" 2>/dev/null
8	26	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
4	9	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
16	122	--> __bobthefish_finish_segments
22	51	---> if [ -n "$__bobthefish_current_bg" ]...
6	6	----> [ -n "$__bobthefish_current_bg" ]
8	8	----> set_color normal
8	8	----> set_color $__bobthefish_current_bg
7	7	----> echo -ns $right_black_arrow_glyph ' '
11	45	---> if [ "$theme_newline_cursor" = 'yes' ]...
6	6	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
7	7	----> set_color $fish_color_autosuggestion
5	16	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
7	7	-----> echo -ens "$theme_newline_prompt"
5	5	---> set_color normal
5	5	---> set __bobthefish_current_bg
9	133	> fish_right_prompt
7	29	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
9	16	--> __conda_add_prompt
3	7	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
15	95	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
10	10	--> set_color $fish_color_autosuggestion
12	29	--> __bobthefish_cmd_duration
5	5	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
3	3	---> return
9	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
6	6	--> set_color normal
13	516	> fish_title
11	22	-> __bobthefish_title_user
3	11	--> if [ "$theme_title_display_user" = 'yes' ]...
8	8	---> [ "$theme_title_display_user" = 'yes' ]
3	9	-> if [ "$theme_title_display_process" = 'yes' ]...
6	6	--> [ "$theme_title_display_process" = 'yes' ]
8	472	-> if [ "$theme_title_display_path" != 'no' ]...
5	5	--> [ "$theme_title_display_path" != 'no' ]
5	459	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
5	5	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
34	449	---> prompt_pwd
6	6	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
2	6	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
4	4	----> set -q argv[1]
5	5	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
4	4	----> set -q fish_prompt_pwd_full_dirs
5	5	----> set -l fish_prompt_pwd_full_dirs 1
18	352	----> for path in $argv...
52	62	-----> set -l realhome (string escape --style=regex -- ~)
10	10	------> string escape --style=regex -- ~
42	67	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
25	25	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	205	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
7	7	------> test "$fish_prompt_pwd_dir_length" -eq 0
4	4	------> set -l full
9	123	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
38	97	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
43	59	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
16	16	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
5	5	-------> set full $all[2..]
42	59	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
17	17	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
73	336	> up-or-search
10	34	-> if commandline --search-mode...
24	24	--> commandline --search-mode
5	13	-> if commandline --paging-mode...
8	8	--> commandline --paging-mode
174	192	-> set -l lineno (commandline -L)
18	18	--> commandline -L
12	24	-> switch $lineno...
12	12	--> commandline -f history-search-backward
66	133	> up-or-search
24	67	-> if commandline --search-mode...
26	26	--> commandline --search-mode
13	13	--> commandline -f history-search-backward
4	4	--> return
52	88	> __fish_disable_bracketed_paste 'nvim config.fish'
36	36	-> printf "\e[?2004l"
17	39	> __fish_disable_focus 'nvim config.fish'
22	22	-> echo -n \e\[\?1004l
30	913	> fish_title nvim\ config.fish
27	57	-> __bobthefish_title_user
6	30	--> if [ "$theme_title_display_user" = 'yes' ]...
24	24	---> [ "$theme_title_display_user" = 'yes' ]
6	20	-> if [ "$theme_title_display_process" = 'yes' ]...
14	14	--> [ "$theme_title_display_process" = 'yes' ]
11	806	-> if [ "$theme_title_display_path" != 'no' ]...
13	13	--> [ "$theme_title_display_path" != 'no' ]
9	782	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
11	11	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
57	762	---> prompt_pwd
21	21	----> set -l options h/help d/dir-length= D/full-length-dirs=
26	26	----> argparse -n prompt_pwd $options -- $argv
4	11	----> if set -q _flag_help...
7	7	-----> set -q _flag_help
7	7	----> set -q argv[1]
7	7	----> set argv $PWD
5	5	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
6	6	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
9	9	----> set -l fish_prompt_pwd_full_dirs 1
28	591	----> for path in $argv...
86	107	-----> set -l realhome (string escape --style=regex -- ~)
21	21	------> string escape --style=regex -- ~
68	104	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
36	36	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
20	352	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
8	8	------> set -l full
12	218	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
81	181	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
76	100	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
24	24	---------> math $fish_prompt_pwd_full_dirs - 1
10	10	-------> set tmp $all[1]
8	8	-------> set full $all[2..]
67	94	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
27	27	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
92145380	92145380	> nvim config.fish
47	184	> __fish_enable_focus 'nvim config.fish'
137	137	-> echo -n \e\[\?1004h
10	94	> __fish_enable_bracketed_paste
84	84	-> printf "\e[?2004h"
21	76	> fish_mode_prompt
18	18	-> [ "$theme_display_vi" != 'no' ]
33	33	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
20	21990	> fish_prompt
14	14	-> set -l last_status $status
4	10	-> if set -q CONDA_LEFT_PROMPT...
6	6	--> set -q CONDA_LEFT_PROMPT
12	25	-> return_last_status $last_status
13	13	--> return $argv
79	21921	-> __fish_prompt_orig
9	9	--> set -l last_status $status
4	19	--> if [ "$TERM" = 'dumb' ]...
15	15	---> [ "$TERM" = 'dumb' ]
145	620	--> __bobthefish_glyphs
10	10	---> set -x branch_glyph            \uE0A0
8	8	---> set -x right_black_arrow_glyph \uE0B0
7	7	---> set -x right_arrow_glyph       \uE0B1
6	6	---> set -x left_black_arrow_glyph  \uE0B2
6	6	---> set -x left_arrow_glyph        \uE0B3
6	6	---> set -x detached_glyph          \u27A6
7	7	---> set -x tag_glyph               \u2302
7	7	---> set -x nonzero_exit_glyph      '! '
7	7	---> set -x private_glyph           \uE0A2 ' '
7	7	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
6	6	---> set -x hg_glyph                \u263F
11	11	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
5	5	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
8	8	---> set -x ruby_glyph              ''
6	6	---> set -x go_glyph                ''
5	5	---> set -x nix_glyph               ''
5	5	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
6	6	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
6	6	---> set -x vagrant_aborted_glyph   \u2715
5	5	---> set -x vagrant_saved_glyph     \u21E1
6	6	---> set -x vagrant_stopping_glyph  \u21E3
6	6	---> set -x vagrant_unknown_glyph   '!'
7	7	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
5	5	---> set -x git_stashed_glyph    '$'
9	9	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
6	6	---> set -x git_behind_glyph     \u2193
7	7	---> set -x git_plus_glyph       '+'
9	9	---> set -x git_minus_glyph      '-'
5	5	---> set -x git_plus_minus_glyph '±'
12	12	---> set -x fossil_glyph \U1F9B4
5	22	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
17	17	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
53	197	---> if [ "$theme_nerd_fonts" = "yes" ]...
6	6	----> [ "$theme_nerd_fonts" = "yes" ]
6	6	----> set private_glyph    \uF023 ' '
5	5	----> set branch_glyph     \uF418
5	5	----> set detached_glyph   \uF417
7	7	----> set tag_glyph        \uF412
5	5	----> set nix_glyph        \uF313 ' '
6	6	----> set virtualenv_glyph \uE73C ' '
5	5	----> set ruby_glyph       \uE791 ' '
5	5	----> set go_glyph         \uE626 ' '
6	6	----> set node_glyph       \uE718 ' '
5	5	----> set vagrant_running_glyph  \uF431
9	9	----> set vagrant_poweroff_glyph \uF433
11	11	----> set vagrant_aborted_glyph  \uF468
4	4	----> set vagrant_unknown_glyph  \uF421
18	18	----> set git_dirty_glyph      \uF448 ''
5	5	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
5	5	----> set git_untracked_glyph  \uF128 ''
4	4	----> set fossil_glyph \UF00B9
4	4	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
4	4	----> set git_plus_glyph       \uF0DE
4	4	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
3	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
6	6	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
61	509	--> __bobthefish_colors $theme_color_scheme
154	448	---> switch "$color_scheme"...
13	13	----> set -l red      cc9999 ce000f 660000
5	5	----> set -l green    addc10 189303 0c4801
5	5	----> set -l blue     48b4fb 005faf 255e87
7	7	----> set -l orange   f6b117 unused 3a2a03
9	9	----> set -l brown    bf5e00 803f00 4d2600
8	8	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
7	7	----> set -l black    000000
9	9	----> set -l ruby_red af0000
6	6	----> set -l go_blue  00d7d7
9	9	----> set -x color_initial_segment_exit     $white $red[2] --bold
8	8	----> set -x color_initial_segment_private  $white $grey[3]
14	14	----> set -x color_initial_segment_su       $white $green[2] --bold
7	7	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
12	12	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
7	7	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
7	7	----> set -x color_repo                     $green[1] $green[3]
10	10	----> set -x color_repo_work_tree           $grey[3] $white --bold
8	8	----> set -x color_repo_dirty               $red[2] $white
9	9	----> set -x color_repo_staged              $orange[1] $orange[3]
9	9	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
6	6	----> set -x color_vagrant                  $blue[1] $white --bold
9	9	----> set -x color_k8s                      $green[2] $white --bold
8	8	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
8	8	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
7	7	----> set -x color_username                 $grey[1] $blue[3] --bold
7	7	----> set -x color_hostname                 $grey[1] $blue[3]
7	7	----> set -x color_screen                   $green[1] $white --bold
6	6	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
6	6	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
9	9	----> set -x color_virtualgo                $go_blue $black --bold
6	6	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
255	255	--> type -q bobthefish_colors
6	6	--> set -l __bobthefish_current_bg
48	100	--> set -l real_pwd (__bobthefish_pwd)
30	52	---> __bobthefish_pwd
22	22	----> builtin pwd -P 2>/dev/null
37	193	--> __bobthefish_prompt_status $last_status
4	4	---> set -l nonzero
4	4	---> set -l superuser
5	5	---> set -l bg_jobs
9	9	---> [ $last_status -ne 0 ]
9	9	---> [ -w / -o -w /private/ ]
19	107	---> if set -q AUTOJUMP_SOURCED...
4	4	----> set -q AUTOJUMP_SOURCED
7	84	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
5	5	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
72	72	-----> jobs -p >/dev/null
3	18	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
15	15	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
28	109	--> __bobthefish_prompt_user
30	30	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
8	8	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
14	14	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
3	7	---> if set -q display_user...
4	4	----> set -q display_user
3	6	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
4	7	---> if set -q display_hostname...
3	3	----> set -q display_hostname
3	3	---> set -q display_user
3	3	---> set -q display_sudo_user
3	3	---> set -q display_hostname
11	21	--> __bobthefish_prompt_screen
7	7	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
3	3	---> return
9	18	--> __bobthefish_prompt_vagrant
6	6	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	19	--> __bobthefish_prompt_docker
7	7	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
2	2	---> return
10	18	--> __bobthefish_prompt_k8s_context
6	6	---> [ "$theme_display_k8s_context" = 'yes' ]
2	2	---> return
9	17	--> __bobthefish_prompt_aws_vault_profile
6	6	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
2	2	---> return
10	18	--> __bobthefish_prompt_nix
6	6	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
2	2	---> return
7	16	--> __bobthefish_prompt_desk
7	7	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
15	388	--> __bobthefish_prompt_rubies
5	5	---> [ "$theme_display_ruby" = 'no' ]
4	4	---> set -l ruby_version
9	355	---> if command -q rvm-prompt...
76	76	----> command -q rvm-prompt
63	63	----> command -q rbenv
142	142	----> type -q chruby
65	65	----> command -q asdf
6	6	---> [ -z "$ruby_version" ]
3	3	---> return
18	544	--> __bobthefish_prompt_golang $real_pwd
6	6	---> [ "$theme_display_go" = 'no' ]
5	5	---> set -l gomod_version "0"
5	5	---> set -l d $real_pwd
67	497	---> while not [ -z "$d" ]
...
4	4	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
43	109	----> set d (__bobthefish_dirname $d)
28	66	-----> __bobthefish_dirname $d
38	38	------> string replace -r '/[^/]+/?$' '' -- $argv
17	17	----> not [ -z "$d" ]
4	11	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
42	79	----> set d (__bobthefish_dirname $d)
22	37	-----> __bobthefish_dirname $d
15	15	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
38	68	----> set d (__bobthefish_dirname $d)
19	30	-----> __bobthefish_dirname $d
11	11	------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	----> not [ -z "$d" ]
3	10	----> if [ -e $d/go.mod ]...
7	7	-----> [ -e $d/go.mod ]
5	5	----> [ "$d" = "/" ]
37	75	----> set d (__bobthefish_dirname $d)
19	38	-----> __bobthefish_dirname $d
19	19	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	13	---> if [ "$gomod_version" = "0" ]...
5	5	----> [ "$gomod_version" = "0" ]
2	2	----> return
11	40	--> __bobthefish_prompt_virtualfish
13	13	---> command -q python
13	13	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
8	18	--> __bobthefish_prompt_virtualgo
7	7	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
3	3	---> return
11	698	--> __bobthefish_prompt_node
5	5	---> set -l should_show
34	674	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
8	8	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
5	5	----> [ "$theme_display_node" = 'yes' ]
16	627	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
7	7	-----> set -l dir "$argv[1]"
7	7	-----> set -l files $argv[2..-1]
5	14	-----> if test -z "$dir"...
5	5	------> test -z "$dir"
4	4	------> test -z "$files"
61	579	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
11	46	------> for f in $files...
5	16	-------> if [ -e "$dir/$f" ]...
11	11	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
4	4	------> [ "$dir" = '/' ]
39	79	------> set dir (__bobthefish_dirname "$dir")
20	40	-------> __bobthefish_dirname "$dir"
20	20	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	42	------> for f in $files...
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
2	9	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
4	10	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
40	69	------> set dir (__bobthefish_dirname "$dir")
18	29	-------> __bobthefish_dirname "$dir"
11	11	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
11	40	------> for f in $files...
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
40	73	------> set dir (__bobthefish_dirname "$dir")
17	33	-------> __bobthefish_dirname "$dir"
16	16	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
12	40	------> for f in $files...
2	10	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
3	9	-------> if [ -e "$dir/$f" ]...
6	6	--------> [ -e "$dir/$f" ]
5	5	------> [ "$dir" = '/' ]
53	84	------> set dir (__bobthefish_dirname "$dir")
19	31	-------> __bobthefish_dirname "$dir"
12	12	--------> string replace -r '/[^/]+/?$' '' -- $argv
4	4	------> [ "$dir" ]
4	4	-----> return 1
5	5	---> [ -z "$should_show" ]
3	3	---> return
44	1823	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
21	1779	---> __bobthefish_git_project_dir $real_pwd
6	6	----> [ "$theme_display_git" = 'no' ]
58	58	----> command -q git
4	4	----> set -q theme_vcs_ignore_paths
15	1690	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
56	1635	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1579	1579	------> command git rev-parse --show-toplevel 2>/dev/null
8	8	-----> [ -z "$git_toplevel" ]
11	26	-----> switch $real_pwd/...
11	11	------> echo $git_toplevel
4	4	------> return
62	90	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
16	28	---> __bobthefish_hg_project_dir $real_pwd
8	8	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
60	96	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
19	36	---> __bobthefish_fossil_project_dir $real_pwd
12	12	----> [ "$theme_display_fossil" = 'yes' ]
5	5	----> return
52	16082	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
16	237	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
47	221	----> if builtin -q path...
21	21	-----> builtin -q path
64	153	-----> echo (path sort -r $argv)[1]
89	89	------> path sort -r $argv
48	15793	---> __bobthefish_prompt_git $git_root_dir $real_pwd
9	9	----> set -l dirty ''
48	2740	----> if [ "$theme_display_git_dirty" != 'no' ]...
8	8	-----> [ "$theme_display_git_dirty" != 'no' ]
53	1127	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1074	1074	------> command git config --bool bash.showDirtyState 2>/dev/null
10	1557	-----> if [ "$show_dirty" != 'false' ]...
8	8	------> [ "$show_dirty" != 'false' ]
59	1527	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1455	1455	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
13	13	-------> echo -n "$git_dirty_glyph"
2	12	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
10	10	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
52	1419	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1367	1367	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
63	1289	----> set -l stashed (__bobthefish_git_stashed)
13	1226	-----> __bobthefish_git_stashed
19	1213	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
8	8	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1186	1186	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
52	1689	----> set -l ahead (__bobthefish_git_ahead)
19	1637	-----> __bobthefish_git_ahead
5	19	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
14	14	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
9	9	------> set -l ahead 0
6	6	------> set -l behind 0
84	1558	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1474	1474	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
4	26	------> if [ $ahead -eq 1 ]...
16	16	-------> [ $ahead -eq 1 ]
6	6	-------> [ $behind -eq 1 ]
7	7	----> set -l new ''
13	3076	----> if [ "$theme_display_git_untracked" != 'no' ]...
8	8	-----> [ "$theme_display_git_untracked" != 'no' ]
54	1359	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1305	1305	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
13	1696	-----> if [ "$show_untracked" != 'false' ]...
9	9	------> [ "$show_untracked" != 'false' ]
66	1664	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1598	1598	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	10	------> if [ "$new" ]...
6	6	-------> [ "$new" ]
9	9	----> set -l flags "$dirty$staged$stashed$ahead$new"
4	4	----> [ "$flags" ]
5	5	----> set flags " $flags"
10	10	----> set -l flag_colors $color_repo
9	20	----> if [ "$dirty" ]...
4	4	-----> [ "$dirty" ]
7	7	-----> set flag_colors $color_repo_dirty
44	1074	----> __bobthefish_path_segment $git_root_dir project
12	12	-----> set -l segment_color $color_path
10	10	-----> set -l segment_basename_color $color_path_basename
4	13	-----> if not [ -w "$segment_dir" ]...
9	9	------> not [ -w "$segment_dir" ]
47	331	-----> __bobthefish_start_segment $segment_color
11	11	------> set -l bg $argv[1]
9	9	------> set -e argv[1]
7	7	------> set -l fg $argv[1]
5	5	------> set -e argv[1]
175	175	------> set_color normal
21	21	------> set_color -b $bg $fg $argv
34	44	------> switch "$__bobthefish_current_bg"...
10	10	-------> echo -n ' '
12	12	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
6	6	-----> set -l parent
16	596	-----> switch "$segment_dir"...
52	476	------> set parent (__bobthefish_pretty_parent "$segment_dir")
31	424	-------> __bobthefish_pretty_parent "$segment_dir"
7	7	--------> set -q fish_prompt_pwd_dir_length
8	8	--------> set -l fish_prompt_pwd_dir_length 1
12	12	--------> set -l real_home ~
61	319	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
117	258	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
49	73	----------> __bobthefish_escape_regex "$real_home"
24	24	-----------> string escape --style=regex "$str" 2>/dev/null
33	68	----------> __bobthefish_dirname $child_dir
35	35	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	12	--------> if [ -z "$parent_dir" ]...
9	9	---------> [ -z "$parent_dir" ]
3	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
9	9	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
23	23	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
50	104	------> set directory (__bobthefish_basename "$segment_dir")
36	54	-------> __bobthefish_basename "$segment_dir"
18	18	--------> string replace -r '^.*/' '' -- $argv
17	17	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
10	10	-----> echo -n $parent
18	18	-----> set_color -b $segment_basename_color
11	11	-----> echo -ns $directory ' '
26	133	----> __bobthefish_start_segment $flag_colors
9	9	-----> set -l bg $argv[1]
6	6	-----> set -e argv[1]
7	7	-----> set -l fg $argv[1]
6	6	-----> set -e argv[1]
7	7	-----> set_color normal
11	11	-----> set_color -b $bg $fg $argv
31	55	-----> switch "$__bobthefish_current_bg"...
7	7	------> set_color $__bobthefish_current_bg
9	9	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
6	6	-----> set __bobthefish_current_bg $bg
45	3948	----> echo -ns (__bobthefish_git_branch) $flags ' '
24	3903	-----> __bobthefish_git_branch
64	1341	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1277	1277	-------> command git describe --tags --exact-match 2>/dev/null
66	1126	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1060	1060	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
17	1412	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
51	1290	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1239	1239	--------> git config init.defaultBranch
12	12	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
74	74	-------> contains $branch $theme_git_default_branches
7	7	-------> echo $branch_glyph
3	3	-------> return
13	13	----> set_color normal
11	300	----> if [ "$theme_git_worktree_support" != 'yes' ]...
6	6	-----> [ "$theme_git_worktree_support" != 'yes' ]
41	272	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
21	231	------> __bobthefish_project_pwd $git_root_dir $real_pwd
5	5	-------> set -q theme_project_dir_length
5	5	-------> set -l theme_project_dir_length 0
50	173	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
68	123	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
39	55	---------> __bobthefish_escape_regex "$project_root_dir"
16	16	----------> string escape --style=regex "$str" 2>/dev/null
9	27	-------> if [ $theme_project_dir_length -eq 0 ]...
8	8	--------> [ $theme_project_dir_length -eq 0 ]
7	7	--------> echo -n $project_dir
3	3	--------> return
3	8	-----> if [ "$project_pwd" ]...
5	5	------> [ "$project_pwd" ]
3	3	-----> return
14	116	--> __bobthefish_finish_segments
21	47	---> if [ -n "$__bobthefish_current_bg" ]...
5	5	----> [ -n "$__bobthefish_current_bg" ]
6	6	----> set_color normal
7	7	----> set_color $__bobthefish_current_bg
8	8	----> echo -ns $right_black_arrow_glyph ' '
7	40	---> if [ "$theme_newline_cursor" = 'yes' ]...
7	7	----> [ "$theme_newline_cursor" = 'yes' ]
5	5	----> echo -ens "\n"
8	8	----> set_color $fish_color_autosuggestion
4	13	----> if set -q theme_newline_prompt...
4	4	-----> set -q theme_newline_prompt
5	5	-----> echo -ens "$theme_newline_prompt"
10	10	---> set_color normal
5	5	---> set __bobthefish_current_bg
8	331	> fish_right_prompt
8	30	-> if not set -q CONDA_LEFT_PROMPT...
6	6	--> not set -q CONDA_LEFT_PROMPT
8	16	--> __conda_add_prompt
4	8	---> if set -q CONDA_PROMPT_MODIFIER...
4	4	----> set -q CONDA_PROMPT_MODIFIER
17	293	-> __fish_right_prompt_orig
6	6	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	13	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
10	10	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
9	9	--> set_color $fish_color_autosuggestion
23	225	--> __bobthefish_cmd_duration
6	6	---> [ "$theme_display_cmd_duration" = "no" ]
9	9	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
13	167	---> if [ "$CMD_DURATION" -lt 5000 ]...
5	5	----> [ "$CMD_DURATION" -lt 5000 ]
5	5	----> [ "$CMD_DURATION" -lt 60000 ]
5	5	----> [ "$CMD_DURATION" -lt 3600000 ]
9	9	----> set_color $fish_color_error
17	130	----> __bobthefish_pretty_ms $CMD_DURATION m
5	5	-----> set -l interval_ms
4	4	-----> set -l scale 1
7	12	-----> switch $interval...
5	5	------> set interval_ms 60000
12	92	-----> switch $FISH_VERSION...
73	73	------> math -s$scale "$ms/$interval_ms"
7	7	------> echo -ns $interval
9	9	---> set_color $fish_color_normal
6	6	---> set_color $fish_color_autosuggestion
5	5	---> [ "$theme_display_date" = "no" ]
9	16	--> __bobthefish_timestamp
5	5	---> [ "$theme_display_date" = "no" ]
2	2	---> return
7	7	--> set_color normal
13	669	> fish_title
11	24	-> __bobthefish_title_user
4	13	--> if [ "$theme_title_display_user" = 'yes' ]...
9	9	---> [ "$theme_title_display_user" = 'yes' ]
3	8	-> if [ "$theme_title_display_process" = 'yes' ]...
5	5	--> [ "$theme_title_display_process" = 'yes' ]
8	624	-> if [ "$theme_title_display_path" != 'no' ]...
6	6	--> [ "$theme_title_display_path" != 'no' ]
5	610	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
4	4	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
102	601	---> prompt_pwd
7	7	----> set -l options h/help d/dir-length= D/full-length-dirs=
11	11	----> argparse -n prompt_pwd $options -- $argv
3	7	----> if set -q _flag_help...
4	4	-----> set -q _flag_help
5	5	----> set -q argv[1]
8	8	----> set argv $PWD
4	4	----> set -ql _flag_d
5	5	----> set -q fish_prompt_pwd_dir_length
7	7	----> set -l fish_prompt_pwd_dir_length 1
6	6	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
12	12	----> set -l fish_prompt_pwd_full_dirs 1
22	418	----> for path in $argv...
53	67	-----> set -l realhome (string escape --style=regex -- ~)
14	14	------> string escape --style=regex -- ~
50	87	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
37	37	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
11	242	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
10	10	------> test "$fish_prompt_pwd_dir_length" -eq 0
6	6	------> set -l full
12	146	------> if test $fish_prompt_pwd_full_dirs -gt 0...
7	7	-------> test $fish_prompt_pwd_full_dirs -gt 0
49	113	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
50	64	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
14	14	---------> math $fish_prompt_pwd_full_dirs - 1
8	8	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
48	69	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
21	21	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
239	620	> up-or-search
11	157	-> if commandline --search-mode...
146	146	--> commandline --search-mode
6	19	-> if commandline --paging-mode...
13	13	--> commandline --paging-mode
160	178	-> set -l lineno (commandline -L)
18	18	--> commandline -L
15	27	-> switch $lineno...
12	12	--> commandline -f history-search-backward
47	118	> up-or-search
24	71	-> if commandline --search-mode...
30	30	--> commandline --search-mode
12	12	--> commandline -f history-search-backward
5	5	--> return
51	118	> up-or-search
23	67	-> if commandline --search-mode...
26	26	--> commandline --search-mode
13	13	--> commandline -f history-search-backward
5	5	--> return
45	105	> up-or-search
18	60	-> if commandline --search-mode...
28	28	--> commandline --search-mode
10	10	--> commandline -f history-search-backward
4	4	--> return
72	138	> up-or-search
25	66	-> if commandline --search-mode...
26	26	--> commandline --search-mode
11	11	--> commandline -f history-search-backward
4	4	--> return
42	102	> up-or-search
21	60	-> if commandline --search-mode...
23	23	--> commandline --search-mode
11	11	--> commandline -f history-search-backward
5	5	--> return
60	174	> up-or-search
23	114	-> if commandline --search-mode...
25	25	--> commandline --search-mode
13	13	--> commandline -f history-search-backward
53	53	--> return
41	148	> up-or-search
25	107	-> if commandline --search-mode...
59	59	--> commandline --search-mode
18	18	--> commandline -f history-search-backward
5	5	--> return
65	158	> up-or-search
24	93	-> if commandline --search-mode...
49	49	--> commandline --search-mode
14	14	--> commandline -f history-search-backward
6	6	--> return
40	76	> __fish_disable_bracketed_paste fish
36	36	-> printf "\e[?2004l"
14	32	> __fish_disable_focus fish
18	18	-> echo -n \e\[\?1004l
23	884	> fish_title fish
18	58	-> __bobthefish_title_user
6	40	--> if [ "$theme_title_display_user" = 'yes' ]...
34	34	---> [ "$theme_title_display_user" = 'yes' ]
4	22	-> if [ "$theme_title_display_process" = 'yes' ]...
18	18	--> [ "$theme_title_display_process" = 'yes' ]
9	781	-> if [ "$theme_title_display_path" != 'no' ]...
9	9	--> [ "$theme_title_display_path" != 'no' ]
6	763	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
8	8	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
46	749	---> prompt_pwd
14	14	----> set -l options h/help d/dir-length= D/full-length-dirs=
16	16	----> argparse -n prompt_pwd $options -- $argv
5	10	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
6	6	----> set -q argv[1]
8	8	----> set argv $PWD
4	4	----> set -ql _flag_d
6	6	----> set -q fish_prompt_pwd_dir_length
8	8	----> set -l fish_prompt_pwd_dir_length 1
7	7	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
6	6	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
27	608	----> for path in $argv...
76	93	-----> set -l realhome (string escape --style=regex -- ~)
17	17	------> string escape --style=regex -- ~
85	126	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
41	41	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
16	362	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
12	12	------> test "$fish_prompt_pwd_dir_length" -eq 0
6	6	------> set -l full
15	222	------> if test $fish_prompt_pwd_full_dirs -gt 0...
9	9	-------> test $fish_prompt_pwd_full_dirs -gt 0
70	179	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
87	109	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
22	22	---------> math $fish_prompt_pwd_full_dirs - 1
11	11	-------> set tmp $all[1]
8	8	-------> set full $all[2..]
75	106	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
31	31	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
101620095	101620095	> fish
21	122	> __fish_enable_focus fish
101	101	-> echo -n \e\[\?1004h
12	111	> __fish_enable_bracketed_paste
99	99	-> printf "\e[?2004h"
24	74	> fish_mode_prompt
16	16	-> [ "$theme_display_vi" != 'no' ]
30	30	-> [ "$fish_key_bindings" = 'fish_vi_key_bindings' \
        -o "$fish_key_bindings" = 'hybrid_bindings' \
        -o "$fish_key_bindings" = 'fish_hybrid_key_bindings' \
        -o "$theme_display_vi" = 'yes' ]
4	4	-> return
20	25749	> fish_prompt
15	15	-> set -l last_status $status
4	11	-> if set -q CONDA_LEFT_PROMPT...
7	7	--> set -q CONDA_LEFT_PROMPT
15	22	-> return_last_status $last_status
7	7	--> return $argv
83	25681	-> __fish_prompt_orig
11	11	--> set -l last_status $status
4	20	--> if [ "$TERM" = 'dumb' ]...
16	16	---> [ "$TERM" = 'dumb' ]
172	664	--> __bobthefish_glyphs
10	10	---> set -x branch_glyph            \uE0A0
9	9	---> set -x right_black_arrow_glyph \uE0B0
7	7	---> set -x right_arrow_glyph       \uE0B1
7	7	---> set -x left_black_arrow_glyph  \uE0B2
9	9	---> set -x left_arrow_glyph        \uE0B3
7	7	---> set -x detached_glyph          \u27A6
7	7	---> set -x tag_glyph               \u2302
7	7	---> set -x nonzero_exit_glyph      '! '
7	7	---> set -x private_glyph           \uE0A2 ' '
7	7	---> set -x superuser_glyph         '$ '
6	6	---> set -x bg_job_glyph            '% '
7	7	---> set -x hg_glyph                \u263F
9	9	---> set -x superscript_glyph       \u00B9 \u00B2 \u00B3
6	6	---> set -x virtualenv_glyph        \u25F0
7	7	---> set -x pypy_glyph              \u1D56
7	7	---> set -x ruby_glyph              ''
7	7	---> set -x go_glyph                ''
7	7	---> set -x nix_glyph               ''
6	6	---> set -x desk_glyph              \u25F2
6	6	---> set -x k8s_glyph               \u2388
7	7	---> set -x vagrant_running_glyph   \u2191
6	6	---> set -x vagrant_poweroff_glyph  \u2193
7	7	---> set -x vagrant_aborted_glyph   \u2715
6	6	---> set -x vagrant_saved_glyph     \u21E1
17	17	---> set -x vagrant_stopping_glyph  \u21E3
8	8	---> set -x vagrant_unknown_glyph   '!'
7	7	---> set -x git_dirty_glyph      '*'
9	9	---> set -x git_staged_glyph     '~'
7	7	---> set -x git_stashed_glyph    '$'
7	7	---> set -x git_untracked_glyph  '…'
7	7	---> set -x git_ahead_glyph      \u2191
7	7	---> set -x git_behind_glyph     \u2193
6	6	---> set -x git_plus_glyph       '+'
6	6	---> set -x git_minus_glyph      '-'
6	6	---> set -x git_plus_minus_glyph '±'
7	7	---> set -x fossil_glyph \U1F9B4
7	27	---> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
20	20	----> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
49	191	---> if [ "$theme_nerd_fonts" = "yes" ]...
7	7	----> [ "$theme_nerd_fonts" = "yes" ]
8	8	----> set private_glyph    \uF023 ' '
6	6	----> set branch_glyph     \uF418
6	6	----> set detached_glyph   \uF417
6	6	----> set tag_glyph        \uF412
6	6	----> set nix_glyph        \uF313 ' '
6	6	----> set virtualenv_glyph \uE73C ' '
7	7	----> set ruby_glyph       \uE791 ' '
7	7	----> set go_glyph         \uE626 ' '
7	7	----> set node_glyph       \uE718 ' '
6	6	----> set vagrant_running_glyph  \uF431
6	6	----> set vagrant_poweroff_glyph \uF433
6	6	----> set vagrant_aborted_glyph  \uF468
5	5	----> set vagrant_unknown_glyph  \uF421
6	6	----> set git_dirty_glyph      \uF448 ''
6	6	----> set git_staged_glyph     \uF0C7 ''
7	7	----> set git_stashed_glyph    \uF0C6 ''
6	6	----> set git_untracked_glyph  \uF128 ''
5	5	----> set fossil_glyph \UF00B9
5	5	----> set git_ahead_glyph      \uF47B
4	4	----> set git_behind_glyph     \uF47C
5	5	----> set git_plus_glyph       \uF0DE
5	5	----> set git_minus_glyph      \uF0DD
4	4	----> set git_plus_minus_glyph \uF0DC
4	9	---> if [ "$theme_avoid_ambiguous_glyphs" = "yes" ]...
5	5	----> [ "$theme_avoid_ambiguous_glyphs" = "yes" ]
65	511	--> __bobthefish_colors $theme_color_scheme
176	446	---> switch "$color_scheme"...
10	10	----> set -l red      cc9999 ce000f 660000
6	6	----> set -l green    addc10 189303 0c4801
11	11	----> set -l blue     48b4fb 005faf 255e87
6	6	----> set -l orange   f6b117 unused 3a2a03
5	5	----> set -l brown    bf5e00 803f00 4d2600
4	4	----> set -l grey     cccccc 999999 333333
5	5	----> set -l white    ffffff
6	6	----> set -l black    000000
5	5	----> set -l ruby_red af0000
4	4	----> set -l go_blue  00d7d7
9	9	----> set -x color_initial_segment_exit     $white $red[2] --bold
8	8	----> set -x color_initial_segment_private  $white $grey[3]
7	7	----> set -x color_initial_segment_su       $white $green[2] --bold
9	9	----> set -x color_initial_segment_jobs     $white $blue[3] --bold
8	8	----> set -x color_path                     $grey[3] $grey[2]
7	7	----> set -x color_path_basename            $grey[3] $white --bold
6	6	----> set -x color_path_nowrite             $red[3] $red[1]
8	8	----> set -x color_path_nowrite_basename    $red[3] $red[1] --bold
6	6	----> set -x color_repo                     $green[1] $green[3]
8	8	----> set -x color_repo_work_tree           $grey[3] $white --bold
7	7	----> set -x color_repo_dirty               $red[2] $white
8	8	----> set -x color_repo_staged              $orange[1] $orange[3]
8	8	----> set -x color_vi_mode_default          $grey[2] $grey[3] --bold
7	7	----> set -x color_vi_mode_insert           $green[2] $grey[3] --bold
8	8	----> set -x color_vi_mode_visual           $orange[1] $orange[3] --bold
7	7	----> set -x color_vagrant                  $blue[1] $white --bold
8	8	----> set -x color_k8s                      $green[2] $white --bold
7	7	----> set -x color_aws_vault                $blue[3] $orange[1] --bold
10	10	----> set -x color_aws_vault_expired        $blue[3] $red[3] --bold
7	7	----> set -x color_username                 $grey[1] $blue[3] --bold
8	8	----> set -x color_hostname                 $grey[1] $blue[3]
7	7	----> set -x color_screen                   $green[1] $white --bold
6	6	----> set -x color_rvm                      $ruby_red $grey[1] --bold
7	7	----> set -x color_node                     $green[1] $white --bold
8	8	----> set -x color_virtualfish              $blue[2] $grey[1] --bold
7	7	----> set -x color_virtualgo                $go_blue $black --bold
6	6	----> set -x color_desk                     $blue[2] $grey[1] --bold
6	6	----> set -x color_nix                      $blue[2] $grey[1] --bold
290	290	--> type -q bobthefish_colors
7	7	--> set -l __bobthefish_current_bg
57	120	--> set -l real_pwd (__bobthefish_pwd)
33	63	---> __bobthefish_pwd
30	30	----> builtin pwd -P 2>/dev/null
30	491	--> __bobthefish_prompt_status $last_status
5	5	---> set -l nonzero
5	5	---> set -l superuser
4	4	---> set -l bg_jobs
8	8	---> [ $last_status -ne 0 ]
4	4	---> set nonzero 1
11	11	---> [ -w / -o -w /private/ ]
23	126	---> if set -q AUTOJUMP_SOURCED...
5	5	----> set -q AUTOJUMP_SOURCED
7	98	----> if [ "$theme_display_jobs_verbose" = 'yes' ]...
7	7	-----> [ "$theme_display_jobs_verbose" = 'yes' ]
84	84	-----> jobs -p >/dev/null
19	298	---> if [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]...
16	16	----> [ "$nonzero" -o "$fish_private_mode" -o "$superuser" -o "$bg_jobs" ]
30	187	----> __bobthefish_start_segment $color_initial_segment_exit
8	8	-----> set -l bg $argv[1]
7	7	-----> set -e argv[1]
5	5	-----> set -l fg $argv[1]
4	4	-----> set -e argv[1]
84	84	-----> set_color normal
15	15	-----> set_color -b $bg $fg $argv
20	27	-----> switch "$__bobthefish_current_bg"...
7	7	------> echo -n ' '
7	7	-----> set __bobthefish_current_bg $bg
10	53	----> if [ "$nonzero" ]...
5	5	-----> [ "$nonzero" ]
7	7	-----> set_color normal
10	10	-----> set_color -b $color_initial_segment_exit
7	21	-----> if [ "$theme_show_exit_status" = 'yes' ]...
6	6	------> [ "$theme_show_exit_status" = 'yes' ]
8	8	------> echo -n $nonzero_exit_glyph
3	8	----> if [ "$fish_private_mode" ]...
5	5	-----> [ "$fish_private_mode" ]
4	8	----> if [ "$superuser" ]...
4	4	-----> [ "$superuser" ]
2	7	----> if [ "$bg_jobs" ]...
5	5	-----> [ "$bg_jobs" ]
27	142	--> __bobthefish_prompt_user
42	42	---> [ "$theme_display_user" = 'yes' -o \( "$theme_display_user" != 'no' -a -n "$SSH_CLIENT" \) -o \( -n "$default_user" -a "$USER" != "$default_user" \) ]
10	10	---> [ "$theme_display_sudo_user" = 'yes' -a -n "$SUDO_USER" ]
18	18	---> [ "$theme_display_hostname" = 'yes' -o \( "$theme_display_hostname" != 'no' -a -n "$SSH_CLIENT" \) ]
15	19	---> if set -q display_user...
4	4	----> set -q display_user
4	7	---> if set -q display_sudo_user...
3	3	----> set -q display_sudo_user
4	8	---> if set -q display_hostname...
4	4	----> set -q display_hostname
3	3	---> set -q display_user
4	4	---> set -q display_sudo_user
4	4	---> set -q display_hostname
11	29	--> __bobthefish_prompt_screen
14	14	---> [ "$theme_display_screen" = 'no' -o -z "$STY" ]
4	4	---> return
11	22	--> __bobthefish_prompt_vagrant
8	8	---> [ "$theme_display_vagrant" = 'yes' -a -f Vagrantfile ]
3	3	---> return
10	35	--> __bobthefish_prompt_docker
22	22	---> [ "$theme_display_docker_machine" = 'no' -o -z "$DOCKER_MACHINE_NAME" ]
3	3	---> return
11	20	--> __bobthefish_prompt_k8s_context
6	6	---> [ "$theme_display_k8s_context" = 'yes' ]
3	3	---> return
10	20	--> __bobthefish_prompt_aws_vault_profile
7	7	---> [ "$theme_display_aws_vault_profile" = 'yes' ]
3	3	---> return
8	20	--> __bobthefish_prompt_nix
9	9	---> [ "$theme_display_nix" = 'no' -o -z "$IN_NIX_SHELL" ]
3	3	---> return
10	20	--> __bobthefish_prompt_desk
8	8	---> [ "$theme_display_desk" = 'no' -o -z "$DESK_ENV" ]
2	2	---> return
16	451	--> __bobthefish_prompt_rubies
4	4	---> [ "$theme_display_ruby" = 'no' ]
5	5	---> set -l ruby_version
10	417	---> if command -q rvm-prompt...
91	91	----> command -q rvm-prompt
77	77	----> command -q rbenv
164	164	----> type -q chruby
75	75	----> command -q asdf
6	6	---> [ -z "$ruby_version" ]
3	3	---> return
20	752	--> __bobthefish_prompt_golang $real_pwd
5	5	---> [ "$theme_display_go" = 'no' ]
6	6	---> set -l gomod_version "0"
7	7	---> set -l d $real_pwd
68	698	---> while not [ -z "$d" ]
...
6	6	----> not [ -z "$d" ]
3	12	----> if [ -e $d/go.mod ]...
9	9	-----> [ -e $d/go.mod ]
6	6	----> [ "$d" = "/" ]
57	139	----> set d (__bobthefish_dirname $d)
37	82	-----> __bobthefish_dirname $d
45	45	------> string replace -r '/[^/]+/?$' '' -- $argv
7	7	----> not [ -z "$d" ]
3	13	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
61	104	----> set d (__bobthefish_dirname $d)
23	43	-----> __bobthefish_dirname $d
20	20	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
4	15	----> if [ -e $d/go.mod ]...
11	11	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
108	171	----> set d (__bobthefish_dirname $d)
40	63	-----> __bobthefish_dirname $d
23	23	------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	----> not [ -z "$d" ]
2	12	----> if [ -e $d/go.mod ]...
10	10	-----> [ -e $d/go.mod ]
7	7	----> [ "$d" = "/" ]
54	100	----> set d (__bobthefish_dirname $d)
30	46	-----> __bobthefish_dirname $d
16	16	------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	----> not [ -z "$d" ]
6	16	---> if [ "$gomod_version" = "0" ]...
7	7	----> [ "$gomod_version" = "0" ]
3	3	----> return
29	63	--> __bobthefish_prompt_virtualfish
16	16	---> command -q python
15	15	---> [ "$theme_display_virtualenv" = 'no' -o -z "$VIRTUAL_ENV" -a -z "$CONDA_DEFAULT_ENV" ]
3	3	---> return
9	24	--> __bobthefish_prompt_virtualgo
11	11	---> [ "$theme_display_virtualgo" = 'no' -o -z "$VIRTUALGO" ]
4	4	---> return
14	853	--> __bobthefish_prompt_node
6	6	---> set -l should_show
41	823	---> if [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]...
10	10	----> [ "$theme_display_node" = 'always' -o "$theme_display_nvm" = 'yes' ]
7	7	----> [ "$theme_display_node" = 'yes' ]
22	765	----> __bobthefish_prompt_find_file_up "$PWD" package.json .nvmrc .node-version
8	8	-----> set -l dir "$argv[1]"
9	9	-----> set -l files $argv[2..-1]
6	18	-----> if test -z "$dir"...
6	6	------> test -z "$dir"
6	6	------> test -z "$files"
76	704	-----> while [ "$dir" ]
...
5	5	------> [ "$dir" ]
12	48	------> for f in $files...
5	14	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
4	11	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
6	6	------> [ "$dir" = '/' ]
50	96	------> set dir (__bobthefish_dirname "$dir")
27	46	-------> __bobthefish_dirname "$dir"
19	19	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
12	47	------> for f in $files...
4	14	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	11	-------> if [ -e "$dir/$f" ]...
8	8	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
8	8	------> [ "$dir" = '/' ]
48	85	------> set dir (__bobthefish_dirname "$dir")
23	37	-------> __bobthefish_dirname "$dir"
14	14	--------> string replace -r '/[^/]+/?$' '' -- $argv
5	5	------> [ "$dir" ]
12	45	------> for f in $files...
3	13	-------> if [ -e "$dir/$f" ]...
10	10	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
51	94	------> set dir (__bobthefish_dirname "$dir")
30	43	-------> __bobthefish_dirname "$dir"
13	13	--------> string replace -r '/[^/]+/?$' '' -- $argv
9	9	------> [ "$dir" ]
14	52	------> for f in $files...
4	16	-------> if [ -e "$dir/$f" ]...
12	12	--------> [ -e "$dir/$f" ]
3	12	-------> if [ -e "$dir/$f" ]...
9	9	--------> [ -e "$dir/$f" ]
3	10	-------> if [ -e "$dir/$f" ]...
7	7	--------> [ -e "$dir/$f" ]
7	7	------> [ "$dir" = '/' ]
58	102	------> set dir (__bobthefish_dirname "$dir")
27	44	-------> __bobthefish_dirname "$dir"
17	17	--------> string replace -r '/[^/]+/?$' '' -- $argv
6	6	------> [ "$dir" ]
4	4	-----> return 1
6	6	---> [ -z "$should_show" ]
4	4	---> return
55	2174	--> set -l git_root_dir (__bobthefish_git_project_dir $real_pwd)
25	2119	---> __bobthefish_git_project_dir $real_pwd
9	9	----> [ "$theme_display_git" = 'no' ]
73	73	----> command -q git
6	6	----> set -q theme_vcs_ignore_paths
21	2006	----> if [ "$theme_git_worktree_support" != 'yes' ]...
7	7	-----> [ "$theme_git_worktree_support" != 'yes' ]
70	1937	-----> set -l git_toplevel (command git rev-parse --show-toplevel 2>/dev/null)
1867	1867	------> command git rev-parse --show-toplevel 2>/dev/null
11	11	-----> [ -z "$git_toplevel" ]
13	30	-----> switch $real_pwd/...
13	13	------> echo $git_toplevel
4	4	------> return
57	89	--> set -l hg_root_dir (__bobthefish_hg_project_dir $real_pwd)
18	32	---> __bobthefish_hg_project_dir $real_pwd
10	10	----> [ "$theme_display_hg" = 'yes' ]
4	4	----> return
52	82	--> set -l fossil_root_dir (__bobthefish_fossil_project_dir $real_pwd)
17	30	---> __bobthefish_fossil_project_dir $real_pwd
9	9	----> [ "$theme_display_fossil" = 'yes' ]
4	4	----> return
58	18547	--> switch (__bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir")...
18	272	---> __bobthefish_closest_parent "$git_root_dir" "$hg_root_dir" "$fossil_root_dir"
58	254	----> if builtin -q path...
27	27	-----> builtin -q path
58	169	-----> echo (path sort -r $argv)[1]
111	111	------> path sort -r $argv
61	18217	---> __bobthefish_prompt_git $git_root_dir $real_pwd
10	10	----> set -l dirty ''
66	3270	----> if [ "$theme_display_git_dirty" != 'no' ]...
10	10	-----> [ "$theme_display_git_dirty" != 'no' ]
64	1536	-----> set -l show_dirty (command git config --bool bash.showDirtyState 2>/dev/null)
1472	1472	------> command git config --bool bash.showDirtyState 2>/dev/null
8	1658	-----> if [ "$show_dirty" != 'false' ]...
10	10	------> [ "$show_dirty" != 'false' ]
69	1624	------> set dirty (command git diff --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_dirty_glyph")
1539	1539	-------> command git diff --no-ext-diff --quiet --exit-code 2>/dev/null
16	16	-------> echo -n "$git_dirty_glyph"
5	16	------> if [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]...
11	11	-------> [ "$dirty" -a "$theme_display_git_dirty_verbose" = 'yes' ]
65	1685	----> set -l staged (command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null; or echo -n "$git_staged_glyph")
1620	1620	-----> command git diff --cached --no-ext-diff --quiet --exit-code 2>/dev/null
59	1469	----> set -l stashed (__bobthefish_git_stashed)
13	1410	-----> __bobthefish_git_stashed
24	1397	------> if [ "$theme_display_git_stashed_verbose" = 'yes' ]...
9	9	-------> [ "$theme_display_git_stashed_verbose" = 'yes' ]
1364	1364	-------> command git rev-parse --verify --quiet refs/stash >/dev/null
61	1944	----> set -l ahead (__bobthefish_git_ahead)
19	1883	-----> __bobthefish_git_ahead
4	14	------> if [ "$theme_display_git_ahead_verbose" = 'yes' ]...
10	10	-------> [ "$theme_display_git_ahead_verbose" = 'yes' ]
6	6	------> set -l ahead 0
7	7	------> set -l behind 0
83	1803	------> for line in (command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null)...
1720	1720	-------> command git rev-list --left-right '@{upstream}...HEAD' 2>/dev/null
7	34	------> if [ $ahead -eq 1 ]...
18	18	-------> [ $ahead -eq 1 ]
9	9	-------> [ $behind -eq 1 ]
8	8	----> set -l new ''
14	3344	----> if [ "$theme_display_git_untracked" != 'no' ]...
10	10	-----> [ "$theme_display_git_untracked" != 'no' ]
90	1479	-----> set -l show_untracked (command git config --bool bash.showUntrackedFiles 2>/dev/null)
1389	1389	------> command git config --bool bash.showUntrackedFiles 2>/dev/null
13	1841	-----> if [ "$show_untracked" != 'false' ]...
13	13	------> [ "$show_untracked" != 'false' ]
89	1801	------> set new (command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null)
1712	1712	-------> command git ls-files --other --exclude-standard --directory --no-empty-directory "$git_root_dir" 2>/dev/null
4	14	------> if [ "$new" ]...
10	10	-------> [ "$new" ]
15	15	----> set -l flags "$dirty$staged$stashed$ahead$new"
6	6	----> [ "$flags" ]
8	8	----> set flags " $flags"
12	12	----> set -l flag_colors $color_repo
7	23	----> if [ "$dirty" ]...
6	6	-----> [ "$dirty" ]
10	10	-----> set flag_colors $color_repo_dirty
39	914	----> __bobthefish_path_segment $git_root_dir project
13	13	-----> set -l segment_color $color_path
12	12	-----> set -l segment_basename_color $color_path_basename
5	19	-----> if not [ -w "$segment_dir" ]...
14	14	------> not [ -w "$segment_dir" ]
41	202	-----> __bobthefish_start_segment $segment_color
11	11	------> set -l bg $argv[1]
8	8	------> set -e argv[1]
8	8	------> set -l fg $argv[1]
7	7	------> set -e argv[1]
19	19	------> set_color normal
22	22	------> set_color -b $bg $fg $argv
33	77	------> switch "$__bobthefish_current_bg"...
10	10	-------> set_color $__bobthefish_current_bg
24	24	-------> echo -ns $right_black_arrow_glyph ' '
10	10	-------> set_color $fg $argv
9	9	------> set __bobthefish_current_bg $bg
6	6	-----> set -l directory
6	6	-----> set -l parent
15	569	-----> switch "$segment_dir"...
56	462	------> set parent (__bobthefish_pretty_parent "$segment_dir")
33	406	-------> __bobthefish_pretty_parent "$segment_dir"
8	8	--------> set -q fish_prompt_pwd_dir_length
11	11	--------> set -l fish_prompt_pwd_dir_length 1
11	11	--------> set -l real_home ~
61	300	--------> set -l parent_dir (string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir))
105	239	---------> string replace -r '^'(__bobthefish_escape_regex "$real_home")'($|/)' '~$1' (__bobthefish_dirname $child_dir)
50	70	----------> __bobthefish_escape_regex "$real_home"
20	20	-----------> string escape --style=regex "$str" 2>/dev/null
26	64	----------> __bobthefish_dirname $child_dir
38	38	-----------> string replace -r '/[^/]+/?$' '' -- $argv
3	11	--------> if [ -z "$parent_dir" ]...
8	8	---------> [ -z "$parent_dir" ]
3	12	--------> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
9	9	---------> [ $fish_prompt_pwd_dir_length -eq 0 ]
20	20	--------> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' "$parent_dir/"
48	92	------> set directory (__bobthefish_basename "$segment_dir")
28	44	-------> __bobthefish_basename "$segment_dir"
16	16	--------> string replace -r '^.*/' '' -- $argv
15	15	-----> [ "$theme_show_project_parent" != "no" -o "$path_type" != "project" ]
10	10	-----> echo -n $parent
15	15	-----> set_color -b $segment_basename_color
8	8	-----> echo -ns $directory ' '
23	123	----> __bobthefish_start_segment $flag_colors
8	8	-----> set -l bg $argv[1]
5	5	-----> set -e argv[1]
6	6	-----> set -l fg $argv[1]
5	5	-----> set -e argv[1]
7	7	-----> set_color normal
12	12	-----> set_color -b $bg $fg $argv
26	50	-----> switch "$__bobthefish_current_bg"...
8	8	------> set_color $__bobthefish_current_bg
8	8	------> echo -ns $right_black_arrow_glyph ' '
8	8	------> set_color $fg $argv
7	7	-----> set __bobthefish_current_bg $bg
56	4948	----> echo -ns (__bobthefish_git_branch) $flags ' '
16	4892	-----> __bobthefish_git_branch
63	1687	------> set -l tag (command git describe --tags --exact-match 2>/dev/null)
1624	1624	-------> command git describe --tags --exact-match 2>/dev/null
75	1511	------> set -l branch (command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' '')
1436	1436	-------> command git symbolic-ref HEAD 2>/dev/null | string replace -r '^refs/heads/' ''
19	1678	------> begin...
9	9	-------> [ -n "$theme_git_default_branches" ]
64	1534	-------> set -l theme_git_default_branches master main (git config init.defaultBranch)
1470	1470	--------> git config init.defaultBranch
14	14	-------> [ "$theme_display_git_master_branch" != 'yes' -a "$theme_display_git_default_branch" != 'yes' ]
90	90	-------> contains $branch $theme_git_default_branches
8	8	-------> echo $branch_glyph
4	4	-------> return
11	11	----> set_color normal
13	366	----> if [ "$theme_git_worktree_support" != 'yes' ]...
8	8	-----> [ "$theme_git_worktree_support" != 'yes' ]
50	332	-----> set -l project_pwd (__bobthefish_project_pwd $git_root_dir $real_pwd)
24	282	------> __bobthefish_project_pwd $git_root_dir $real_pwd
6	6	-------> set -q theme_project_dir_length
6	6	-------> set -l theme_project_dir_length 0
62	214	-------> set -l project_dir (string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd)
85	152	--------> string replace -r '^'(__bobthefish_escape_regex "$project_root_dir")'($|/)' '' $real_pwd
43	67	---------> __bobthefish_escape_regex "$project_root_dir"
24	24	----------> string escape --style=regex "$str" 2>/dev/null
8	32	-------> if [ $theme_project_dir_length -eq 0 ]...
11	11	--------> [ $theme_project_dir_length -eq 0 ]
9	9	--------> echo -n $project_dir
4	4	--------> return
3	9	-----> if [ "$project_pwd" ]...
6	6	------> [ "$project_pwd" ]
4	4	-----> return
16	141	--> __bobthefish_finish_segments
21	57	---> if [ -n "$__bobthefish_current_bg" ]...
8	8	----> [ -n "$__bobthefish_current_bg" ]
9	9	----> set_color normal
10	10	----> set_color $__bobthefish_current_bg
9	9	----> echo -ns $right_black_arrow_glyph ' '
11	55	---> if [ "$theme_newline_cursor" = 'yes' ]...
8	8	----> [ "$theme_newline_cursor" = 'yes' ]
7	7	----> echo -ens "\n"
10	10	----> set_color $fish_color_autosuggestion
6	19	----> if set -q theme_newline_prompt...
5	5	-----> set -q theme_newline_prompt
8	8	-----> echo -ens "$theme_newline_prompt"
7	7	---> set_color normal
6	6	---> set __bobthefish_current_bg
12	387	> fish_right_prompt
9	34	-> if not set -q CONDA_LEFT_PROMPT...
7	7	--> not set -q CONDA_LEFT_PROMPT
9	18	--> __conda_add_prompt
3	9	---> if set -q CONDA_PROMPT_MODIFIER...
6	6	----> set -q CONDA_PROMPT_MODIFIER
18	341	-> __fish_right_prompt_orig
8	8	--> set -l __bobthefish_left_arrow_glyph \uE0B3
3	15	--> if [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]...
12	12	---> [ "$theme_powerline_fonts" = "no" -a "$theme_nerd_fonts" != "yes" ]
11	11	--> set_color $fish_color_autosuggestion
23	262	--> __bobthefish_cmd_duration
8	8	---> [ "$theme_display_cmd_duration" = "no" ]
12	12	---> [ -z "$CMD_DURATION" -o "$CMD_DURATION" -lt 100 ]
15	195	---> if [ "$CMD_DURATION" -lt 5000 ]...
7	7	----> [ "$CMD_DURATION" -lt 5000 ]
6	6	----> [ "$CMD_DURATION" -lt 60000 ]
5	5	----> [ "$CMD_DURATION" -lt 3600000 ]
9	9	----> set_color $fish_color_error
17	153	----> __bobthefish_pretty_ms $CMD_DURATION m
6	6	-----> set -l interval_ms
5	5	-----> set -l scale 1
9	14	-----> switch $interval...
5	5	------> set interval_ms 60000
14	111	-----> switch $FISH_VERSION...
89	89	------> math -s$scale "$ms/$interval_ms"
8	8	------> echo -ns $interval
9	9	---> set_color $fish_color_normal
8	8	---> set_color $fish_color_autosuggestion
7	7	---> [ "$theme_display_date" = "no" ]
10	19	--> __bobthefish_timestamp
6	6	---> [ "$theme_display_date" = "no" ]
3	3	---> return
8	8	--> set_color normal
18	677	> fish_title
11	28	-> __bobthefish_title_user
5	17	--> if [ "$theme_title_display_user" = 'yes' ]...
12	12	---> [ "$theme_title_display_user" = 'yes' ]
3	11	-> if [ "$theme_title_display_process" = 'yes' ]...
8	8	--> [ "$theme_title_display_process" = 'yes' ]
7	620	-> if [ "$theme_title_display_path" != 'no' ]...
7	7	--> [ "$theme_title_display_path" != 'no' ]
6	606	--> if [ "$theme_title_use_abbreviated_path" = 'no' ]...
6	6	---> [ "$theme_title_use_abbreviated_path" = 'no' ]
130	594	---> prompt_pwd
9	9	----> set -l options h/help d/dir-length= D/full-length-dirs=
13	13	----> argparse -n prompt_pwd $options -- $argv
3	8	----> if set -q _flag_help...
5	5	-----> set -q _flag_help
6	6	----> set -q argv[1]
6	6	----> set argv $PWD
4	4	----> set -ql _flag_d
4	4	----> set -q fish_prompt_pwd_dir_length
5	5	----> set -l fish_prompt_pwd_dir_length 1
5	5	----> set -l fulldirs 0
4	4	----> set -ql _flag_D
5	5	----> set -q fish_prompt_pwd_full_dirs
6	6	----> set -l fish_prompt_pwd_full_dirs 1
19	389	----> for path in $argv...
54	65	-----> set -l realhome (string escape --style=regex -- ~)
11	11	------> string escape --style=regex -- ~
51	69	-----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $path)
18	18	------> string replace -r '^'"$realhome"'($|/)' '~$1' $path
12	236	-----> if test "$fish_prompt_pwd_dir_length" -eq 0...
9	9	------> test "$fish_prompt_pwd_dir_length" -eq 0
6	6	------> set -l full
12	139	------> if test $fish_prompt_pwd_full_dirs -gt 0...
6	6	-------> test $fish_prompt_pwd_full_dirs -gt 0
47	109	-------> set -l all (string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp)
47	62	--------> string split -m (math $fish_prompt_pwd_full_dirs - 1) -r / $tmp
15	15	---------> math $fish_prompt_pwd_full_dirs - 1
6	6	-------> set tmp $all[1]
6	6	-------> set full $all[2..]
49	70	------> string join / -- (string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp) $full
21	21	-------> string replace -ar -- '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
14	27	> __fish_disable_bracketed_paste
13	13	-> printf "\e[?2004l"
